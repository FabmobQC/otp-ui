{"version":3,"sources":["../../src/SubmodeSelector/index.tsx"],"names":["React","ModeButton","S","SubmodeSelector","className","inline","label","modes","onChange","style","LabelType","FloatingSettingLabel","SettingLabel","RowType","InlineRow","Row","map","option","selected","id","title","text"],"mappings":"AACA,OAAOA,KAAP,MAAoC,OAApC;AAEA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAO,KAAKC,CAAZ,MAAmB,WAAnB,C,CAEA;;AA+BA;AACA;AACA;AACA;AACA,eAAe,SAASC,eAAT,OAOwB;AAAA,4BANrCC,SAMqC;AAAA,MANrCA,SAMqC,+BANzB,IAMyB;AAAA,yBALrCC,MAKqC;AAAA,MALrCA,MAKqC,4BAL5B,KAK4B;AAAA,wBAJrCC,KAIqC;AAAA,MAJrCA,KAIqC,2BAJ7B,IAI6B;AAAA,wBAHrCC,KAGqC;AAAA,MAHrCA,KAGqC,2BAH7B,IAG6B;AAAA,2BAFrCC,QAEqC;AAAA,MAFrCA,QAEqC,8BAF1B,IAE0B;AAAA,wBADrCC,KACqC;AAAA,MADrCA,KACqC,2BAD7B,IAC6B;AACrC,MAAMC,SAAS,GAAGL,MAAM,GAAGH,CAAC,CAACS,oBAAL,GAA4BT,CAAC,CAACU,YAAtD;AACA,MAAMC,OAAO,GAAGR,MAAM,GAClBH,CAAC,CAACC,eAAF,CAAkBW,SADA,GAElBZ,CAAC,CAACC,eAAF,CAAkBY,GAFtB;AAIA,sBACE,oBAAC,CAAD,CAAG,eAAH;AACE,kBAAYT,KADd;AAEE,IAAA,SAAS,EAAEF,SAFb;AAGE,IAAA,IAAI,EAAC,OAHP;AAIE,IAAA,KAAK,EAAEK;AAJT,KAMGH,KAAK,iBAAI,oBAAC,SAAD;AAAW,mBAAY,MAAvB;AAA8B,IAAA,EAAE,EAAC;AAAjC,KAAyCA,KAAzC,CANZ,eAOE,oBAAC,OAAD,QACGC,KAAK,IACJA,KAAK,CAACS,GAAN,CAAU,UAAAC,MAAM;AAAA,wBACd,oBAAC,UAAD;AACE,sBAAcA,MAAM,CAACC,QADvB;AAEE,MAAA,GAAG,EAAED,MAAM,CAACE,EAFd;AAGE,MAAA,QAAQ,EAAEF,MAAM,CAACC,QAHnB;AAIE,MAAA,SAAS,EAAE,KAJb;AAKE,MAAA,KAAK,EAAED,MAAM,CAACG,KALhB;AAME,MAAA,OAAO,EAAE;AAAA,eAAMZ,QAAQ,CAACS,MAAM,CAACE,EAAR,CAAd;AAAA;AANX,OAQGF,MAAM,CAACI,IARV,CADc;AAAA,GAAhB,CAFJ,CAPF,CADF;AAyBD","sourcesContent":["import CSS from \"csstype\";\nimport React, { ReactElement } from \"react\";\n\nimport ModeButton from \"../ModeButton\";\nimport * as S from \"../styled\";\n\n// eslint-disable-next-line prettier/prettier\nimport type { ModeSelectorOption } from \"../types\";\n\ninterface SubmodeSelectorProps {\n  /**\n   * The CSS class name to apply to this element.\n   */\n  className?: string;\n  /**\n   * Determines how the label and mode buttons are displayed.\n   */\n  inline?: boolean;\n  /**\n   * The optional text to display before the submodes.\n   */\n  label?: string;\n  /**\n   * An array of submodes for the trip query, i.e. transit modes, TNC, or rental companies.\n   */\n  modes?: ModeSelectorOption[];\n  /**\n   * Triggered when the user toggles a submode.\n   * @param id The id of the option clicked.\n   */\n  onChange: (id: string) => void;\n  /**\n   * Standard React inline style prop.\n   */\n  style?: CSS.Properties;\n}\n\n/**\n * SubmodeSelector is the control container where the OTP user selects\n * the submodes (e.g. train, bus) for transit, or the providers for TNC and rental companies.\n */\nexport default function SubmodeSelector({\n  className = null,\n  inline = false,\n  label = null,\n  modes = null,\n  onChange = null,\n  style = null\n}: SubmodeSelectorProps): ReactElement {\n  const LabelType = inline ? S.FloatingSettingLabel : S.SettingLabel;\n  const RowType = inline\n    ? S.SubmodeSelector.InlineRow\n    : S.SubmodeSelector.Row;\n\n  return (\n    <S.SubmodeSelector\n      aria-label={label}\n      className={className}\n      role=\"group\"\n      style={style}\n    >\n      {label && <LabelType aria-hidden=\"true\" as=\"span\">{label}</LabelType>}\n      <RowType>\n        {modes &&\n          modes.map(option => (\n            <ModeButton\n              aria-pressed={option.selected}\n              key={option.id}\n              selected={option.selected}\n              showTitle={false}\n              title={option.title}\n              onClick={() => onChange(option.id)}\n            >\n              {option.text}\n            </ModeButton>\n          ))}\n      </RowType>\n    </S.SubmodeSelector>\n  );\n}\n"],"file":"index.js"}