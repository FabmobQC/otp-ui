{"version":3,"sources":["../../src/MetroModeSelector/SubSettingsPane.tsx"],"names":["flatten","React","useIntl","styled","CheckboxSelector","DropdownSelector","SliderSelector","generateModeButtonLabel","generateModeSettingLabels","defaultEnglishMessages","defaultMessages","SubmodeGrid","div","SettingsPanel","fieldset","SubSettingsCheckbox","props","flexbox","FormLabelIconWrapper","span","ModeSettingRenderer","onChange","setting","intl","type","key","label","labelHigh","labelLow","labelWithIcon","icon","value","options","map","o","text","formatMessage","description","id","defaultMessage","high","low","step","SubSettingsPane","modeButton","onSettingUpdate","modeSettings","reduce","accumulator","cur","settingsOnlySubmodes","push","settingsNoSubmodes"],"mappings":"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","sourcesContent":["import { flatten } from \"flat\";\nimport { ModeButtonDefinition, ModeSetting } from \"@opentripplanner/types\";\nimport React, { ReactElement } from \"react\";\nimport { useIntl } from \"react-intl\";\nimport styled from \"styled-components\";\n\nimport CheckboxSelector from \"../CheckboxSelector\";\nimport DropdownSelector from \"../DropdownSelector\";\nimport SliderSelector from \"../SliderSelector\";\nimport generateModeButtonLabel, { generateModeSettingLabels } from \"./i18n\";\n\nimport defaultEnglishMessages from \"../../i18n/en-US.yml\";\n// HACK: We should flatten the messages loaded above because\n// the YAML loaders behave differently between webpack and our version of jest:\n// - the yaml loader for webpack returns a nested object,\n// - the yaml loader for jest returns messages with flattened ids.\nexport const defaultMessages: Record<string, string> = flatten(\n  defaultEnglishMessages\n);\n\nconst SubmodeGrid = styled.div`\n  display: grid;\n  grid-column: span 2;\n  grid-template-columns: 1fr 1fr;\n  width: 100%;\n`;\n\nconst SettingsPanel = styled.fieldset`\n  border: none;\n  pointer-events: auto;\n\n  div {\n    padding: 5px 0;\n  }\n  .wide {\n    grid-column: span 2;\n  }\n  .slim {\n    font-size: 125%;\n    font-weight: 125%;\n  }\n\n  legend {\n    font-size: 1.5em;\n    margin-bottom: 0.5rem;\n    padding-top: 15px;\n  }\n`;\n\nexport const SubSettingsCheckbox = styled(CheckboxSelector)<{\n  flexbox: boolean;\n}>`\n  ${props => (props.flexbox ? \"align-items: baseline;\" : \"\")};\n  display: ${props => (props.flexbox ? \"flex\" : \"inherit\")};\n  margin-left: 4px;\n\n  input {\n    flex-shrink: 0;\n  }\n`;\n\nconst FormLabelIconWrapper = styled.span`\n  align-items: baseline;\n  display: flex;\n  gap: 4px;\n  svg {\n    width: 16px;\n    height: 16px;\n    display: inline-block;\n    margin-bottom: 4px;\n    vertical-align: middle;\n    overflow: hidden;\n  }\n`;\n\n/**\n * Renders a mode setting definition\n * @param onChange function for when the value changes, and the setting to be rendered\n * @returns JSX Element to render\n */\nexport const ModeSettingRenderer = ({\n  onChange,\n  setting\n}: {\n  onChange: (QueryParamChangeEvent) => void;\n  setting: ModeSetting;\n}): JSX.Element => {\n  const intl = useIntl();\n  const { label, labelHigh, labelLow } = generateModeSettingLabels(\n    setting.type,\n    setting.key,\n    intl,\n    setting.label\n  );\n  const labelWithIcon =\n    \"icon\" in setting ? (\n      <FormLabelIconWrapper>\n        {setting.icon && <div role=\"none\">{setting.icon}</div>}\n        <div>{label}</div>\n      </FormLabelIconWrapper>\n    ) : (\n      label\n    );\n\n  switch (setting.type) {\n    case \"CHECKBOX\":\n    case \"SUBMODE\":\n      return (\n        <SubSettingsCheckbox\n          flexbox={setting.type === \"SUBMODE\"}\n          label={labelWithIcon}\n          name={setting.key}\n          onChange={onChange}\n          value={setting.value}\n        />\n      );\n    case \"DROPDOWN\":\n      return (\n        <DropdownSelector\n          label={labelWithIcon}\n          name={setting.key}\n          onChange={onChange}\n          options={setting.options.map(o => ({\n            ...o,\n            text: intl.formatMessage({\n              description: `Metro Mode Selector Setting (${setting.key}) Option Label (${o.value})`,\n              id: `otpUi.ModeSelector.settings.${setting.key}-options-${o.value}`,\n              defaultMessage: o.text\n            })\n          }))}\n          value={setting.value}\n        />\n      );\n    case \"SLIDER\":\n      return (\n        <SliderSelector\n          label={label}\n          labelHigh={labelHigh}\n          labelLow={labelLow}\n          max={setting.high}\n          min={setting.low}\n          name={setting.key}\n          onChange={onChange}\n          step={setting.step}\n          value={setting.value}\n        />\n      );\n    default:\n      return null;\n  }\n};\n\ninterface Props {\n  modeButton: ModeButtonDefinition;\n  onSettingUpdate: (QueryParamChangeEvent) => void;\n}\nexport default function SubSettingsPane({\n  modeButton,\n  onSettingUpdate\n}: Props): ReactElement {\n  const intl = useIntl();\n  const label = generateModeButtonLabel(modeButton.key, intl, modeButton.label);\n\n  // Split the mode settings out based on whether they're submodes or not\n  // This is so we can display submodes in a grid at the top\n  const {\n    settingsNoSubmodes,\n    settingsOnlySubmodes\n  } = modeButton.modeSettings.reduce(\n    (accumulator, cur) => {\n      if (cur.type === \"SUBMODE\") {\n        accumulator.settingsOnlySubmodes.push(cur);\n      } else {\n        accumulator.settingsNoSubmodes.push(cur);\n      }\n      return accumulator;\n    },\n    { settingsNoSubmodes: [], settingsOnlySubmodes: [] }\n  );\n\n  return (\n    <SettingsPanel>\n      <legend>\n        <span id={`metro-mode-selector-${modeButton.key}-button-label`}>\n          {label}\n        </span>\n      </legend>\n      <SubmodeGrid>\n        {settingsOnlySubmodes.map(setting => (\n          <ModeSettingRenderer\n            key={setting.key}\n            onChange={onSettingUpdate}\n            setting={setting}\n          />\n        ))}\n      </SubmodeGrid>\n      {settingsNoSubmodes.map(setting => (\n        <ModeSettingRenderer\n          key={setting.key}\n          onChange={onSettingUpdate}\n          setting={setting}\n        />\n      ))}\n    </SettingsPanel>\n  );\n}\n"],"file":"SubSettingsPane.js"}