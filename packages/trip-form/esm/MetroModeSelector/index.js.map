{"version":3,"sources":["../../src/MetroModeSelector/index.tsx"],"names":["arrow","FloatingFocusManager","offset","safePolygon","shift","useClick","useDismiss","useFloating","useHover","useInteractions","useRole","CaretDown","CaretUp","React","useCallback","useRef","useState","FormattedMessage","useIntl","styled","css","SubSettingsPane","defaultMessages","generateModeButtonLabel","invisibleCss","InvisibleA11yLabel","span","ModeBar","fieldset","defaultAccentColor","defaultActiveHoverColor","boxShadowCss","ModeButtonWrapper","props","accentColor","activeHoverColor","fillModeIcons","HoverPanel","div","HoverInnerContainer","Arrow","ModeButton","id","itemWithKeyboard","modeButton","onPopupClose","onPopupKeyboardExpand","onSettingsUpdate","onToggle","intl","open","setOpen","hoverEnabled","setHoverEnabled","arrowRef","onOpenChange","value","middleware","element","context","floating","middlewareData","arrowX","x","arrowY","y","reference","strategy","enabled","handleClose","blockPointerEvents","restMs","buffer","getFloatingProps","getReferenceProps","renderDropdown","modeSettings","length","interactionProps","ariaControls","ariaExpanded","ariaHasPopup","labelInteractionProps","checkboxId","handleButtonClick","e","onClick","label","key","undefined","mode","setTimeout","left","position","top","ModeSelector","modeButtons","onToggleModeButton","setItemWithKeyboard","map","button"],"mappings":"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","sourcesContent":["import {\n  arrow,\n  FloatingFocusManager,\n  offset,\n  safePolygon,\n  shift,\n  useClick,\n  useDismiss,\n  useFloating,\n  useHover,\n  useInteractions,\n  useRole\n} from \"@floating-ui/react\";\nimport { ModeButtonDefinition } from \"@opentripplanner/types\";\nimport { CaretDown } from \"@styled-icons/fa-solid/CaretDown\";\nimport { CaretUp } from \"@styled-icons/fa-solid/CaretUp\";\nimport React, { ReactElement, useCallback, useRef, useState } from \"react\";\nimport { FormattedMessage, useIntl } from \"react-intl\";\nimport styled, { css } from \"styled-components\";\n\nimport SubSettingsPane, { defaultMessages } from \"./SubSettingsPane\";\nimport generateModeButtonLabel from \"./i18n\";\n\nconst invisibleCss = css`\n  clip: rect(0, 0, 0, 0);\n  height: 0;\n  overflow: hidden;\n  position: absolute;\n  width: 0;\n`;\n\nconst InvisibleA11yLabel = styled.span`\n  display: inline-block;\n  ${invisibleCss}\n`;\n\nconst ModeBar = styled.fieldset`\n  border: none;\n  display: inline-flex;\n  gap: 0 3px;\n  margin: 0 4px 0 0;\n  padding: 0;\n\n  /* <legend> is not shown visually. */\n  & > legend {\n    ${invisibleCss}\n  }\n`;\n\nconst defaultAccentColor = \"#666\";\nconst defaultActiveHoverColor = \"#333\";\n\nconst boxShadowCss = css`\n  box-shadow: rgba(0, 0, 0, 0.1) 0 0 20px;\n`;\n\nconst ModeButtonWrapper = styled.span<{\n  fillModeIcons?: boolean;\n  accentColor?: string;\n  activeHoverColor?: string;\n}>`\n  position: relative;\n\n  & > label {\n    background: #fff;\n    border-radius: 5px;\n    border: 2px solid ${props => props.accentColor || defaultAccentColor};\n    cursor: pointer;\n    display: inline-flex;\n    padding: 0.75rem 0.75rem;\n    transition: all 250ms cubic-bezier(0.27, 0.01, 0.38, 1.06);\n    user-select: none;\n    justify-content: center;\n    aspect-ratio: 1/1; /* stylelint-disable-line property-no-unknown */\n  }\n\n  &:not(:last-of-type) > label {\n    border-bottom-right-radius: 0;\n    border-top-right-radius: 0;\n  }\n  &:not(:first-of-type) > label {\n    border-bottom-left-radius: 0;\n    border-top-left-radius: 0;\n  }\n  & > label:hover {\n    background: #eee;\n    border-color: ${props => props.activeHoverColor || defaultActiveHoverColor};\n    ${boxShadowCss}\n  }\n\n  & > input {\n    ${invisibleCss}\n    /* Firefox will still render (tiny) controls, even if their bounds are empty,\n       so move them out of sight. */\n    left: -20px;\n    position: absolute;\n  }\n\n  & > button {\n    ${invisibleCss}\n    background: none;\n    border: none;\n    /* Lateral position is offset so that the button outline is visible when focused. */\n    bottom: 0;\n    left: 4px;\n    position: absolute;\n  }\n\n  & > button:focus {\n    clip: initial;\n    height: initial;\n    width: calc(100% - 8px);\n  }\n\n  & > input:checked + label {\n    background: ${props => props.accentColor || defaultAccentColor};\n  }\n\n  & > input:checked + label,\n  & > input:checked ~ button {\n    color: white;\n    fill: ${props =>\n      props.fillModeIcons === false ? \"inherit\" : \"currentcolor\"};\n  }\n\n  & > input:focus + label {\n    outline: 5px auto blue;\n    /* This next line enhances the visuals in Chromium (webkit) browsers */\n    outline: 5px auto -webkit-focus-ring-color;\n    /* Render the focus outline inside and distinct from the border for both Chrome and Firefox. */\n    outline-offset: -4px;\n  }\n\n  & > input:checked + label:hover {\n    background: ${props => props.activeHoverColor || defaultActiveHoverColor};\n  }\n\n  & > label > svg {\n    color: ${props => props.accentColor || defaultAccentColor};\n    display: inline-block;\n    height: 32px;\n    margin: auto;\n    vertical-align: middle;\n    width: 32px;\n    fill: ${props =>\n      props.fillModeIcons === false ? \"inherit\" : \"currentcolor\"};\n  }\n\n  & > input:checked + label > svg {\n    color: #eee;\n  }\n`;\n\nconst HoverPanel = styled.div`\n  min-width: 300px;\n  padding: 0 10px;\n  width: 75%;\n  z-index: 100;\n`;\n\nconst HoverInnerContainer = styled.div`\n  background: #fff;\n  border-radius: 4px;\n  color: #2e2e2e;\n  font-size: 90%;\n  font-weight: bold;\n  padding: 0px 20px 10px;\n  pointer-events: none;\n  ${boxShadowCss}\n`;\n\nconst Arrow = styled.div`\n  background: #fff;\n  height: 10px;\n  margin-top: -5px;\n  position: absolute;\n  transform: rotate(-45deg);\n  width: 10px;\n  ${boxShadowCss}\n`;\n\ninterface ModeButtonProps {\n  // Optional properties for styling\n  accentColor?: string;\n  activeHoverColor?: string;\n\n  fillModeIcons?: boolean;\n  id: string;\n  itemWithKeyboard?: string;\n  modeButton: ModeButtonDefinition;\n  onPopupClose: () => void;\n  onPopupKeyboardExpand: (id: string) => void;\n  onSettingsUpdate: (QueryParamChangeEvent) => void;\n  onToggle: () => void;\n}\n\nfunction ModeButton({\n  accentColor,\n  activeHoverColor,\n  fillModeIcons,\n  id,\n  itemWithKeyboard,\n  modeButton,\n  onPopupClose,\n  onPopupKeyboardExpand,\n  onSettingsUpdate,\n  onToggle\n}: ModeButtonProps) {\n  const intl = useIntl();\n\n  const [open, setOpen] = useState(false);\n  const [hoverEnabled, setHoverEnabled] = useState(true);\n  const arrowRef = useRef(null);\n  const onOpenChange = useCallback(\n    value => {\n      setOpen(value);\n      if (!value && typeof onPopupClose === \"function\") {\n        onPopupClose();\n      }\n    },\n    [onPopupClose, setOpen]\n  );\n  const {\n    context,\n    floating,\n    middlewareData: { arrow: { x: arrowX, y: arrowY } = {} },\n    reference,\n    strategy,\n    x,\n    y\n  } = useFloating({\n    middleware: [offset(8), shift(), arrow({ element: arrowRef })],\n    onOpenChange,\n    open\n  });\n\n  const { getFloatingProps, getReferenceProps } = useInteractions([\n    useHover(context, {\n      // Enable hover only if no popup has been triggered via keyboard.\n      // (This is to avoid focus being stolen by hovering out of another button.)\n      enabled: itemWithKeyboard === null && hoverEnabled,\n      handleClose: safePolygon({\n        blockPointerEvents: false,\n        restMs: 500,\n        buffer: 0\n      })\n    }),\n    useClick(context),\n    useRole(context),\n    useDismiss(context)\n  ]);\n\n  const renderDropdown =\n    open && modeButton.enabled && modeButton.modeSettings?.length > 0;\n  const interactionProps = getReferenceProps();\n\n  // ARIA roles are added by the `useRole` hook.\n  // Remove the aria-controls, aria-expanded, and aria-haspopup props from the label, they will\n  // instead be passed to the button for keyboard/screen reader users to trigger the popup.\n  const {\n    \"aria-controls\": ariaControls,\n    \"aria-expanded\": ariaExpanded,\n    \"aria-haspopup\": ariaHasPopup,\n    ...labelInteractionProps\n  } = interactionProps;\n\n  const checkboxId = `metro-mode-selector-mode-${id}`;\n\n  const handleButtonClick = useCallback(\n    e => {\n      if (typeof onPopupKeyboardExpand === \"function\") {\n        onPopupKeyboardExpand(id);\n      }\n      if (typeof interactionProps.onClick === \"function\") {\n        interactionProps.onClick(e);\n      }\n    },\n    [id, interactionProps, onPopupKeyboardExpand]\n  );\n\n  const label = generateModeButtonLabel(modeButton.key, intl, modeButton.label);\n\n  return (\n    <ModeButtonWrapper\n      accentColor={accentColor}\n      activeHoverColor={activeHoverColor}\n      fillModeIcons={fillModeIcons}\n    >\n      {/* Basic checkbox that states whether a mode is selected. */}\n      <input\n        aria-label={label}\n        checked={modeButton.enabled ?? undefined}\n        id={checkboxId}\n        onChange={onToggle}\n        type=\"checkbox\"\n      />\n      {/* Label for the above checkbox, placed right after, so that CSS applies based on checkbox state. */}\n      {/* eslint-disable-next-line jsx-a11y/label-has-associated-control */}\n      <label\n        // This library relies on prop spreading\n        // eslint-disable-next-line react/jsx-props-no-spreading\n        {...labelInteractionProps}\n        htmlFor={checkboxId}\n        // This will trigger mouse effects such as showing popup on hover of on check.\n        ref={reference}\n        title={label}\n      >\n        <modeButton.Icon aria-hidden size={32} />\n        <InvisibleA11yLabel>{label}</InvisibleA11yLabel>\n      </label>\n      <button\n        // eslint-disable-next-line react/jsx-props-no-spreading\n        {...interactionProps}\n        // Disable button if mode is not checked (but keep in DOM for screen reader awareness)\n        disabled={!modeButton.enabled}\n        // Separate handler to communicate to the parent element\n        // which item had a popup triggered using the keyboard.\n        onClick={handleButtonClick}\n        // Required by linter settings\n        type=\"button\"\n      >\n        <span role=\"none\">\n          {open ? <CaretUp size={14} /> : <CaretDown size={14} />}\n        </span>\n        <InvisibleA11yLabel>\n          <FormattedMessage\n            defaultMessage={defaultMessages[\"otpUi.ModeSelector.settingsLabel\"]}\n            description=\"Label for the button to open settings for a travel mode.\"\n            id=\"otpUi.ModeSelector.settingsLabel\"\n            values={{ mode: label }}\n          />\n        </InvisibleA11yLabel>\n      </button>\n      {renderDropdown && (\n        <FloatingFocusManager\n          context={context}\n          // Restore the keyboard focus AND show focus cue on hovering out of the label\n          // only if this component triggered the popup using the keyboard.\n          // (Don't show focus cue if the popup was not triggered via keyboard.)\n          returnFocus={itemWithKeyboard === id}\n        >\n          <HoverPanel\n            // This library relies on prop spreading\n            // eslint-disable-next-line react/jsx-props-no-spreading\n            {...getFloatingProps()}\n            // Matches ID on Header element in SubSettingsPane\n            aria-labelledby={`metro-mode-selector-${modeButton.key}-button-label`}\n            // This is a workaround for a bug in Firefox.\n            // https://github.com/floating-ui/floating-ui/issues/2299\n            // https://bugzilla.mozilla.org/show_bug.cgi?id=1829500\n            onPointerDown={() => {\n              setHoverEnabled(false);\n              setTimeout(() => setHoverEnabled(true), 100);\n            }}\n            ref={floating}\n            style={{\n              left: x ?? 0,\n              position: strategy,\n              top: y ?? 0\n            }}\n          >\n            <Arrow\n              ref={arrowRef}\n              style={{ top: arrowY ?? 0, left: arrowX ?? 0 }}\n            />\n            <HoverInnerContainer>\n              <SubSettingsPane\n                modeButton={modeButton}\n                onSettingUpdate={onSettingsUpdate}\n              />\n            </HoverInnerContainer>\n          </HoverPanel>\n        </FloatingFocusManager>\n      )}\n    </ModeButtonWrapper>\n  );\n}\ninterface Props {\n  /**\n   * Accent color override\n   */\n  accentColor?: string;\n  /**\n   * Hover color override\n   */\n  activeHoverColor?: string;\n  /**\n   * Apply fill color to the mode icons when the button is selected. (default true)\n   */\n  fillModeIcons?: boolean;\n  /**\n   * Text that prompts to select a travel mode.\n   */\n  label?: string;\n  /**\n   * List of mode buttons to be displayed\n   */\n  modeButtons?: ModeButtonDefinition[];\n  /**\n   * Event handler for settings changes\n   * @param QueryParamChangeEvent Event from when the mode settings change\n   */\n  onSettingsUpdate: (QueryParamChangeEvent) => void;\n  /**\n   * Event for when a mode button is toggled\n   * @param key Mode button to be toggled\n   */\n  onToggleModeButton: (key: string, newState: boolean) => void;\n}\n\nexport default function ModeSelector({\n  accentColor,\n  activeHoverColor,\n  fillModeIcons,\n  label,\n  modeButtons = [],\n  onSettingsUpdate,\n  onToggleModeButton\n}: Props): ReactElement {\n  // State that holds the id of the active mode combination popup that was triggered via keyboard.\n  // It is used to enable/disable hover effects to avoid keyboard focus being stolen\n  // and overlapping popups on mouse hover.\n  const [itemWithKeyboard, setItemWithKeyboard] = useState<string>(null);\n  return (\n    <ModeBar className=\"metro-mode-selector\">\n      <legend>{label}</legend>\n      {modeButtons.map(button => (\n        <ModeButton\n          accentColor={accentColor}\n          activeHoverColor={activeHoverColor}\n          fillModeIcons={fillModeIcons}\n          id={button.key}\n          itemWithKeyboard={itemWithKeyboard}\n          key={button.label}\n          modeButton={button}\n          onPopupClose={useCallback(() => {\n            setItemWithKeyboard(null);\n          }, [setItemWithKeyboard])}\n          onPopupKeyboardExpand={setItemWithKeyboard}\n          onSettingsUpdate={onSettingsUpdate}\n          onToggle={useCallback(() => {\n            onToggleModeButton(button.key, !button.enabled);\n          }, [button, onToggleModeButton])}\n        />\n      ))}\n    </ModeBar>\n  );\n}\n"],"file":"index.js"}