{"version":3,"sources":["../../src/DateTimeSelector/index.tsx"],"names":["defaultMessages","defaultEnglishMessages","getCurrentDate","getCurrentTime","getUserTimezone","OTP_API_DATE_FORMAT","OTP_API_TIME_FORMAT","coreUtils","time","isInputTypeSupported","type","document","input","createElement","setAttribute","supportsDateTimeInputs","referenceDate","Date","DateTimeSelector","className","date","dateFormatLegacy","departArrive","forceLegacy","onQueryParamChange","style","timeFormatLegacy","timeZone","intl","handleQueryParamChange","queryParam","handleInputChange","key","evt","target","value","handleDateChange","handleTimeChange","handleTimeChangeLegacy","newTime","handleDateChangeLegacy","newDate","setDepartArrive","option","isSelected","departureOptions","text","forEach","opt","isLegacy","formatMessage","id","map"],"mappings":";;;;;;;;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AAMA;;;;;;AADA;AAGA;AACA;AACA;AACA;AACA,MAAMA,eAAuC,GAAG,mBAAQC,aAAR,CAAhD;AAEA,MAAM;AACJC,EAAAA,cADI;AAEJC,EAAAA,cAFI;AAGJC,EAAAA,eAHI;AAIJC,EAAAA,mBAJI;AAKJC,EAAAA;AALI,IAMFC,mBAAUC,IANd;;AA8DA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,oBAAT,CAA8BC,IAA9B,EAAqD;AACnD;AACA,MAAI,OAAOC,QAAP,KAAoB,WAAxB,EAAqC,OAAO,KAAP;AAErC,QAAMC,KAAK,GAAGD,QAAQ,CAACE,aAAT,CAAuB,OAAvB,CAAd;AACAD,EAAAA,KAAK,CAACE,YAAN,CAAmB,MAAnB,EAA2BJ,IAA3B;AACA,SAAOE,KAAK,CAACF,IAAN,KAAeA,IAAtB;AACD;;AAED,MAAMK,sBAAsB,GAAGN,oBAAoB,CAAC,MAAD,CAApB,IAAgCA,oBAAoB,CAAC,MAAD,CAAnF;AAEA;AACA;AACA;;AACA,MAAMO,aAAa,GAAG,IAAIC,IAAJ,EAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACe,SAASC,gBAAT,CAA0B;AACvCC,EAAAA,SAAS,GAAG,IAD2B;AAEvCC,EAAAA,IAAI,GAAG,IAFgC;AAGvCC,EAAAA,gBAAgB,GAAGhB,mBAHoB;AAIvCiB,EAAAA,YAAY,GAAG,KAJwB;AAKvCC,EAAAA,WAAW,GAAG,KALyB;AAMvCC,EAAAA,kBAAkB,GAAG,IANkB;AAOvCC,EAAAA,KAAK,GAAG,IAP+B;AAQvCjB,EAAAA,IAAI,GAAG,IARgC;AASvCkB,EAAAA,gBAAgB,GAAGpB,mBAToB;AAUvCqB,EAAAA,QAAQ,GAAGvB,eAAe;AAVa,CAA1B,EAWyB;AACtC,QAAMwB,IAAI,GAAG,yBAAb;AAEA,QAAMC,sBAAsB,GAAG,wBAC5BC,UAAD,IAA6C;AAC3C,QAAI,OAAON,kBAAP,KAA8B,UAAlC,EAA8C;AAC5CA,MAAAA,kBAAkB,CAACM,UAAD,CAAlB;AACD;AACF,GAL4B,EAM7B,CAACN,kBAAD,CAN6B,CAA/B;;AASA,QAAMO,iBAAiB,GAAIC,GAAD,IAAiB,wBACxCC,GAAD,IAA8C;AAC5CJ,IAAAA,sBAAsB,CAAC;AAAE,OAACG,GAAD,GAAOC,GAAG,CAACC,MAAJ,CAAWC;AAApB,KAAD,CAAtB;AACD,GAHwC,EAIzC,CAACX,kBAAD,EAAqBQ,GAArB,CAJyC,CAA3C;;AAOA,QAAMI,gBAAgB,GAAGL,iBAAiB,CAAC,MAAD,CAA1C;AAEA,QAAMM,gBAAgB,GAAGN,iBAAiB,CAAC,MAAD,CAA1C;AAEA,QAAMO,sBAAsB,GAAG,wBAC5BL,GAAD,IAA8C;AAC5C,UAAMM,OAAO,GAAG,qBAAO,oBAAMN,GAAG,CAACC,MAAJ,CAAWC,KAAjB,EAAwBT,gBAAxB,EAA0CV,aAA1C,CAAP,EAAiEV,mBAAjE,CAAhB;AACAuB,IAAAA,sBAAsB,CAAC;AAAEU,MAAAA;AAAF,KAAD,CAAtB;AACD,GAJ4B,EAK7B,CAACf,kBAAD,CAL6B,CAA/B;AAQA,QAAMgB,sBAAsB,GAAG,wBAC5BP,GAAD,IAA8C;AAC5C,UAAMQ,OAAO,GAAG,qBAAO,oBAAMR,GAAG,CAACC,MAAJ,CAAWC,KAAjB,EAAwBd,gBAAxB,EAA0CL,aAA1C,CAAP,EAAiEX,mBAAjE,CAAhB;AACAwB,IAAAA,sBAAsB,CAAC;AAAEY,MAAAA;AAAF,KAAD,CAAtB;AACD,GAJ4B,EAK7B,CAACjB,kBAAD,CAL6B,CAA/B;;AAQA,QAAMkB,eAAe,GAAIC,MAAD,IAAgC,wBACtD,MAAM;AACJ,QAAIA,MAAM,CAACjC,IAAP,KAAgB,KAApB,EAA2B;AACzBmB,MAAAA,sBAAsB,CAAC;AACrBT,QAAAA,IAAI,EAAElB,cAAc,CAACyB,QAAD,CADC;AAErBL,QAAAA,YAAY,EAAE,KAFO;AAGrBd,QAAAA,IAAI,EAAEL,cAAc,CAACwB,QAAD;AAHC,OAAD,CAAtB;AAKD,KAND,MAMO,IAAI,CAACgB,MAAM,CAACC,UAAZ,EAAwB;AAC7Bf,MAAAA,sBAAsB,CAAC;AACrBP,QAAAA,YAAY,EAAEqB,MAAM,CAACjC;AADA,OAAD,CAAtB;AAGD;AACF,GAbqD,EActD,CAACc,kBAAD,EAAqBmB,MAAM,CAACjC,IAA5B,EAAkCiC,MAAM,CAACC,UAAzC,EAAqDjB,QAArD,CAdsD,CAAxD;;AAiBA,QAAMkB,gBAAsC,GAAG,CAC7C;AACE;AACAnC,IAAAA,IAAI,EAAE,KAFR;AAGEoC,IAAAA,IAAI,eACF,6BAAC,2BAAD;AACE,MAAA,cAAc,EAAE9C,eAAe,CAAC,4BAAD,CADjC;AAEE,MAAA,WAAW,EAAC,oFAFd;AAGE,MAAA,EAAE,EAAC;AAHL;AAJJ,GAD6C,EAY7C;AACEU,IAAAA,IAAI,EAAE,QADR;AAEEoC,IAAAA,IAAI,eACF,6BAAC,2BAAD;AACE,MAAA,cAAc,EAAE9C,eAAe,CAAC,+BAAD,CADjC;AAEE,MAAA,WAAW,EAAC,wEAFd;AAGE,MAAA,EAAE,EAAC;AAHL;AAHJ,GAZ6C,EAsB7C;AACEU,IAAAA,IAAI,EAAE,QADR;AAEEoC,IAAAA,IAAI,eACF,6BAAC,2BAAD;AACE,MAAA,cAAc,EAAE9C,eAAe,CAAC,+BAAD,CADjC;AAEE,MAAA,WAAW,EAAC,0EAFd;AAGE,MAAA,EAAE,EAAC;AAHL;AAHJ,GAtB6C,CAA/C;AAiCA6C,EAAAA,gBAAgB,CAACE,OAAjB,CAAyBC,GAAG,IAAI;AAC9BA,IAAAA,GAAG,CAACJ,UAAJ,GAAiBtB,YAAY,KAAK0B,GAAG,CAACtC,IAAtC;AACD,GAFD;AAIA,QAAMuC,QAAQ,GAAG1B,WAAW,IAAI,CAACR,sBAAjC;AAEA,sBACE,6BAAC,CAAD,CAAG,gBAAH;AACE,kBAAYa,IAAI,CAACsB,aAAL,CAAmB;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAAnB,CADd;AAEE,IAAA,SAAS,EAAEhC,SAFb;AAGE,IAAA,IAAI,EAAC,OAHP;AAIE,IAAA,KAAK,EAAEM;AAJT,kBAME,6BAAC,CAAD,CAAG,gBAAH,CAAoB,YAApB,QACGoB,gBAAgB,CAACO,GAAjB,CAAqBJ,GAAG,iBACvB,6BAAC,mBAAD;AACE,oBAAcA,GAAG,CAACJ,UADpB;AAEE,IAAA,GAAG,EAAEI,GAAG,CAACtC,IAFX;AAGE,IAAA,OAAO,EAAEgC,eAAe,CAACM,GAAD,CAH1B;AAIE,IAAA,QAAQ,EAAEA,GAAG,CAACJ;AAJhB,KAMGI,GAAG,CAACF,IANP,CADD,CADH,CANF,EAmBGxB,YAAY,KAAK,KAAjB,IAA0B,CAAC2B,QAA3B,iBACC,6BAAC,CAAD,CAAG,gBAAH,CAAoB,WAApB,qBAEE,uDACE;AACE,kBAAYrB,IAAI,CAACsB,aAAL,CAAmB;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAAnB,CADd;AAEE,IAAA,QAAQ,EAAEd,gBAFZ;AAGE,IAAA,QAAQ,MAHV;AAIE,IAAA,IAAI,EAAC,MAJP;AAKE,IAAA,KAAK,EAAE7B;AALT,IADF,CAFF,eAWE,uDACE;AACE,kBAAYoB,IAAI,CAACsB,aAAL,CAAmB;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAAnB,CADd;AAEE,IAAA,QAAQ,EAAEf,gBAFZ;AAGE,IAAA,QAAQ,MAHV;AAIE,IAAA,IAAI,EAAC,MAJP;AAKE,IAAA,KAAK,EAAEhB;AALT,IADF,CAXF,CApBJ,EA4CGE,YAAY,KAAK,KAAjB,IAA0B2B,QAA1B,iBACC,6BAAC,CAAD,CAAG,gBAAH,CAAoB,WAApB,qBACE,uDACE;AACE,IAAA,YAAY,EAAE,qBAAO,oBAAMzC,IAAN,EAAYF,mBAAZ,EAAiCU,aAAjC,CAAP,EAAwDU,gBAAxD,CADhB;AAEE,IAAA,QAAQ,EAAEY,sBAFZ;AAGE,IAAA,QAAQ,MAHV;AAIE,IAAA,IAAI,EAAC;AAJP,IADF,CADF,eASE,uDACE;AACE,IAAA,YAAY,EAAE,qBAAO,oBAAMlB,IAAN,EAAYf,mBAAZ,EAAiCW,aAAjC,CAAP,EAAwDK,gBAAxD,CADhB;AAEE,IAAA,QAAQ,EAAEmB,sBAFZ;AAGE,IAAA,QAAQ,MAHV;AAIE,IAAA,IAAI,EAAC;AAJP,IADF,CATF,CA7CJ,CADF;AAmED","sourcesContent":["import CSS from \"csstype\";\nimport { format, parse } from \"date-fns\";\nimport flatten from \"flat\";\nimport coreUtils from \"@opentripplanner/core-utils\";\nimport React, { ChangeEvent, ReactElement, ReactNode, useCallback } from \"react\";\nimport { FormattedMessage, useIntl } from \"react-intl\";\n\nimport ModeButton from \"../ModeButton\";\nimport * as S from \"../styled\";\n\n// eslint-disable-next-line prettier/prettier\nimport type { QueryParamChangeEvent } from \"../types\";\n\n// Load the default messages.\nimport defaultEnglishMessages from \"../../i18n/en-US.yml\";\n\n// HACK: We should flatten the messages loaded above because\n// the YAML loaders behave differently between webpack and our version of jest:\n// - the yaml loader for webpack returns a nested object,\n// - the yaml loader for jest returns messages with flattened ids.\nconst defaultMessages: Record<string, string> = flatten(defaultEnglishMessages);\n\nconst {\n  getCurrentDate,\n  getCurrentTime,\n  getUserTimezone,\n  OTP_API_DATE_FORMAT,\n  OTP_API_TIME_FORMAT\n} = coreUtils.time;\n\ntype DepartArriveValue = \"NOW\" | \"DEPART\" | \"ARRIVE\";\n\ninterface DateTimeSelectorProps {\n  /**\n   * The CSS class name(s) to apply to this element.\n   */\n  className?: string;\n  /**\n   * The initial departure/arrival date string, in a format that an HTML <input type=\"date\"> control can render.\n   */\n  date?: string;\n  /**\n   * The date format string for legacy mode (on legacy browsers, or if `forceLegacy` is true).\n   */\n  dateFormatLegacy?: string;\n  /**\n   * The initial setting determining whether a trip should start or end at a given time.\n   */\n  departArrive?: DepartArriveValue;\n  /**\n   * If true, forces legacy mode and uses `<input type=\"text\">`\n   * instead of the native date/time pickers found on modern browsers.\n   */\n  forceLegacy?: boolean;\n  /**\n   * Triggered when a query parameter is changed.\n   * @param params A { param1: value1, param2, value2, ... } object that contains the new values for the parameter(s) that has (have) changed.\n   */\n  onQueryParamChange: (e: QueryParamChangeEvent) => void; // FIXME: add types, see interface TransitFareData.\n  /**\n   * Standard React inline style prop.\n   */\n  style?: CSS.Properties;\n  /**\n   * The initial departure/arrival time string, in a format that an HTML <input type=\"time\"> control can render.\n   */\n  time?: string;\n  /**\n   * The time format string for legacy mode (on legacy browsers, or if `forceLegacy` is true).\n   */\n  timeFormatLegacy?: string;\n  /**\n   * An IANA timezone (e.g. \"America/Los_Angeles\") used to convert the \"Leave now\" time\n   * to the transit agency local time.\n   */\n  timeZone?: string;\n}\n\ninterface DepartArriveOption {\n  isSelected?: boolean;\n  text: ReactNode;\n  type: DepartArriveValue;\n}\n\n/**\n * Determines whether the browser supports a particular <input type=<type> /> control,\n * so we can take advantage of native controls\n * (especially date/time selection) on modern (mobile) browsers.\n * @param {*} type One of the HTML5 input types.\n */\nfunction isInputTypeSupported(type: string): boolean {\n  // SSR: use of 'document' variable is only valid in a browser (not server-side)\n  if (typeof document === \"undefined\") return false;\n\n  const input = document.createElement(\"input\");\n  input.setAttribute(\"type\", type);\n  return input.type === type;\n}\n\nconst supportsDateTimeInputs = isInputTypeSupported(\"date\") && isInputTypeSupported(\"time\");\n\n/**\n * Reference date for parsing.\n */\nconst referenceDate = new Date();\n\n/**\n * The `DateTimeSelector` component lets the OTP user chose a departure or arrival date/time.\n * (The departure can be right now.)\n *\n * There are two rendering modes, a \"normal\" mode and a \"legacy\" mode.\n * - \"Normal\" mode: We try to use `<input type=\"time|date\">` for date and time input.\n *   On current HTML5 browsers (desktop or mobile), these controls\n *   render the date/time according to OS settings and natively offer a user interface\n *   for choosing the date/time.\n *   Thus, when `<input type=\"time|date\">` is supported, there is no need to specify a date/time format.\n *   If not, we fall back to \"legacy\" mode.\n * - \"Legacy\" mode: On Safari for MacOS, and on legacy browsers that don't support `<input type=\"time|date\">`,\n *   `<input type=\"time|date\">` renders as the default `<input type=\"text\">`, and in these conditions,\n *   we have to fall back to formatting the date/time ourselves, using `dateFormatLegacy` and `timeFormatLegacy` props.\n * - Implementers don't know in advance whether the browser supports `<input type=\"time|date\">`.\n *   That determination is performed by method `isInputTypeSupported(type)` above when the constructor is executed.\n *   Therefore, they should provide `dateFormatLegacy` and `timeFormatLegacy` props as a backup.\n *   If these props are not provided, the OTP API date format is used.\n * - For testing purposes, implementers can \"force\" the \"legacy\" mode by setting the `forceLegacy` prop to true.\n */\nexport default function DateTimeSelector({\n  className = null,\n  date = null,\n  dateFormatLegacy = OTP_API_DATE_FORMAT,\n  departArrive = \"NOW\",\n  forceLegacy = false,\n  onQueryParamChange = null,\n  style = null,\n  time = null,\n  timeFormatLegacy = OTP_API_TIME_FORMAT,\n  timeZone = getUserTimezone()\n}: DateTimeSelectorProps): ReactElement {\n  const intl = useIntl()\n\n  const handleQueryParamChange = useCallback(\n    (queryParam: QueryParamChangeEvent): void => {\n      if (typeof onQueryParamChange === \"function\") {\n        onQueryParamChange(queryParam);\n      }\n    },\n    [onQueryParamChange]\n  );\n\n  const handleInputChange = (key: string) => useCallback(\n    (evt: ChangeEvent<HTMLInputElement>): void => {\n      handleQueryParamChange({ [key]: evt.target.value });\n    },\n    [onQueryParamChange, key]\n  );\n\n  const handleDateChange = handleInputChange(\"date\");\n\n  const handleTimeChange = handleInputChange(\"time\");\n\n  const handleTimeChangeLegacy = useCallback(\n    (evt: ChangeEvent<HTMLInputElement>): void => {\n      const newTime = format(parse(evt.target.value, timeFormatLegacy, referenceDate), OTP_API_TIME_FORMAT);\n      handleQueryParamChange({ newTime });\n    },\n    [onQueryParamChange]\n  );\n\n  const handleDateChangeLegacy = useCallback(\n    (evt: ChangeEvent<HTMLInputElement>): void => {\n      const newDate = format(parse(evt.target.value, dateFormatLegacy, referenceDate), OTP_API_DATE_FORMAT);\n      handleQueryParamChange({ newDate });\n    },\n    [onQueryParamChange]\n  );\n\n  const setDepartArrive = (option: DepartArriveOption) => useCallback(\n    () => {\n      if (option.type === \"NOW\") {\n        handleQueryParamChange({\n          date: getCurrentDate(timeZone),\n          departArrive: \"NOW\",\n          time: getCurrentTime(timeZone)\n        });\n      } else if (!option.isSelected) {\n        handleQueryParamChange({\n          departArrive: option.type\n        });\n      }\n    },\n    [onQueryParamChange, option.type, option.isSelected, timeZone]\n  );\n\n  const departureOptions: DepartArriveOption[] = [\n    {\n      // Default option.\n      type: \"NOW\",\n      text: (\n        <FormattedMessage\n          defaultMessage={defaultMessages[\"otpUi.DateTimeSelector.now\"]}\n          description=\"Text indicating that the traveler wants to depart as soon as possible (i.e. 'now')\"\n          id=\"otpUi.DateTimeSelector.now\"\n        />\n      )\n    },\n    {\n      type: \"DEPART\",\n      text: (\n        <FormattedMessage\n          defaultMessage={defaultMessages[\"otpUi.DateTimeSelector.depart\"]}\n          description=\"Text indicating that the traveler wants to depart at a given date/time\"\n          id=\"otpUi.DateTimeSelector.depart\"\n        />\n      )\n    },\n    {\n      type: \"ARRIVE\",\n      text: (\n        <FormattedMessage\n          defaultMessage={defaultMessages[\"otpUi.DateTimeSelector.arrive\"]}\n          description=\"Text indicating that the traveler wants to arrive by a certain date/time\"\n          id=\"otpUi.DateTimeSelector.arrive\"\n        />\n      )\n    }\n  ];\n  departureOptions.forEach(opt => {\n    opt.isSelected = departArrive === opt.type;\n  });\n\n  const isLegacy = forceLegacy || !supportsDateTimeInputs;\n\n  return (\n    <S.DateTimeSelector\n      aria-label={intl.formatMessage({ id: \"otpUi.DateTimeSelector.dateTimeSelector\" })}\n      className={className}\n      role=\"group\"\n      style={style}\n    >\n      <S.DateTimeSelector.DepartureRow>\n        {departureOptions.map(opt => (\n          <ModeButton\n            aria-pressed={opt.isSelected}\n            key={opt.type}\n            onClick={setDepartArrive(opt)}\n            selected={opt.isSelected}\n          >\n            {opt.text}\n          </ModeButton>\n        ))}\n      </S.DateTimeSelector.DepartureRow>\n\n      {departArrive !== \"NOW\" && !isLegacy && (\n        <S.DateTimeSelector.DateTimeRow>\n          {/* The <div> elements below are used for layout, see S.DateTimeSelector. */}\n          <div>\n            <input\n              aria-label={intl.formatMessage({ id: \"otpUi.DateTimeSelector.time\" })}\n              onChange={handleTimeChange}\n              required\n              type=\"time\"\n              value={time}\n            />\n          </div>\n          <div>\n            <input\n              aria-label={intl.formatMessage({ id: \"otpUi.DateTimeSelector.date\" })}\n              onChange={handleDateChange}\n              required\n              type=\"date\"\n              value={date}\n            />\n          </div>\n        </S.DateTimeSelector.DateTimeRow>\n      )}\n\n      {/* Backup controls (for older browsers) */}\n      {departArrive !== \"NOW\" && isLegacy && (\n        <S.DateTimeSelector.DateTimeRow>\n          <div>\n            <input\n              defaultValue={format(parse(time, OTP_API_TIME_FORMAT, referenceDate), timeFormatLegacy)}\n              onChange={handleTimeChangeLegacy}\n              required\n              type=\"text\"\n            />\n          </div>\n          <div>\n            <input\n              defaultValue={format(parse(date, OTP_API_DATE_FORMAT, referenceDate), dateFormatLegacy)}\n              onChange={handleDateChangeLegacy}\n              required\n              type=\"text\"\n            />\n          </div>\n        </S.DateTimeSelector.DateTimeRow>\n      )}\n    </S.DateTimeSelector>\n  );\n}\n"],"file":"index.js"}