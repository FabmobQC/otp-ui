{"version":3,"sources":["../../src/SliderSelector/index.tsx"],"names":["SliderSelector","className","max","label","labelLow","labelHigh","min","name","step","onChange","value","style","handleChange","evt","target","id","paddingLeft"],"mappings":";;;;;;;AACA;;AAEA;;;;;;AAqDA;AACA;AACA;AACe,SAASA,cAAT,CAAwB;AACrCC,EAAAA,SAAS,GAAG,IADyB;AAErCC,EAAAA,GAAG,GAAG,EAF+B;AAGrCC,EAAAA,KAAK,GAAG,IAH6B;AAIrCC,EAAAA,QAJqC;AAKrCC,EAAAA,SALqC;AAMrCC,EAAAA,GAAG,GAAG,CAN+B;AAOrCC,EAAAA,IAAI,GAAG,IAP8B;AAQrCC,EAAAA,IAAI,GAAG,CAR8B;AASrCC,EAAAA,QAAQ,GAAG,IAT0B;AAUrCC,EAAAA,KAAK,GAAG,CAV6B;AAWrCC,EAAAA;AAXqC,CAAxB,EAYuB;AACpC,QAAMC,YAAY,GAAG,wBAClBC,GAAD,IAAwC;AACtC,QAAI,OAAOJ,QAAP,KAAoB,UAAxB,EAAoC;AAClCA,MAAAA,QAAQ,CAAC;AACP,SAACF,IAAD,GAAQM,GAAG,CAACC,MAAJ,CAAWJ;AADZ,OAAD,CAAR;AAGD;AACF,GAPkB,EAQnB,CAACD,QAAD,CARmB,CAArB;AAWA,QAAMM,EAAE,GAAI,kBAAiBR,IAAK,EAAlC;AAEA,sBACE,6BAAC,CAAD,CAAG,cAAH;AACE,kBAAYJ,KADd;AAEE,IAAA,SAAS,EAAEF,SAFb;AAGE,IAAA,IAAI,EAAC,OAHP;AAIE,IAAA,KAAK,EAAEU;AAJT,KAQG,CAACP,QAAD,IAAa,CAACC,SAAd,iBACC,uDACE,6BAAC,CAAD,CAAG,YAAH;AAAgB,mBAAY,MAA5B;AAAmC,IAAA,EAAE,EAAC;AAAtC,KAA8CF,KAA9C,CADF,CATJ,eAcE,uDACE,6BAAC,CAAD,CAAG,YAAH;AAAgB,mBAAY,MAA5B;AAAmC,IAAA,EAAE,EAAC;AAAtC,KACGC,QADH,CADF,eAIE;AACE,kBAAa,GAAED,KAAM,KAAIC,QAAS,KAAIE,GAAI,OAAMD,SAAU,KAAIH,GAAI,GADpE;AAEE,IAAA,EAAE,EAAEa,EAFN;AAGE,IAAA,GAAG,EAAEb,GAHP;AAIE,IAAA,GAAG,EAAEI,GAJP;AAKE,IAAA,QAAQ,EAAEM,YALZ;AAME,IAAA,IAAI,EAAEJ,IANR;AAOE,IAAA,IAAI,EAAC,OAPP;AAQE,IAAA,KAAK,EAAEE;AART,IAJF,eAcE,6BAAC,CAAD,CAAG,YAAH;AAAgB,mBAAY,MAA5B;AAAmC,IAAA,EAAE,EAAC,MAAtC;AAA6C,IAAA,KAAK,EAAE;AAAEM,MAAAA,WAAW,EAAC;AAAd;AAApD,KACGX,SADH,CAdF,CAdF,CADF;AAmCD","sourcesContent":["import CSS from \"csstype\";\nimport React, { ChangeEvent, ReactElement, useCallback } from \"react\";\n\nimport * as S from \"../styled\";\n\n// eslint-disable-next-line prettier/prettier\nimport type { QueryParamChangeEvent } from \"../types\";\n\ninterface SliderSelectorProps {\n  /**\n   * The CSS class name(s) to apply to this element.\n   */\n  className?: string;\n  /**\n   * The contents of the contained <label> control. \n   * Also used as the aria label when high and low labels are provided.\n   */\n  label?: string;\n  /**\n   * The label for the right end of the slider.\n   */\n  labelHigh?: string;\n  /**\n   * The label for the left end of the slider\n   */\n  labelLow?: string;\n  /**\n   * The initial max value for the contained <input> control.\n   */\n  max: number;\n  /**\n   * The initial min value for the contained <input> control.\n   */\n  min: number;\n  /**\n   * A unique name for the setting.\n   */\n  name?: string;\n  /**\n   * Triggered when the value of the <input> control changes.\n   */\n  onChange?: (evt: QueryParamChangeEvent) => void;\n  /**\n   * How fine each step should be. Identical to html range step parameter.\n   */\n  step?: number\n  /**\n   * Standard React inline style prop.\n   */\n  style?: CSS.Properties;\n  /**\n   * Value to set slider to.\n   */\n  value?: number\n}\n\n/**\n * A wrapper that includes an <input type=\"range\" /> control and a <label> for the input control.\n */\nexport default function SliderSelector({\n  className = null,\n  max = 20,\n  label = null,\n  labelLow,\n  labelHigh,\n  min = 0,\n  name = null,\n  step = 1,\n  onChange = null,\n  value = 1,\n  style,\n}: SliderSelectorProps): ReactElement {\n  const handleChange = useCallback(\n    (evt: ChangeEvent<HTMLInputElement>) => {\n      if (typeof onChange === \"function\") {\n        onChange({\n          [name]: evt.target.value\n        });\n      }\n    },\n    [onChange]\n  );\n\n  const id = `id-query-param-${name}`;\n\n  return (\n    <S.SliderSelector\n      aria-label={label}\n      className={className}\n      role=\"group\"\n      style={style}\n    >\n\n      {/* The <div> elements below are here for the grid layout, see S.DropdownSelector. */}\n      {!labelLow && !labelHigh && (\n        <div>\n          <S.SettingLabel aria-hidden=\"true\" as=\"span\">{label}</S.SettingLabel>\n        </div>\n      )}\n\n      <div>\n        <S.SettingLabel aria-hidden=\"true\" as=\"span\">\n          {labelLow}\n        </S.SettingLabel>\n        <input\n          aria-label={`${label}: ${labelLow} (${min}) - ${labelHigh} (${max})`}\n          id={id}\n          max={max}\n          min={min}\n          onChange={handleChange}\n          step={step}\n          type=\"range\"\n          value={value}\n        />\n        <S.SettingLabel aria-hidden=\"true\" as=\"span\" style={{ paddingLeft:0 }}>\n          {labelHigh}\n        </S.SettingLabel>\n      </div>\n    </S.SliderSelector>\n  );\n}\n"],"file":"index.js"}