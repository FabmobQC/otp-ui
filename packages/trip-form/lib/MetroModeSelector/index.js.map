{"version":3,"sources":["../../src/MetroModeSelector/index.tsx"],"names":["invisibleCss","css","InvisibleA11yLabel","styled","span","ModeBar","fieldset","defaultAccentColor","defaultActiveHoverColor","boxShadowCss","ModeButtonWrapper","props","accentColor","activeHoverColor","fillModeIcons","HoverPanel","div","HoverInnerContainer","Arrow","ModeButton","id","itemWithKeyboard","modeButton","onPopupClose","onPopupKeyboardExpand","onSettingsUpdate","onToggle","intl","open","setOpen","hoverEnabled","setHoverEnabled","arrowRef","onOpenChange","value","context","floating","middlewareData","arrow","x","arrowX","y","arrowY","reference","strategy","middleware","element","getFloatingProps","getReferenceProps","enabled","handleClose","blockPointerEvents","restMs","buffer","renderDropdown","modeSettings","length","interactionProps","ariaControls","ariaExpanded","ariaHasPopup","labelInteractionProps","checkboxId","handleButtonClick","e","onClick","label","key","undefined","defaultMessages","mode","setTimeout","left","position","top","ModeSelector","modeButtons","onToggleModeButton","setItemWithKeyboard","map","button"],"mappings":"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","sourcesContent":["import {\n  arrow,\n  FloatingFocusManager,\n  offset,\n  safePolygon,\n  shift,\n  useClick,\n  useDismiss,\n  useFloating,\n  useHover,\n  useInteractions,\n  useRole\n} from \"@floating-ui/react\";\nimport { ModeButtonDefinition } from \"@opentripplanner/types\";\nimport { CaretDown } from \"@styled-icons/fa-solid/CaretDown\";\nimport { CaretUp } from \"@styled-icons/fa-solid/CaretUp\";\nimport React, { ReactElement, useCallback, useRef, useState } from \"react\";\nimport { FormattedMessage, useIntl } from \"react-intl\";\nimport styled, { css } from \"styled-components\";\n\nimport SubSettingsPane, { defaultMessages } from \"./SubSettingsPane\";\nimport generateModeButtonLabel from \"./i18n\";\n\nconst invisibleCss = css`\n  clip: rect(0, 0, 0, 0);\n  height: 0;\n  overflow: hidden;\n  position: absolute;\n  width: 0;\n`;\n\nconst InvisibleA11yLabel = styled.span`\n  display: inline-block;\n  ${invisibleCss}\n`;\n\nconst ModeBar = styled.fieldset`\n  border: none;\n  display: inline-flex;\n  gap: 0 3px;\n  margin: 0 4px 0 0;\n  padding: 0;\n\n  /* <legend> is not shown visually. */\n  & > legend {\n    ${invisibleCss}\n  }\n`;\n\nconst defaultAccentColor = \"#666\";\nconst defaultActiveHoverColor = \"#333\";\n\nconst boxShadowCss = css`\n  box-shadow: rgba(0, 0, 0, 0.1) 0 0 20px;\n`;\n\nconst ModeButtonWrapper = styled.span<{\n  fillModeIcons?: boolean;\n  accentColor?: string;\n  activeHoverColor?: string;\n}>`\n  position: relative;\n\n  & > label {\n    background: #fff;\n    border-radius: 5px;\n    border: 2px solid ${props => props.accentColor || defaultAccentColor};\n    cursor: pointer;\n    display: inline-flex;\n    padding: 0.75rem 0.75rem;\n    transition: all 250ms cubic-bezier(0.27, 0.01, 0.38, 1.06);\n    user-select: none;\n    justify-content: center;\n    aspect-ratio: 1/1; /* stylelint-disable-line property-no-unknown */\n  }\n\n  &:not(:last-of-type) > label {\n    border-bottom-right-radius: 0;\n    border-top-right-radius: 0;\n  }\n  &:not(:first-of-type) > label {\n    border-bottom-left-radius: 0;\n    border-top-left-radius: 0;\n  }\n  & > label:hover {\n    background: #eee;\n    border-color: ${props => props.activeHoverColor || defaultActiveHoverColor};\n    ${boxShadowCss}\n  }\n\n  & > input {\n    ${invisibleCss}\n    /* Firefox will still render (tiny) controls, even if their bounds are empty,\n       so move them out of sight. */\n    left: -20px;\n    position: absolute;\n  }\n\n  & > button {\n    ${invisibleCss}\n    background: none;\n    border: none;\n    /* Lateral position is offset so that the button outline is visible when focused. */\n    bottom: 0;\n    left: 4px;\n    position: absolute;\n  }\n\n  & > button:focus {\n    clip: initial;\n    height: initial;\n    width: calc(100% - 8px);\n  }\n\n  & > input:checked + label {\n    background: ${props => props.accentColor || defaultAccentColor};\n  }\n\n  & > input:checked + label,\n  & > input:checked ~ button {\n    color: white;\n    fill: ${props =>\n      props.fillModeIcons === false ? \"inherit\" : \"currentcolor\"};\n  }\n\n  & > input:focus + label {\n    outline: 5px auto blue;\n    /* This next line enhances the visuals in Chromium (webkit) browsers */\n    outline: 5px auto -webkit-focus-ring-color;\n    /* Render the focus outline inside and distinct from the border for both Chrome and Firefox. */\n    outline-offset: -4px;\n  }\n\n  & > input:checked + label:hover {\n    background: ${props => props.activeHoverColor || defaultActiveHoverColor};\n  }\n\n  & > label > svg {\n    color: ${props => props.accentColor || defaultAccentColor};\n    display: inline-block;\n    height: 32px;\n    margin: auto;\n    vertical-align: middle;\n    width: 32px;\n    fill: ${props =>\n      props.fillModeIcons === false ? \"inherit\" : \"currentcolor\"};\n  }\n\n  & > input:checked + label > svg {\n    color: #eee;\n  }\n`;\n\nconst HoverPanel = styled.div`\n  min-width: 300px;\n  padding: 0 10px;\n  width: 75%;\n  z-index: 100;\n`;\n\nconst HoverInnerContainer = styled.div`\n  background: #fff;\n  border-radius: 4px;\n  color: #2e2e2e;\n  font-size: 90%;\n  font-weight: bold;\n  padding: 0px 20px 10px;\n  pointer-events: none;\n  ${boxShadowCss}\n`;\n\nconst Arrow = styled.div`\n  background: #fff;\n  height: 10px;\n  margin-top: -5px;\n  position: absolute;\n  transform: rotate(-45deg);\n  width: 10px;\n  ${boxShadowCss}\n`;\n\ninterface ModeButtonProps {\n  // Optional properties for styling\n  accentColor?: string;\n  activeHoverColor?: string;\n\n  fillModeIcons?: boolean;\n  id: string;\n  itemWithKeyboard?: string;\n  modeButton: ModeButtonDefinition;\n  onPopupClose: () => void;\n  onPopupKeyboardExpand: (id: string) => void;\n  onSettingsUpdate: (QueryParamChangeEvent) => void;\n  onToggle: () => void;\n}\n\nfunction ModeButton({\n  accentColor,\n  activeHoverColor,\n  fillModeIcons,\n  id,\n  itemWithKeyboard,\n  modeButton,\n  onPopupClose,\n  onPopupKeyboardExpand,\n  onSettingsUpdate,\n  onToggle\n}: ModeButtonProps) {\n  const intl = useIntl();\n\n  const [open, setOpen] = useState(false);\n  const [hoverEnabled, setHoverEnabled] = useState(true);\n  const arrowRef = useRef(null);\n  const onOpenChange = useCallback(\n    value => {\n      setOpen(value);\n      if (!value && typeof onPopupClose === \"function\") {\n        onPopupClose();\n      }\n    },\n    [onPopupClose, setOpen]\n  );\n  const {\n    context,\n    floating,\n    middlewareData: { arrow: { x: arrowX, y: arrowY } = {} },\n    reference,\n    strategy,\n    x,\n    y\n  } = useFloating({\n    middleware: [offset(8), shift(), arrow({ element: arrowRef })],\n    onOpenChange,\n    open\n  });\n\n  const { getFloatingProps, getReferenceProps } = useInteractions([\n    useHover(context, {\n      // Enable hover only if no popup has been triggered via keyboard.\n      // (This is to avoid focus being stolen by hovering out of another button.)\n      enabled: itemWithKeyboard === null && hoverEnabled,\n      handleClose: safePolygon({\n        blockPointerEvents: false,\n        restMs: 500,\n        buffer: 0\n      })\n    }),\n    useClick(context),\n    useRole(context),\n    useDismiss(context)\n  ]);\n\n  const renderDropdown =\n    open && modeButton.enabled && modeButton.modeSettings?.length > 0;\n  const interactionProps = getReferenceProps();\n\n  // ARIA roles are added by the `useRole` hook.\n  // Remove the aria-controls, aria-expanded, and aria-haspopup props from the label, they will\n  // instead be passed to the button for keyboard/screen reader users to trigger the popup.\n  const {\n    \"aria-controls\": ariaControls,\n    \"aria-expanded\": ariaExpanded,\n    \"aria-haspopup\": ariaHasPopup,\n    ...labelInteractionProps\n  } = interactionProps;\n\n  const checkboxId = `metro-mode-selector-mode-${id}`;\n\n  const handleButtonClick = useCallback(\n    e => {\n      if (typeof onPopupKeyboardExpand === \"function\") {\n        onPopupKeyboardExpand(id);\n      }\n      if (typeof interactionProps.onClick === \"function\") {\n        interactionProps.onClick(e);\n      }\n    },\n    [id, interactionProps, onPopupKeyboardExpand]\n  );\n\n  const label = generateModeButtonLabel(modeButton.key, intl, modeButton.label);\n\n  return (\n    <ModeButtonWrapper\n      accentColor={accentColor}\n      activeHoverColor={activeHoverColor}\n      fillModeIcons={fillModeIcons}\n    >\n      {/* Basic checkbox that states whether a mode is selected. */}\n      <input\n        aria-label={label}\n        checked={modeButton.enabled ?? undefined}\n        id={checkboxId}\n        onChange={onToggle}\n        type=\"checkbox\"\n      />\n      {/* Label for the above checkbox, placed right after, so that CSS applies based on checkbox state. */}\n      {/* eslint-disable-next-line jsx-a11y/label-has-associated-control */}\n      <label\n        // This library relies on prop spreading\n        // eslint-disable-next-line react/jsx-props-no-spreading\n        {...labelInteractionProps}\n        htmlFor={checkboxId}\n        // This will trigger mouse effects such as showing popup on hover of on check.\n        ref={reference}\n        title={label}\n      >\n        <modeButton.Icon aria-hidden size={32} />\n        <InvisibleA11yLabel>{label}</InvisibleA11yLabel>\n      </label>\n      <button\n        // eslint-disable-next-line react/jsx-props-no-spreading\n        {...interactionProps}\n        // Disable button if mode is not checked (but keep in DOM for screen reader awareness)\n        disabled={!modeButton.enabled}\n        // Separate handler to communicate to the parent element\n        // which item had a popup triggered using the keyboard.\n        onClick={handleButtonClick}\n        // Required by linter settings\n        type=\"button\"\n      >\n        <span role=\"none\">\n          {open ? <CaretUp size={14} /> : <CaretDown size={14} />}\n        </span>\n        <InvisibleA11yLabel>\n          <FormattedMessage\n            defaultMessage={defaultMessages[\"otpUi.ModeSelector.settingsLabel\"]}\n            description=\"Label for the button to open settings for a travel mode.\"\n            id=\"otpUi.ModeSelector.settingsLabel\"\n            values={{ mode: label }}\n          />\n        </InvisibleA11yLabel>\n      </button>\n      {renderDropdown && (\n        <FloatingFocusManager\n          context={context}\n          // Restore the keyboard focus AND show focus cue on hovering out of the label\n          // only if this component triggered the popup using the keyboard.\n          // (Don't show focus cue if the popup was not triggered via keyboard.)\n          returnFocus={itemWithKeyboard === id}\n        >\n          <HoverPanel\n            // This library relies on prop spreading\n            // eslint-disable-next-line react/jsx-props-no-spreading\n            {...getFloatingProps()}\n            // Matches ID on Header element in SubSettingsPane\n            aria-labelledby={`metro-mode-selector-${modeButton.key}-button-label`}\n            // This is a workaround for a bug in Firefox.\n            // https://github.com/floating-ui/floating-ui/issues/2299\n            // https://bugzilla.mozilla.org/show_bug.cgi?id=1829500\n            onPointerDown={() => {\n              setHoverEnabled(false);\n              setTimeout(() => setHoverEnabled(true), 100);\n            }}\n            ref={floating}\n            style={{\n              left: x ?? 0,\n              position: strategy,\n              top: y ?? 0\n            }}\n          >\n            <Arrow\n              ref={arrowRef}\n              style={{ top: arrowY ?? 0, left: arrowX ?? 0 }}\n            />\n            <HoverInnerContainer>\n              <SubSettingsPane\n                modeButton={modeButton}\n                onSettingUpdate={onSettingsUpdate}\n              />\n            </HoverInnerContainer>\n          </HoverPanel>\n        </FloatingFocusManager>\n      )}\n    </ModeButtonWrapper>\n  );\n}\ninterface Props {\n  /**\n   * Accent color override\n   */\n  accentColor?: string;\n  /**\n   * Hover color override\n   */\n  activeHoverColor?: string;\n  /**\n   * Apply fill color to the mode icons when the button is selected. (default true)\n   */\n  fillModeIcons?: boolean;\n  /**\n   * Text that prompts to select a travel mode.\n   */\n  label?: string;\n  /**\n   * List of mode buttons to be displayed\n   */\n  modeButtons?: ModeButtonDefinition[];\n  /**\n   * Event handler for settings changes\n   * @param QueryParamChangeEvent Event from when the mode settings change\n   */\n  onSettingsUpdate: (QueryParamChangeEvent) => void;\n  /**\n   * Event for when a mode button is toggled\n   * @param key Mode button to be toggled\n   */\n  onToggleModeButton: (key: string, newState: boolean) => void;\n}\n\nexport default function ModeSelector({\n  accentColor,\n  activeHoverColor,\n  fillModeIcons,\n  label,\n  modeButtons = [],\n  onSettingsUpdate,\n  onToggleModeButton\n}: Props): ReactElement {\n  // State that holds the id of the active mode combination popup that was triggered via keyboard.\n  // It is used to enable/disable hover effects to avoid keyboard focus being stolen\n  // and overlapping popups on mouse hover.\n  const [itemWithKeyboard, setItemWithKeyboard] = useState<string>(null);\n  return (\n    <ModeBar className=\"metro-mode-selector\">\n      <legend>{label}</legend>\n      {modeButtons.map(button => (\n        <ModeButton\n          accentColor={accentColor}\n          activeHoverColor={activeHoverColor}\n          fillModeIcons={fillModeIcons}\n          id={button.key}\n          itemWithKeyboard={itemWithKeyboard}\n          key={button.label}\n          modeButton={button}\n          onPopupClose={useCallback(() => {\n            setItemWithKeyboard(null);\n          }, [setItemWithKeyboard])}\n          onPopupKeyboardExpand={setItemWithKeyboard}\n          onSettingsUpdate={onSettingsUpdate}\n          onToggle={useCallback(() => {\n            onToggleModeButton(button.key, !button.enabled);\n          }, [button, onToggleModeButton])}\n        />\n      ))}\n    </ModeBar>\n  );\n}\n"],"file":"index.js"}