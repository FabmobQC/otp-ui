{"version":3,"sources":["../src/index.tsx"],"names":["Styled","BaseMapStyled","MarkerWithPopup","FromToLocationPicker","React","ParkAndRideMarker","ParkAndRideOverlay","props","parkAndRideLocations","setLocation","length","map","location","k","name","startsWith","substring","offset","lat","y","lon","x"],"mappings":"AAAA,SACEA,MAAM,IAAIC,aADZ,EAEEC,eAFF,QAGO,2BAHP;AAIA,OAAOC,oBAAP,MAAiC,0CAAjC,C,CACA;;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,iBAAP,MAA8B,wBAA9B;;AAcA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,KAAD,EAA+B;AACxD,MAAQC,oBAAR,GAA8CD,KAA9C,CAAQC,oBAAR;AAAA,MAA8BC,WAA9B,GAA8CF,KAA9C,CAA8BE,WAA9B;AACA,MAAI,CAACD,oBAAD,IAAyBA,oBAAoB,CAACE,MAArB,KAAgC,CAA7D,EAAgE,OAAO,IAAP;AAEhE,sBACE,0CACGF,oBAAoB,CAACG,GAArB,CAAyB,UAACC,QAAD,EAAWC,CAAX,EAAiB;AACzC;AACA,QAAMC,IAAI,GAAGF,QAAQ,CAACE,IAAT,CAAcC,UAAd,CAAyB,MAAzB,IACTH,QAAQ,CAACE,IAAT,CAAcE,SAAd,CAAwB,CAAxB,CADS,GAETJ,QAAQ,CAACE,IAFb;AAIA,wBACE,oBAAC,eAAD,CACE;AACA;AAFF;AAGE,MAAA,UAAU,EAAE;AAAEG,QAAAA,MAAM,EAAE;AAAV,OAHd;AAIE,MAAA,aAAa,eACX,oBAAC,aAAD,CAAe,eAAf,qBACE,oBAAC,aAAD,CAAe,UAAf,QAA2BH,IAA3B,CADF,eAEE,oBAAC,aAAD,CAAe,QAAf,qBACE,oBAAC,oBAAD;AACE,QAAA,KAAK,MADP;AAEE,QAAA,QAAQ,EAAE;AACRI,UAAAA,GAAG,EAAEN,QAAQ,CAACO,CADN;AAERC,UAAAA,GAAG,EAAER,QAAQ,CAACS,CAFN;AAGRP,UAAAA,IAAI,EAAJA;AAHQ,SAFZ;AAOE,QAAA,WAAW,EAAEL;AAPf,QADF,CAFF,CALJ;AAoBE,MAAA,GAAG,EAAEI,CApBP;AAqBE,MAAA,QAAQ,EAAE,CAACD,QAAQ,CAACO,CAAV,EAAaP,QAAQ,CAACS,CAAtB;AArBZ,oBAuBE,oBAAC,iBAAD,OAvBF,CADF;AA2BD,GAjCA,CADH,CADF;AAsCD,CA1CD;;AA4CA,eAAef,kBAAf","sourcesContent":["import {\n  Styled as BaseMapStyled,\n  MarkerWithPopup\n} from \"@opentripplanner/base-map\";\nimport FromToLocationPicker from \"@opentripplanner/from-to-location-picker\";\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport { Location } from \"@opentripplanner/types\";\nimport React from \"react\";\nimport ParkAndRideMarker from \"./park-and-ride-marker\";\n\ntype Props = {\n  id?: string;\n  keyboard?: boolean;\n  parkAndRideLocations: { name: string; x: number; y: number }[];\n  setLocation: ({\n    // eslint-disable-next-line @typescript-eslint/no-shadow\n    location: Location,\n    locationType: string,\n    reverseGeocode: boolean\n  }) => void;\n};\n\nconst ParkAndRideOverlay = (props: Props): JSX.Element => {\n  const { parkAndRideLocations, setLocation } = props;\n  if (!parkAndRideLocations || parkAndRideLocations.length === 0) return null;\n\n  return (\n    <>\n      {parkAndRideLocations.map((location, k) => {\n        // TODO: extract park-and-ride names from international \"Park-And-Ride\" string constructs.\n        const name = location.name.startsWith(\"P+R \")\n          ? location.name.substring(4)\n          : location.name;\n\n        return (\n          <MarkerWithPopup\n            // TODO: find a better way to handle popupProps\n            // @ts-expect-error lat and lng aren't optional, but are being set by the child\n            popupProps={{ offset: 10 }}\n            popupContents={\n              <BaseMapStyled.MapOverlayPopup>\n                <BaseMapStyled.PopupTitle>{name}</BaseMapStyled.PopupTitle>\n                <BaseMapStyled.PopupRow>\n                  <FromToLocationPicker\n                    label\n                    location={{\n                      lat: location.y,\n                      lon: location.x,\n                      name\n                    }}\n                    setLocation={setLocation}\n                  />\n                </BaseMapStyled.PopupRow>\n              </BaseMapStyled.MapOverlayPopup>\n            }\n            key={k}\n            position={[location.y, location.x]}\n          >\n            <ParkAndRideMarker />\n          </MarkerWithPopup>\n        );\n      })}\n    </>\n  );\n};\n\nexport default ParkAndRideOverlay;\n"],"file":"index.js"}