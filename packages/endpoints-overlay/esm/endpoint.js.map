{"version":3,"sources":["../src/endpoint.tsx"],"names":["Briefcase","Popup","FormattedMessage","useIntl","Home","MapMarkerAlt","Marker","Sync","Times","coreUtils","flatten","React","useState","S","defaultEnglishMessages","defaultMessages","UserLocationInnerIcon","type","UserLocationIcon","Endpoint","props","intl","rememberAsHome","propsLocation","location","rememberPlace","icon","id","rememberAsWork","forgetHome","forgetPlace","forgetWork","clearLocation","propsClearLocation","locationType","swapLocation","setLocation","otherType","onDragEnd","e","rawLocation","lngLat","coordinates","lat","lon","lng","name","formatMessage","defaultMessage","description","reverseGeocode","showPopup","setShowPopup","locations","MapMarkerIcon","showUserSettings","match","find","l","map","matchLatLon","isWork","isHome","iconHtml"],"mappings":"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","sourcesContent":["import { Briefcase } from \"@styled-icons/fa-solid/Briefcase\";\nimport { Popup } from \"@opentripplanner/base-map\";\nimport {\n  ClearLocationArg,\n  Location,\n  MapLocationActionArg,\n  UserLocationAndType\n} from \"@opentripplanner/types\";\nimport { FormattedMessage, useIntl } from \"react-intl\";\nimport { Home } from \"@styled-icons/fa-solid/Home\";\nimport { MapMarkerAlt } from \"@styled-icons/fa-solid/MapMarkerAlt\";\nimport { Marker, MarkerDragEvent } from \"react-map-gl\";\nimport { Sync } from \"@styled-icons/fa-solid/Sync\";\nimport { Times } from \"@styled-icons/fa-solid/Times\";\nimport coreUtils from \"@opentripplanner/core-utils\";\nimport flatten from \"flat\";\nimport React, { ComponentType, useState } from \"react\";\n\nimport * as S from \"./styled\";\n\n// Load the default messages.\nimport defaultEnglishMessages from \"../i18n/en-US.yml\";\n\ninterface Props {\n  clearLocation: (arg: ClearLocationArg) => void;\n  forgetPlace: (type: string) => void;\n  location?: Location;\n  locations: Location[];\n  MapMarkerIcon: ComponentType<UserLocationAndType>;\n  rememberPlace: (arg: UserLocationAndType) => void;\n  setLocation: (arg: MapLocationActionArg) => void;\n  showUserSettings: boolean;\n  type: string;\n}\n\ninterface IconProps {\n  type: string;\n}\n\n// HACK: We should flatten the messages loaded above because\n// the YAML loaders behave differently between webpack and our version of jest:\n// - the yaml loader for webpack returns a nested object,\n// - the yaml loader for jest returns messages with flattened ids.\nconst defaultMessages: Record<string, string> = flatten(defaultEnglishMessages);\n\n/**\n * These icons are used to render common icons for user locations. These will\n * only show up in applications that allow saving user locations.\n */\nfunction UserLocationInnerIcon({ type }: IconProps) {\n  switch (type) {\n    case \"briefcase\":\n      return <Briefcase size={12} />;\n    case \"home\":\n      return <Home size={12} />;\n    case \"map-marker\":\n      return <MapMarkerAlt size={12} />;\n    case \"refresh\":\n      return <Sync size={12} />;\n    case \"times\":\n      return <Times size={12} />;\n    default:\n      return null;\n  }\n}\n\n/**\n * Wrapper for icon that includes spacing.\n */\nfunction UserLocationIcon({ type }: IconProps) {\n  return (\n    <S.IconWrapper>\n      <UserLocationInnerIcon type={type} />\n    </S.IconWrapper>\n  );\n}\n\nconst Endpoint = (props: Props): JSX.Element => {\n  const intl = useIntl();\n\n  const rememberAsHome = (): void => {\n    const { location: propsLocation, rememberPlace } = props;\n    const location = {\n      ...propsLocation,\n      icon: \"home\",\n      id: \"home\",\n      type: \"home\"\n    };\n    rememberPlace({ type: \"home\", location });\n  };\n\n  const rememberAsWork = (): void => {\n    const { location: propsLocation, rememberPlace } = props;\n    const location = {\n      ...propsLocation,\n      icon: \"briefcase\",\n      id: \"work\",\n      type: \"work\"\n    };\n    rememberPlace({ type: \"work\", location });\n  };\n\n  const forgetHome = (): void => {\n    const { forgetPlace } = props;\n    forgetPlace(\"home\");\n  };\n\n  const forgetWork = (): void => {\n    const { forgetPlace } = props;\n    forgetPlace(\"work\");\n  };\n\n  const clearLocation = (): void => {\n    const { clearLocation: propsClearLocation, type } = props;\n    propsClearLocation({ locationType: type });\n  };\n\n  const swapLocation = (): void => {\n    const { location, setLocation, type } = props;\n    clearLocation();\n    const otherType = type === \"from\" ? \"to\" : \"from\";\n    setLocation({ locationType: otherType, location });\n  };\n\n  const onDragEnd = (e: MarkerDragEvent) => {\n    const { setLocation, type } = props;\n    const rawLocation = e.lngLat;\n    const coordinates = {\n      lat: rawLocation.lat,\n      lon: rawLocation.lng\n    };\n\n    const location = {\n      ...coordinates,\n      name: intl.formatMessage(\n        {\n          defaultMessage: defaultMessages[\"otpUi.EndpointsOverlay.coordinates\"],\n          description:\n            \"Formats rendering coordinates for a locale using the correct number separator\",\n          // FIXME: Combine with the same method at\n          // https://github.com/opentripplanner/otp-react-redux/blob/6d5bc90e57843822809b0dff397bad19d66aeb43/lib/components/form/user-settings.js#L34\n          // and move this potentially shared message to an appropriate package.\n          id: \"otpUi.EndpointsOverlay.coordinates\"\n        },\n        coordinates\n      )\n    };\n    setLocation({ locationType: type, location, reverseGeocode: true });\n  };\n\n  const [showPopup, setShowPopup] = useState(false);\n  const { location, locations, MapMarkerIcon, showUserSettings, type } = props;\n  if (!(location && location.lat && location.lon)) return null;\n  const match = locations.find(l => coreUtils.map.matchLatLon(l, location));\n  const isWork = match && match.type === \"work\";\n  const isHome = match && match.type === \"home\";\n  const iconHtml = <MapMarkerIcon location={location} type={type} />;\n  const otherType = type === \"from\" ? \"to\" : \"from\";\n  const icon = isWork ? \"briefcase\" : isHome ? \"home\" : \"map-marker\";\n  return (\n    // We have to use the standard marker here since we need to adjust state\n    // after and during drag\n    <Marker\n      anchor=\"center\"\n      draggable\n      latitude={location.lat}\n      longitude={location.lon}\n      onDragEnd={onDragEnd}\n      onDragStart={() => setShowPopup(false)}\n      onClick={() => setShowPopup(true)}\n    >\n      {iconHtml}\n      {showPopup && showUserSettings && (\n        <Popup\n          onClose={() => setShowPopup(false)}\n          latitude={location.lat}\n          longitude={location.lon}\n        >\n          <div>\n            <strong>\n              <UserLocationIcon type={icon} />\n              {location.name}\n            </strong>\n            <div>\n              <S.Button\n                disabled={isWork}\n                onClick={isHome ? forgetHome : rememberAsHome}\n              >\n                {isHome ? (\n                  <>\n                    <UserLocationIcon type=\"times\" />\n                    <FormattedMessage\n                      defaultMessage={\n                        defaultMessages[\"otpUi.EndpointsOverlay.forgetHome\"]\n                      }\n                      description=\"Button text to forget the home location\"\n                      id=\"otpUi.EndpointsOverlay.forgetHome\"\n                    />\n                  </>\n                ) : (\n                  <>\n                    <UserLocationIcon type=\"home\" />\n                    <FormattedMessage\n                      defaultMessage={\n                        defaultMessages[\"otpUi.EndpointsOverlay.saveAsHome\"]\n                      }\n                      description=\"Button text to save the location as home location\"\n                      id=\"otpUi.EndpointsOverlay.saveAsHome\"\n                    />\n                  </>\n                )}\n              </S.Button>\n            </div>\n            <div>\n              <S.Button\n                disabled={isHome}\n                onClick={isWork ? forgetWork : rememberAsWork}\n              >\n                {isWork ? (\n                  <>\n                    <UserLocationIcon type=\"times\" />\n                    <FormattedMessage\n                      defaultMessage={\n                        defaultMessages[\"otpUi.EndpointsOverlay.forgetWork\"]\n                      }\n                      description=\"Button text to forget the work location\"\n                      id=\"otpUi.EndpointsOverlay.forgetWork\"\n                    />\n                  </>\n                ) : (\n                  <>\n                    <UserLocationIcon type=\"briefcase\" />\n                    <FormattedMessage\n                      defaultMessage={\n                        defaultMessages[\"otpUi.EndpointsOverlay.saveAsWork\"]\n                      }\n                      description=\"Button text to save the location as work location\"\n                      id=\"otpUi.EndpointsOverlay.saveAsWork\"\n                    />\n                  </>\n                )}\n              </S.Button>\n            </div>\n            <div>\n              <S.Button onClick={clearLocation}>\n                <UserLocationIcon type=\"times\" />\n                <FormattedMessage\n                  defaultMessage={\n                    defaultMessages[\"otpUi.EndpointsOverlay.clearLocation\"]\n                  }\n                  description=\"Button text to clear the from/to location\"\n                  id=\"otpUi.EndpointsOverlay.clearLocation\"\n                  values={{ locationType: type }}\n                />\n              </S.Button>\n            </div>\n            <div>\n              <S.Button onClick={swapLocation}>\n                <UserLocationIcon type=\"refresh\" />\n                <FormattedMessage\n                  defaultMessage={\n                    defaultMessages[\"otpUi.EndpointsOverlay.swapLocation\"]\n                  }\n                  description=\"Button text to swap the from/to location\"\n                  id=\"otpUi.EndpointsOverlay.swapLocation\"\n                  values={{ locationType: otherType }}\n                />\n              </S.Button>\n            </div>\n          </div>\n        </Popup>\n      )}\n    </Marker>\n  );\n};\n\nexport default Endpoint;\n"],"file":"endpoint.js"}