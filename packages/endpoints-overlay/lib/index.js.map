{"version":3,"sources":["../src/index.tsx"],"names":["noop","DefaultMapMarkerIcon","location","type","PIXELS","inner","toPixels","name","EndpointsOverlay","clearLocation","forgetPlace","fromLocation","intermediatePlaces","locations","MapMarkerIcon","rememberPlace","setLocation","showUserSettings","toLocation","map","place","index"],"mappings":"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","sourcesContent":["import {\n  ClearLocationArg,\n  Location,\n  MapLocationActionArg,\n  UserLocationAndType\n} from \"@opentripplanner/types\";\nimport React, { ComponentType, ReactElement } from \"react\";\n\nimport Endpoint from \"./endpoint\";\nimport * as S from \"./styled\";\n\ninterface Props {\n  /**\n   * Dispatched when a user clicks on the clear location button in the user\n   * settings. Not needed unless user settings is activated. Dispatched with an\n   * argument in the form of:\n   *\n   * { type: \"from/to\" }\n   */\n  clearLocation?: (arg: ClearLocationArg) => void;\n  /**\n   * Dispatched when a user clicks on the forget location button in the user\n   * settings. Not needed unless user settings is activated. Dispatched with a\n   * string argument representing the type of saved location.\n   */\n  forgetPlace?: (type: string) => void;\n  /**\n   * The from location.\n   */\n  fromLocation?: Location;\n  /**\n   * Intermediate places along a journey.\n   */\n  intermediatePlaces?: Location[];\n  /**\n   * An array of location that the user has saved. Not needed unless user\n   * settings is activated.\n   */\n  locations?: Location[];\n  /**\n   * An optional custom component that can be used to create custom html that\n   * is used in a leaflet divIcon to render the map marker icon for each\n   * endpoint.\n   *\n   * See https://leafletjs.com/reference-1.6.0.html#divicon\n   *\n   * This component is passed 2 props:\n   * - location: either the from or to location depending on the endpoint\n   * - type: either \"from\" or \"to\"\n   */\n  MapMarkerIcon?: ComponentType<UserLocationAndType>;\n  /**\n   * Dispatched when a user clicks on the remember place button in the user\n   * settings. Not needed unless user settings is activated. Dispatched with an\n   * argument in the form of:\n   *\n   * { location: {...location}, type: \"home/work\" }\n   */\n  rememberPlace?: (arg: UserLocationAndType) => void;\n  /**\n   * Dispatched when a location is dragged somewhere else on the map. Dispatched\n   * with an argument in the form of:\n   *\n   * { location: {...location}, reverseGeocode: true, type: \"from/to\" }\n   */\n  setLocation: (arg: MapLocationActionArg) => void;\n  /**\n   * Whether or not to show the user settings popup when an endpoint is clicked.\n   */\n  showUserSettings?: boolean;\n  /**\n   * To to location\n   */\n  toLocation?: Location;\n}\n\nconst noop = () => {};\n\nfunction DefaultMapMarkerIcon({\n  location,\n  type\n}: UserLocationAndType): ReactElement {\n  const PIXELS = 20;\n  let inner;\n  switch (type) {\n    case \"to\": {\n      // The fa-solid's \"location-dot\" icon used here has a width-height ratio of 3/4,\n      // so the desired width for the outline/\"stacked\" element is 4/3 of the \"apparent\" width.\n      const toPixels = PIXELS * 1.3;\n      inner = (\n        <>\n          <S.StackedToIcon size={toPixels} type={type} />\n          <S.ToIcon size={toPixels - 6} type={type} />\n        </>\n      );\n      break;\n    }\n    default:\n      // Default to the location icon on top of a white background.\n      inner = (\n        <>\n          <S.StackedCircle size={PIXELS} />\n          <S.StackedLocationIcon size={PIXELS} type={type} />\n        </>\n      );\n      break;\n  }\n  return (\n    <S.StackedIconContainer title={location.name}>\n      {inner}\n    </S.StackedIconContainer>\n  );\n}\n\nconst EndpointsOverlay = ({\n  clearLocation = noop,\n  forgetPlace = noop,\n  fromLocation,\n  intermediatePlaces = [],\n  locations = [],\n  MapMarkerIcon = DefaultMapMarkerIcon,\n  rememberPlace = noop,\n  setLocation,\n  showUserSettings,\n  toLocation\n}: Props): ReactElement => (\n  <div>\n    <Endpoint\n      clearLocation={clearLocation}\n      forgetPlace={forgetPlace}\n      location={fromLocation}\n      locations={locations}\n      MapMarkerIcon={MapMarkerIcon}\n      rememberPlace={rememberPlace}\n      setLocation={setLocation}\n      showUserSettings={showUserSettings}\n      type=\"from\"\n    />\n    {intermediatePlaces.map((place, index) => {\n      return (\n        <Endpoint\n          clearLocation={clearLocation}\n          forgetPlace={forgetPlace}\n          key={index}\n          location={place}\n          locations={locations}\n          MapMarkerIcon={MapMarkerIcon}\n          rememberPlace={rememberPlace}\n          setLocation={setLocation}\n          showUserSettings={showUserSettings}\n          type={place.type}\n        />\n      );\n    })}\n    <Endpoint\n      clearLocation={clearLocation}\n      forgetPlace={forgetPlace}\n      location={toLocation}\n      locations={locations}\n      MapMarkerIcon={MapMarkerIcon}\n      rememberPlace={rememberPlace}\n      setLocation={setLocation}\n      showUserSettings={showUserSettings}\n      type=\"to\"\n    />\n  </div>\n);\n\nexport default EndpointsOverlay;\n\n// Rename styled components for export.\nexport { S as Styled };\n"],"file":"index.js"}