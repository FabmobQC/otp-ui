{"version":3,"sources":["../src/index.tsx"],"names":["optionIdPrefix","getOptionId","index","optionKey","DefaultLocationIcon","locationType","ICON_SIZE","filter","list","layers","include","limit","feature","includes","properties","layer","slice","getFeaturesByCategoryWithLimit","geocodedFeatures","suggestionCount","sortByDistance","preferredLayers","special","normal","reduce","prev","cur","push","sortedGeocodedFeatures","sort","a","b","distance","Infinity","stopFeatures","stationFeatures","otherFeatures","makeUserOption","userLocation","key","activeIndex","selectHandlers","displayName","icon","locationSelected","LocationField","addLocationSearch","autoFocus","className","clearButtonIcon","clearLocation","currentPosition","currentPositionIcon","currentPositionUnavailableIcon","findNearbyStops","GeocodedOptionIconComponent","GeocodedOptionIcon","geocoderConfig","getCurrentPosition","hideExistingValue","initialSearchResults","inputPlaceholder","isRequired","isStatic","isValid","layerColorMap","location","LocationIconComponent","nearbyStops","onLocationSelected","onTextInputClick","operatorIconMap","sessionOptionIcon","sessionSearches","showClearButton","showUserSettings","stopOptionIcon","stopsIndex","suggestionHeadingType","headingType","suppressNearby","UserLocationIconComponent","UserLocationIcon","userLocationsAndRecentPlaces","getValueFromLocation","label","name","formControlClassname","listBoxId","intl","setActiveIndex","stateGeocodedFeatures","setGeocodedFeatures","menuVisible","setMenuVisible","isFetching","setFetching","stateMessage","setMessage","stateValue","setValue","abortControllers","setAbortController","inputRef","geocodeAutocomplete","text","console","warn","formatMessage","defaultMessage","description","id","newController","AbortController","autocomplete","options","signal","then","result","message","features","errorMessage","results","error","parts","length","count","hasResults","formatList","type","resultsFoundText","input","instructions","catch","err","toString","closeMenu","setLocation","newLocation","resultType","useCurrentLocation","coreUtils","map","currentPositionToLocation","onClearButtonClick","current","focus","handleTextInputClick","onDropdownToggle","onBlurFormGroup","e","target","relatedTarget","document","activeElement","getAttribute","onTextInputChange","evt","value","forEach","ac","abort","coords","lat","latitude","lon","longitude","max","maxNearbyStops","onKeyDown","preventDefault","menuItemCount","locationSelectedLookup","geocodeSearch","search","renderFeature","itemIndex","main","secondary","getLocationFromGeocodedFeature","geocodedLocation","source","classNames","operatorIcon","featureIdComponents","split","operatorName","replace","toLowerCase","join","statusMessages","menuItems","userLocationRenderData","loc","matchingLocations","concat","transitFeaturesPresent","stations","stops","stopId","stop","stopLocation","option","sessionLocation","optionIcon","optionTitle","positionUnavailable","locationUnavailableText","errorText","undefined","unshift","defaultPlaceholder","placeholder","fetching","hasNoEnabledOptions","isExpanded","textControl","clearButton","ItemList","S","StaticMenuItemList","MenuItemList"],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/ban-ts-comment */\n/* eslint-disable @typescript-eslint/no-use-before-define */\nimport coreUtils from \"@opentripplanner/core-utils\";\nimport getGeocoder from \"@opentripplanner/geocoder\";\n// @ts-ignore Not Typescripted Yet\nimport LocationIcon from \"@opentripplanner/location-icon\";\nimport { Location } from \"@opentripplanner/types\";\nimport React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport { FormattedList, FormattedMessage, useIntl } from \"react-intl\";\nimport { Ban } from \"@styled-icons/fa-solid/Ban\";\nimport { Bus } from \"@styled-icons/fa-solid/Bus\";\nimport { ExclamationCircle } from \"@styled-icons/fa-solid/ExclamationCircle\";\nimport { LocationArrow } from \"@styled-icons/fa-solid/LocationArrow\";\nimport { Search } from \"@styled-icons/fa-solid/Search\";\nimport { Times } from \"@styled-icons/fa-solid/Times\";\nimport { debounce } from \"throttle-debounce\";\n\nimport {\n  GeocodedOptionIcon,\n  ICON_SIZE,\n  Option,\n  TransitStopOption,\n  UserLocationIcon,\n  getRenderData\n} from \"./options\";\nimport * as S from \"./styled\";\nimport { LocationFieldProps, ResultType } from \"./types\";\nimport {\n  addInParentheses,\n  generateLabel,\n  getCombinedLabel,\n  getGeocoderErrorMessage,\n  getMatchingLocations\n} from \"./utils\";\n\nconst optionIdPrefix = \"otpui-locf-option\";\n\n/**\n * Formats the option id based on its given index position.\n * This assumes only one location dropdown is shown at a time.\n */\nfunction getOptionId(index: number): string {\n  return `${optionIdPrefix}-${index}`;\n}\n\n// FIXME have a better key generator for options\nlet optionKey = 0;\n\nfunction DefaultLocationIcon({\n  locationType\n}: {\n  locationType: string;\n}): React.ReactElement {\n  return <LocationIcon size={ICON_SIZE} type={locationType} />;\n}\n\n/**\n * Helper function that includes or excludes features based om layers.\n */\nfunction filter(\n  list: any[],\n  layers: string[],\n  include: boolean,\n  limit: number\n): any[] {\n  return list\n    .filter(feature => layers.includes(feature.properties.layer) === include)\n    .slice(0, limit);\n}\n\n/**\n * Puts the given geocoded features into several categories with upper bounds.\n */\nfunction getFeaturesByCategoryWithLimit(\n  geocodedFeatures: any[],\n  suggestionCount: number,\n  sortByDistance: boolean,\n  preferredLayers: string[]\n) {\n  // Split features into those we want to always show above others\n  const { special, normal } = geocodedFeatures.reduce(\n    (prev, cur) => {\n      prev[\n        preferredLayers.includes(cur?.properties?.layer) ? \"special\" : \"normal\"\n      ].push(cur);\n      return prev;\n    },\n    { special: [], normal: [] }\n  );\n\n  const sortedGeocodedFeatures = [\n    ...special,\n    ...normal.sort((a, b) => {\n      if (!sortByDistance) return 0;\n      return (\n        (b.properties?.distance || Infinity) -\n        (a.properties?.distance || Infinity)\n      );\n    })\n  ];\n\n  // Split out different types of transit results\n  // To keep the list tidy, only include a subset of the responses for each category\n  const stopFeatures = filter(\n    sortedGeocodedFeatures,\n    [\"stops\"],\n    true,\n    suggestionCount\n  );\n  const stationFeatures = filter(\n    sortedGeocodedFeatures,\n    [\"stations\"],\n    true,\n    suggestionCount\n  );\n  const otherFeatures = filter(\n    sortedGeocodedFeatures,\n    [\"stops\", \"stations\"],\n    false,\n    suggestionCount\n  );\n\n  return {\n    otherFeatures,\n    stationFeatures,\n    stopFeatures\n  };\n}\n\n/**\n * Helper to render and register a user-saved location.\n */\nfunction makeUserOption(userLocation, index, key, activeIndex, selectHandlers) {\n  const { displayName, icon, locationSelected } = userLocation;\n  // Add to the selection handler lookup (for use in onKeyDown)\n  selectHandlers[index] = locationSelected;\n  return (\n    <Option\n      icon={icon}\n      id={getOptionId(index)}\n      isActive={index === activeIndex}\n      key={key}\n      onClick={locationSelected}\n      title={displayName}\n    />\n  );\n}\n\nconst LocationField = ({\n  addLocationSearch = () => {},\n  autoFocus = false,\n  className = null,\n  clearButtonIcon = <Times size={ICON_SIZE} />,\n  clearLocation = () => {},\n  currentPosition = null,\n  currentPositionIcon = <LocationArrow size={ICON_SIZE} />,\n  currentPositionUnavailableIcon = <Ban size={ICON_SIZE} />,\n  findNearbyStops = () => {},\n  GeocodedOptionIconComponent = GeocodedOptionIcon,\n  geocoderConfig,\n  getCurrentPosition,\n  hideExistingValue = false,\n  initialSearchResults = null,\n  inputPlaceholder = null,\n  isRequired = false,\n  isStatic = false,\n  isValid = true,\n  layerColorMap = {},\n  location = null,\n  LocationIconComponent = DefaultLocationIcon,\n  locationType,\n  nearbyStops = [],\n  onLocationSelected,\n  onTextInputClick = null,\n  operatorIconMap = {},\n  preferredLayers = [],\n  sessionOptionIcon = <Search size={ICON_SIZE} />,\n  sessionSearches = [],\n  showClearButton = true,\n  showUserSettings = false,\n  sortByDistance = false,\n  stopOptionIcon = <Bus size={ICON_SIZE} />,\n  stopsIndex = null,\n  suggestionCount = 3,\n  suggestionHeadingType: headingType,\n  suppressNearby = false,\n  UserLocationIconComponent = UserLocationIcon,\n  userLocationsAndRecentPlaces = []\n}: LocationFieldProps): React.ReactElement => {\n  /**\n   * Gets the initial value to place in the input field.\n   */\n  const getValueFromLocation = () => {\n    const label = location?.name || \"\";\n    return location && !hideExistingValue ? label : \"\";\n  };\n\n  const formControlClassname = `${locationType}-form-control`;\n\n  const listBoxId = `${locationType}-listbox`;\n\n  const intl = useIntl();\n\n  const [activeIndex, setActiveIndex] = useState(null);\n  const [stateGeocodedFeatures, setGeocodedFeatures] = useState([]);\n  const [menuVisible, setMenuVisible] = useState(false);\n  const [isFetching, setFetching] = useState(false);\n  const [stateMessage, setMessage] = useState(null);\n  const [stateValue, setValue] = useState(getValueFromLocation());\n  const [abortControllers, setAbortController] = useState([]);\n\n  const inputRef = useRef(null);\n\n  useEffect(() => {\n    // location could be null if none is set\n    setValue(location?.name || \"\");\n    setGeocodedFeatures([]);\n  }, [location]);\n\n  useEffect(() => {\n    if (initialSearchResults) {\n      setGeocodedFeatures(initialSearchResults);\n      setMenuVisible(true);\n    }\n  }, [initialSearchResults]);\n\n  // TODO: is it possible to restore the useCallback while also setting\n  // a new abort controller?\n  const geocodeAutocomplete = debounce(300, (text: string) => {\n    if (!text) {\n      console.warn(\"No text entry provided for geocode autocomplete search.\");\n      setMessage(null);\n      return;\n    }\n    setFetching(true);\n    setMessage(\n      intl.formatMessage({\n        defaultMessage: \"Fetching suggestions…\",\n        description: \"Hint shown while geocoder suggestions are being fetched\",\n        id: \"otpUi.LocationField.fetchingSuggestions\"\n      })\n    );\n    const newController = new AbortController();\n    setAbortController([...abortControllers, newController]);\n\n    getGeocoder(geocoderConfig)\n      .autocomplete({ text, options: { signal: newController.signal } })\n      // TODO: Better type?\n      .then(\n        (result: {\n          features: Location[];\n          results: { error: { message: string } };\n        }) => {\n          let message: string;\n          // If no features found in response, default to empty array.\n          let geocodedFeatures = result?.features;\n          if (!geocodedFeatures) {\n            // Get the Pelias error message if exists.\n            // TODO: determine how other geocoders return error messages.\n            const errorMessage = result?.results?.error?.message;\n            // If the result did not contain a list of features, add special note.\n            message = getGeocoderErrorMessage(intl, errorMessage);\n            geocodedFeatures = [];\n          } else {\n            const {\n              otherFeatures,\n              stationFeatures,\n              stopFeatures\n            } = getFeaturesByCategoryWithLimit(\n              geocodedFeatures,\n              suggestionCount,\n              sortByDistance,\n              preferredLayers\n            );\n            // Breakdown results found by type.\n            const parts = [];\n            if (stopFeatures.length) {\n              parts.push(\n                intl.formatMessage(\n                  {\n                    description: \"Shows the count of transit stops\",\n                    id: \"otpUi.LocationField.stopCount\"\n                  },\n                  { count: stopFeatures.length }\n                )\n              );\n            }\n            if (stationFeatures.length) {\n              parts.push(\n                intl.formatMessage(\n                  {\n                    description: \"Shows the count of stations\",\n                    id: \"otpUi.LocationField.stationCount\"\n                  },\n                  { count: stationFeatures.length }\n                )\n              );\n            }\n            if (otherFeatures.length) {\n              parts.push(\n                intl.formatMessage(\n                  {\n                    description: \"Shows the count of other places\",\n                    id: \"otpUi.LocationField.otherCount\"\n                  },\n                  { count: otherFeatures.length }\n                )\n              );\n            }\n            const hasResults = parts.length !== 0;\n            const results = hasResults\n              ? intl.formatList(parts, { type: \"conjunction\" })\n              : intl.formatMessage({\n                  description: \"Indicates no results\",\n                  id: \"otpUi.LocationField.noResults\"\n                });\n            const resultsFoundText = intl.formatMessage(\n              {\n                description: \"Text about geocoder results found\",\n                id: \"otpUi.LocationField.resultsFound\"\n              },\n              {\n                input: text,\n                results\n              }\n            );\n            if (hasResults) {\n              // If there are results, concatenate sentences about results found and\n              // instructions for assistive technology users on how to access results.\n              const instructions = intl.formatMessage({\n                description: \"Instructions on accessing geocoder results\",\n                id: \"otpUi.LocationField.howToAccessResults\"\n              });\n              message = `${resultsFoundText} ${instructions}`;\n            } else {\n              message = resultsFoundText;\n            }\n          }\n          setGeocodedFeatures(geocodedFeatures);\n          setMessage(message);\n          setFetching(false);\n        }\n      )\n      .catch((err: unknown) => {\n        console.error(err);\n        const message = getGeocoderErrorMessage(intl, err.toString());\n        setMessage(message);\n      });\n  });\n\n  /** Clear selection & hide the menu. */\n  const closeMenu = useCallback(() => {\n    setMenuVisible(false);\n    setActiveIndex(null);\n  }, [setMessage, setMenuVisible, setActiveIndex]);\n\n  const setLocation = (newLocation: Location, resultType: ResultType) => {\n    onLocationSelected({\n      location: newLocation,\n      locationType,\n      resultType\n    });\n    closeMenu();\n    setMessage(null);\n  };\n\n  const useCurrentLocation = () => {\n    const newLocation = coreUtils.map.currentPositionToLocation(\n      currentPosition\n    );\n    if (newLocation) {\n      // If geolocation is successful (i.e., user has granted app geolocation\n      // permission and coords exist), set location.\n      onLocationSelected({\n        location: newLocation,\n        locationType,\n        resultType: \"CURRENT_LOCATION\"\n      });\n    } else {\n      // Call geolocation.getCurrentPosition and set as from/to locationType\n      getCurrentPosition(intl, locationType);\n    }\n    setMenuVisible(false);\n  };\n\n  const onClearButtonClick = () => {\n    clearLocation({ locationType });\n    setValue(\"\");\n    setMessage(null);\n    setGeocodedFeatures([]);\n    inputRef.current.focus();\n    handleTextInputClick();\n  };\n\n  const onDropdownToggle = () => {\n    setMenuVisible(!menuVisible);\n  };\n\n  /**\n   * Only hide menu if the target clicked is not a menu item in the dropdown.\n   * Otherwise, the click will not \"finish\" and the menu will hide without the\n   * user having made a selection.\n   */\n  const onBlurFormGroup = e => {\n    // IE does not use relatedTarget, so this check handles cross-browser support.\n    // see https://stackoverflow.com/a/49325196/915811\n    const target =\n      e.relatedTarget !== null ? e.relatedTarget : document.activeElement;\n    if (!target || target.getAttribute(\"role\") !== \"option\") {\n      // Hide the menu and messages, but:\n      // - don't remove features,\n      //   so that when the component gets focus again later, these features are shown\n      //   (unless the location prop changed, in which case the features will be cleared by other code),\n      // - don't revert the input text to previous location, so that users don't have to re-enter their text\n      //   (unless the location prop changed, in which case the text will be updated by other code).\n      closeMenu();\n    }\n  };\n\n  const onTextInputChange = evt => {\n    const { value } = evt.target;\n    setValue(value);\n    setMenuVisible(true);\n\n    // Cancel all pending requests\n    abortControllers.forEach(ac => ac.abort());\n\n    geocodeAutocomplete(value);\n  };\n\n  const handleTextInputClick = () => {\n    if (typeof onTextInputClick === \"function\") onTextInputClick();\n    setMenuVisible(true);\n    if (nearbyStops.length === 0 && currentPosition && currentPosition.coords) {\n      findNearbyStops({\n        lat: currentPosition.coords.latitude,\n        lon: currentPosition.coords.longitude,\n        max: geocoderConfig.maxNearbyStops || 4\n      });\n    }\n  };\n\n  const onKeyDown = evt => {\n    switch (evt.key) {\n      // 'Down' arrow key pressed: move selected menu item down by one position\n      case \"ArrowDown\":\n        // Suppress default 'ArrowDown' behavior which moves cursor to end\n        evt.preventDefault();\n        if (!menuVisible) {\n          // If the menu is not visible, simulate a text input click to show it.\n          handleTextInputClick();\n        } else if (activeIndex === menuItemCount - 1) {\n          setActiveIndex(null);\n        } else {\n          setActiveIndex(activeIndex === null ? 0 : activeIndex + 1);\n        }\n        break;\n      // 'Up' arrow key pressed: move selection up by one position\n      case \"ArrowUp\":\n        // Suppress default 'ArrowUp' behavior which moves cursor to beginning\n        evt.preventDefault();\n        if (activeIndex === 0) {\n          setActiveIndex(null);\n        } else {\n          setActiveIndex(\n            activeIndex === null ? menuItemCount - 1 : activeIndex - 1\n          );\n        }\n        break;\n      // 'Enter' keypress serves two purposes:\n      //  - If pressed when typing in search string, switch from 'autocomplete'\n      //    to 'search' geocoding\n      //  - If pressed when dropdown results menu is active, apply the location\n      //    associated with current selected menu item\n      case \"Enter\":\n        if (typeof activeIndex === \"number\") {\n          // Menu is active\n          // Retrieve location selection handler from lookup object and invoke\n          const locationSelected = locationSelectedLookup[activeIndex];\n          if (locationSelected) locationSelected();\n\n          closeMenu();\n          setMessage(null);\n        } else {\n          // Menu not active; get geocode 'search' results\n          geocodeSearch(evt.target.value);\n          // Ensure menu is visible.\n          setMenuVisible(true);\n        }\n\n        // Suppress default 'Enter' behavior which causes page to reload\n        evt.preventDefault();\n        break;\n      case \"Escape\":\n      case \"Tab\":\n        closeMenu();\n        break;\n      // Any other key pressed: clear active selection\n      default:\n        setActiveIndex(null);\n        break;\n    }\n  };\n\n  const geocodeSearch = text => {\n    if (!text) {\n      console.warn(\"No text entry provided for geocode search.\");\n      return;\n    }\n    getGeocoder(geocoderConfig)\n      .search({ text })\n      .then(result => {\n        if (result?.features?.length > 0) {\n          // Only replace geocode items if results were found\n          setGeocodedFeatures(result.features);\n          setMessage(null);\n        } else {\n          console.warn(\n            \"No results found for geocode search. Not replacing results.\"\n          );\n        }\n      })\n      .catch(err => {\n        console.error(err);\n      });\n  };\n\n  const renderFeature = (itemIndex, feature) => {\n    // generate the friendly labels for this feature\n    const { main, secondary } = generateLabel(feature.properties);\n\n    // Create the selection handler\n    const locationSelected = () => {\n      getGeocoder(geocoderConfig)\n        .getLocationFromGeocodedFeature(feature)\n        .then(geocodedLocation => {\n          // add the friendly location labels for use later on\n          geocodedLocation.main = main;\n          geocodedLocation.secondary = secondary;\n          geocodedLocation.name = getCombinedLabel(feature.properties);\n          // Set the current location\n          setLocation(geocodedLocation, \"GEOCODE\");\n          // Add to the location search history. This is intended to\n          // populate the sessionSearches array.\n          addLocationSearch({ location: geocodedLocation });\n        });\n    };\n\n    // Add to the selection handler lookup (for use in onKeyDown)\n    locationSelectedLookup[itemIndex] = locationSelected;\n\n    // Extract GTFS/POI info and assign to class\n    const { id, source, layer } = feature.properties;\n    const classNames = [];\n    let operatorIcon;\n    // Operator only exists on transit features\n    const featureIdComponents = source === \"transit\" && id.split(\"::\");\n    if (featureIdComponents.length > 1 && featureIdComponents?.[1].length > 0) {\n      const operatorName = featureIdComponents[1]\n        .replace(/ /g, \"-\")\n        .toLowerCase();\n      classNames.push(`operator-${operatorName}`);\n      operatorIcon = operatorIconMap[operatorName];\n    }\n\n    classNames.push(`source-${source}`);\n    classNames.push(`layer-${layer}`);\n\n    // Create and return the option menu item\n    return (\n      <Option\n        classes={classNames.join(\" \")}\n        color={layerColorMap[layer]}\n        icon={operatorIcon || <GeocodedOptionIconComponent feature={feature} />}\n        id={getOptionId(itemIndex)}\n        isActive={itemIndex === activeIndex}\n        key={optionKey++}\n        onClick={locationSelected}\n        title={main}\n        subTitle={secondary}\n      />\n    );\n  };\n\n  const message = stateMessage;\n  const geocodedFeatures = stateGeocodedFeatures;\n\n  if (sessionSearches.length > 5) sessionSearches = sessionSearches.slice(0, 5);\n\n  // Assemble menu contents, to be displayed either as dropdown or static panel.\n  // Menu items are created in four phases: (1) the current location, (2) any\n  // geocoder search results; (3) nearby transit stops; and (4) saved searches\n\n  const statusMessages = [];\n  let menuItems = []; // array of menu items for display (may include non-selectable items e.g. dividers/headings)\n  let itemIndex = 0; // the index of the current location-associated menu item (excluding non-selectable items)\n  const locationSelectedLookup = {}; // maps itemIndex to a location selection handler (for use by the onKeyDown method)\n  const userLocationRenderData = showUserSettings\n    ? userLocationsAndRecentPlaces.map(loc =>\n        getRenderData(loc, setLocation, UserLocationIconComponent, intl)\n      )\n    : [];\n\n  /* 0) Include user saved locations if the typed text contains those locations name. */\n  if (showUserSettings) {\n    const matchingLocations = getMatchingLocations(\n      userLocationRenderData,\n      stateValue\n    );\n    if (matchingLocations.length) {\n      // Iterate through any saved locations\n      menuItems = menuItems.concat(\n        matchingLocations.map(userLocation =>\n          makeUserOption(\n            userLocation,\n            itemIndex++,\n            optionKey++,\n            itemIndex === activeIndex,\n            locationSelectedLookup\n          )\n        )\n      );\n    }\n  }\n\n  /* 1) Process geocode search result option(s) */\n  if (geocodedFeatures.length > 0) {\n    const {\n      otherFeatures,\n      stationFeatures,\n      stopFeatures\n    } = getFeaturesByCategoryWithLimit(\n      geocodedFeatures,\n      suggestionCount,\n      sortByDistance,\n      preferredLayers\n    );\n\n    // If no categories of features are returned, this variable is used to\n    // avoid displaying headers\n    const transitFeaturesPresent =\n      stopFeatures.length > 0 || stationFeatures.length > 0;\n\n    // Iterate through the geocoder results\n    menuItems = menuItems.concat(\n      stationFeatures.length > 0 && (\n        <S.MenuGroupHeader\n          as={headingType}\n          bgColor={layerColorMap.stations}\n          key=\"gtfs-stations-header\"\n        >\n          <FormattedMessage\n            description=\"Text for header above Stations\"\n            id=\"otpUi.LocationField.stations\"\n          />\n        </S.MenuGroupHeader>\n      ),\n      stationFeatures.map(feature => renderFeature(itemIndex++, feature)),\n\n      stopFeatures.length > 0 && (\n        <S.MenuGroupHeader\n          as={headingType}\n          bgColor={layerColorMap.stops}\n          key=\"gtfs-stops-header\"\n        >\n          <FormattedMessage\n            description=\"Text for header above Stops\"\n            id=\"otpUi.LocationField.stops\"\n          />\n        </S.MenuGroupHeader>\n      ),\n      stopFeatures.map(feature => renderFeature(itemIndex++, feature)),\n\n      transitFeaturesPresent && otherFeatures.length > 0 && (\n        <S.MenuGroupHeader as={headingType} bgColor=\"#333\" key=\"other-header\">\n          <FormattedMessage\n            description=\"Text for header above the 'other'\"\n            id=\"otpUi.LocationField.other\"\n          />\n        </S.MenuGroupHeader>\n      ),\n      otherFeatures.map(feature => renderFeature(itemIndex++, feature))\n    );\n  }\n\n  /* 2) Process nearby transit stop options */\n  if (nearbyStops.length > 0 && !suppressNearby) {\n    // Add the menu sub-heading (not a selectable item)\n    menuItems.push(\n      <S.MenuGroupHeader as={headingType} key=\"ns-header\">\n        <FormattedMessage\n          description=\"Text for header above nearby stops\"\n          id=\"otpUi.LocationField.nearby\"\n        />\n      </S.MenuGroupHeader>\n    );\n\n    // Iterate through the found nearby stops\n    menuItems = menuItems.concat(\n      nearbyStops.map(stopId => {\n        // Construct the location\n        const stop = stopsIndex[stopId];\n        const stopLocation = {\n          id: stopId,\n          lat: stop.lat,\n          lon: stop.lon,\n          name: stop.name\n        };\n\n        // Create the location selected handler\n        const locationSelected = () => {\n          setLocation(stopLocation, \"STOP\");\n        };\n\n        // Add to the selection handler lookup (for use in onKeyDown)\n        locationSelectedLookup[itemIndex] = locationSelected;\n\n        // Create and return the option menu item\n        const option = (\n          <TransitStopOption\n            id={getOptionId(itemIndex)}\n            isActive={itemIndex === activeIndex}\n            key={optionKey++}\n            onClick={locationSelected}\n            stop={stop}\n            stopOptionIcon={stopOptionIcon}\n          />\n        );\n        itemIndex++;\n        return option;\n      })\n    );\n  }\n\n  /* 3) Process recent search history options */\n  if (sessionSearches.length > 0) {\n    // Add the menu sub-heading (not a selectable item)\n    menuItems.push(\n      <S.MenuGroupHeader as={headingType} key=\"ss-header\">\n        <FormattedMessage\n          description=\"Text for header above recently searched items\"\n          id=\"otpUi.LocationField.recentlySearched\"\n        />\n      </S.MenuGroupHeader>\n    );\n\n    // Iterate through any saved locations\n    menuItems = menuItems.concat(\n      sessionSearches.map(sessionLocation => {\n        // Create the location-selected handler\n        const locationSelected = () => {\n          setLocation(sessionLocation, \"SESSION\");\n        };\n\n        // Add to the selection handler lookup (for use in onKeyDown)\n        locationSelectedLookup[itemIndex] = locationSelected;\n        // Create and return the option menu item\n        const option = (\n          <Option\n            icon={sessionOptionIcon}\n            id={getOptionId(itemIndex)}\n            isActive={itemIndex === activeIndex}\n            key={optionKey++}\n            onClick={locationSelected}\n            subTitle={sessionLocation.secondary || \"\"}\n            // just use the name if there is no main/secondary field\n            title={sessionLocation.main || sessionLocation.name}\n          />\n        );\n        itemIndex++;\n        return option;\n      })\n    );\n  }\n\n  /* 3b) Process stored user locations */\n  if (userLocationsAndRecentPlaces.length > 0 && showUserSettings) {\n    // Add the menu sub-heading (not a selectable item)\n    menuItems.push(\n      <S.MenuGroupHeader as={headingType} key=\"mp-header\">\n        <FormattedMessage\n          description=\"Text for header above user-saved places\"\n          id=\"otpUi.LocationField.myPlaces\"\n        />\n      </S.MenuGroupHeader>\n    );\n\n    // Iterate through any saved locations\n    menuItems = menuItems.concat(\n      userLocationRenderData.map(userLocation =>\n        makeUserOption(\n          userLocation,\n          itemIndex++,\n          optionKey++,\n          itemIndex === activeIndex,\n          locationSelectedLookup\n        )\n      )\n    );\n  }\n\n  /* 4) Process the current location */\n  let locationSelected;\n  let optionIcon;\n  let optionTitle;\n  let positionUnavailable;\n\n  if (currentPosition && !currentPosition.error) {\n    // current position detected successfully\n    locationSelected = useCurrentLocation;\n    optionIcon = currentPositionIcon;\n    optionTitle = intl.formatMessage({\n      id: \"otpUi.LocationField.useCurrentLocation\"\n    });\n    positionUnavailable = false;\n  } else {\n    // Error detecting current position.\n    // If there is an error, concatenate the error message in parentheses.\n    optionIcon = currentPositionUnavailableIcon;\n    const locationUnavailableText = intl.formatMessage({\n      description: \"Current location unavailable status\",\n      id: \"otpUi.LocationField.currentLocationUnavailable\"\n    });\n    const errorText = !currentPosition\n      ? undefined\n      : typeof currentPosition.error === \"string\"\n      ? currentPosition.error\n      : currentPosition.error.message;\n\n    optionTitle = addInParentheses(intl, locationUnavailableText, errorText);\n    positionUnavailable = true;\n    statusMessages.push(optionTitle);\n  }\n\n  // Add to the selection handler lookup (for use in onKeyDown)\n  locationSelectedLookup[itemIndex] = locationSelected;\n\n  if (!suppressNearby) {\n    // Create and add the option item to the menu items array\n    menuItems.push(\n      <Option\n        disabled={positionUnavailable}\n        icon={optionIcon}\n        id={getOptionId(itemIndex)}\n        isActive={itemIndex === activeIndex}\n        key={optionKey++}\n        onClick={locationSelected}\n        title={optionTitle}\n      />\n    );\n    if (!positionUnavailable) itemIndex++;\n  }\n  if (message) {\n    if (geocodedFeatures.length === 0) {\n      const icon = isFetching ? (\n        <S.Spinner size={ICON_SIZE} />\n      ) : (\n        <ExclamationCircle size={ICON_SIZE} />\n      );\n      menuItems.unshift(\n        <Option disabled icon={icon} key={optionKey++} title={message} />\n      );\n    }\n    statusMessages.push(message);\n  }\n\n  // Store the number of location-associated items for reference in the onKeyDown method\n  let menuItemCount = itemIndex;\n\n  /** the text input element * */\n  // Use this text for aria-label below.\n  const defaultPlaceholder = inputPlaceholder || locationType;\n  const placeholder =\n    currentPosition && currentPosition.fetching\n      ? intl.formatMessage({ id: \"otpUi.LocationField.fetchingLocation\" })\n      : defaultPlaceholder;\n  const hasNoEnabledOptions = menuItemCount === 0;\n  const isExpanded = isStatic || menuVisible;\n\n  const textControl = (\n    <S.Input\n      aria-activedescendant={\n        activeIndex !== null ? getOptionId(activeIndex) : null\n      }\n      aria-autocomplete=\"list\"\n      aria-controls={listBoxId}\n      aria-expanded={isExpanded}\n      aria-haspopup=\"listbox\"\n      aria-invalid={!isValid}\n      aria-label={defaultPlaceholder}\n      aria-required={isRequired}\n      autoFocus={autoFocus}\n      className={formControlClassname}\n      onChange={onTextInputChange}\n      onClick={handleTextInputClick}\n      onKeyDown={onKeyDown}\n      placeholder={placeholder}\n      ref={inputRef}\n      role=\"combobox\"\n      value={stateValue}\n    />\n  );\n\n  // Only include the clear ('X') button add-on if a location is selected\n  // or if the input field has text.\n  const clearButton =\n    showClearButton && location ? (\n      <S.ClearButton\n        aria-label={intl.formatMessage({\n          id: \"otpUi.LocationField.clearLocation\"\n        })}\n        onClick={onClearButtonClick}\n      >\n        {clearButtonIcon}\n      </S.ClearButton>\n    ) : null;\n\n  const ItemList = isStatic ? S.StaticMenuItemList : S.MenuItemList;\n\n  return (\n    <S.InputGroup className={className} onBlur={onBlurFormGroup} role=\"group\">\n      <S.DropdownButton\n        aria-controls={listBoxId}\n        aria-expanded={isExpanded}\n        aria-label={intl.formatMessage({\n          defaultMessage: \"Open the list of location suggestions\",\n          description:\n            \"Text to show as a a11y label for the button that opens the dropdown list of locations\",\n          id: \"otpUi.LocationField.suggestedLocationsLong\"\n        })}\n        onClick={onDropdownToggle}\n        tabIndex={-1}\n      >\n        <LocationIconComponent locationType={locationType} />\n      </S.DropdownButton>\n      {textControl}\n      {clearButton}\n      {/* Note: always render this status tag regardless of the open state,\n          so that assistive technologies correctly set up status monitoring. */}\n      <S.HiddenContent role=\"status\">\n        {/* However, only render the status if the menu is expanded, so that\n            assistive technology reminds user on how to navigate the options. */}\n        {isExpanded && (\n          <FormattedList\n            // eslint-disable-next-line react/style-prop-object\n            style=\"narrow\"\n            type=\"conjunction\"\n            value={statusMessages}\n          />\n        )}\n      </S.HiddenContent>\n      <ItemList\n        // Hide the list from screen readers if no enabled options are shown.\n        aria-hidden={hasNoEnabledOptions}\n        aria-label={intl.formatMessage({\n          defaultMessage: \"Suggested locations\",\n          description:\n            \"Text to show as a label for the dropdown list of locations\",\n          id: \"otpUi.LocationField.suggestedLocations\"\n        })}\n        id={listBoxId}\n      >\n        {isStatic ? (\n          menuItems.length > 0 ? ( // Show typing prompt to avoid empty screen\n            menuItems\n          ) : (\n            <S.MenuGroupHeader as=\"div\">\n              <FormattedMessage\n                defaultMessage=\"Begin typing to search for locations\"\n                description=\"Text to show as initial placeholder in location search field\"\n                id=\"otpUi.LocationField.beginTypingPrompt\"\n              />\n            </S.MenuGroupHeader>\n          )\n        ) : (\n          menuVisible && menuItems\n        )}\n      </ItemList>\n    </S.InputGroup>\n  );\n};\n\nexport default LocationField;\n\n// Rename styled components for export.\nexport { S as Styled };\n"],"file":"index.js"}