{"version":3,"sources":["../src/util.ts"],"names":["promises","fs","load","glob","path","shouldProcessFile","fileName","folder","includes","endsWith","isNotSpecialId","id","startsWith","exceptionFileName","sortSourceAndYmlFiles","argv","sortFile","parsedArg","parse","baseName","name","base","exceptionFiles","push","ext","locale","ymlFilesByLocale","ymlFilesForLocale","sourceFiles","allGlobPromises","allGlobs","allStatPromises","allStatFiles","i","length","arg","exceptionFile","dir","stat","Promise","allSettled","allStats","forEach","status","all","allFileLists","files","filter","f","loadYamlFile","filename","readFile","expandGroupIds","groups","Object","keys","reduce","result","group","concat","map","key","replace","combineExceptionFiles","allIgnoredIds","allGroups","file","rawJson","toString","jsonObject","JSON","ignoredIds","Set"],"mappings":";;;;;;;;AAAA,SAASA,QAAQ,IAAIC,EAArB,QAA+B,IAA/B;AACA,SAASC,IAAT,QAAqB,SAArB;AACA,OAAOC,IAAP,MAAiB,cAAjB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAQA,OAAO,SAASC,iBAAT,CAA2BC,QAA3B,EAA6CC,MAA7C,EAAsE;AAC3E,SACE,CAAC,CAACD,QAAQ,CAACE,QAAT,CAAkB,KAAlB,CAAD,IAA6BD,MAAM,CAACC,QAAP,CAAgB,KAAhB,CAA9B,KACA,CAACF,QAAQ,CAACE,QAAT,CAAkB,cAAlB,CADD,IAEA,CAACF,QAAQ,CAACG,QAAT,CAAkB,OAAlB,CAHH;AAKD;AAED;AACA;AACA;;AACA,OAAO,SAASC,cAAT,CAAwBC,EAAxB,EAA6C;AAClD,SAAO,CAACA,EAAE,CAACC,UAAH,CAAc,GAAd,CAAR;AACD;AAED,IAAMC,iBAAiB,GAAG,sBAA1B;AAEA;AACA;AACA;AACA;AACA;;AACA,gBAAsBC,qBAAtB;AAAA;AAAA;AA6EA;AACA;AACA;AACA;;;oFAhFO,iBACLC,IADK;AAAA,uDAQIC,QARJ;AAAA;AAAA;AAAA;AAAA;AAQIA,YAAAA,QARJ,sBAQaV,QARb,EAQqC;AACxC,kBAAMW,SAAS,GAAGb,IAAI,CAACc,KAAL,CAAWZ,QAAX,CAAlB;AACA,kBAAMa,QAAQ,GAAGF,SAAS,CAACG,IAA3B;;AACA,kBAAIH,SAAS,CAACI,IAAV,KAAmBR,iBAAvB,EAA0C;AACxCS,gBAAAA,cAAc,CAACC,IAAf,CAAoBjB,QAApB;AACD,eAFD,MAEO,IAAIW,SAAS,CAACO,GAAV,KAAkB,OAAtB,EAA+B,CACpC;AACD,eAFM,MAEA,IAAIP,SAAS,CAACO,GAAV,KAAkB,MAAtB,EAA8B;AACnC,oBAAMC,MAAM,GAAGN,QAAf;;AACA,oBAAI,CAACO,gBAAgB,CAACD,MAAD,CAArB,EAA+B;AAC7BC,kBAAAA,gBAAgB,CAACD,MAAD,CAAhB,GAA2B,EAA3B;AACD;;AACD,oBAAME,iBAAiB,GAAGD,gBAAgB,CAACD,MAAD,CAA1C;;AACA,oBAAI,CAACE,iBAAiB,CAACnB,QAAlB,CAA2BF,QAA3B,CAAL,EAA2C;AACzCqB,kBAAAA,iBAAiB,CAACJ,IAAlB,CAAuBjB,QAAvB;AACD;;AACDoB,gBAAAA,gBAAgB,CAACD,MAAD,CAAhB,CAAyBF,IAAzB,CAA8BjB,QAA9B;AACD,eAVM,MAUA,IAAI,CAACsB,WAAW,CAACpB,QAAZ,CAAqBF,QAArB,CAAL,EAAqC;AAC1CsB,gBAAAA,WAAW,CAACL,IAAZ,CAAiBjB,QAAjB;AACD;AACF,aA5BI;;AAGCsB,YAAAA,WAHD,GAGe,EAHf;AAICF,YAAAA,gBAJD,GAIoB,EAJpB;AAKCJ,YAAAA,cALD,GAKkB,EALlB,EAOL;;AAuBA;AACA;AACA;AACA;AACMO,YAAAA,eAlCD,GAkCmB,EAlCnB;AAmCCC,YAAAA,QAnCD,GAmCY,EAnCZ;AAoCCC,YAAAA,eApCD,GAoCmB,EApCnB;AAqCCC,YAAAA,YArCD,GAqCgB,EArChB;;AAsCL,iBAASC,CAAT,GAAa,CAAb,EAAgBA,CAAC,GAAGlB,IAAI,CAACmB,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpC;AACME,cAAAA,GAF8B,GAExBpB,IAAI,CAACkB,CAAD,CAFoB;;AAIpC,kBAAIE,GAAG,CAAC1B,QAAJ,CAAa,MAAb,CAAJ,EAA0B;AACxB;AACAO,gBAAAA,QAAQ,CAACmB,GAAD,CAAR,CAFwB,CAGxB;;AACMlB,gBAAAA,SAJkB,GAINb,IAAI,CAACc,KAAL,CAAWiB,GAAX,CAJM;AAKlBC,gBAAAA,aALkB,aAKCnB,SAAS,CAACoB,GALX,cAKkBxB,iBALlB;AAMxBmB,gBAAAA,YAAY,CAACT,IAAb,CAAkBa,aAAlB;AACAL,gBAAAA,eAAe,CAACR,IAAhB,CAAqBtB,EAAE,CAACqC,IAAH,CAAQF,aAAR,CAArB;AACD,eARD,MAQO;AACL;AACA;AACAN,gBAAAA,QAAQ,CAACP,IAAT,CAAcY,GAAd;AACAN,gBAAAA,eAAe,CAACN,IAAhB,CAAqBpB,IAAI,WAAIgC,GAAJ,iCAAzB;AACD;AACF;;AAxDI;AAAA,mBA0DkBI,OAAO,CAACC,UAAR,CAAmBT,eAAnB,CA1DlB;;AAAA;AA0DCU,YAAAA,QA1DD;AA2DLA,YAAAA,QAAQ,CAACC,OAAT,CAAiB,UAACJ,IAAD,EAAOL,CAAP,EAAa;AAC5B,kBAAIK,IAAI,CAACK,MAAL,KAAgB,WAApB,EAAiC;AAC/B3B,gBAAAA,QAAQ,CAACgB,YAAY,CAACC,CAAD,CAAb,CAAR;AACD;AACF,aAJD;AA3DK;AAAA,mBAiEsBM,OAAO,CAACK,GAAR,CAAYf,eAAZ,CAjEtB;;AAAA;AAiECgB,YAAAA,YAjED;AAkELA,YAAAA,YAAY,CAACH,OAAb,CAAqB,UAACI,KAAD,EAAQb,CAAR;AAAA,qBACnBa,KAAK,CAACC,MAAN,CAAa,UAAAC,CAAC;AAAA,uBAAI3C,iBAAiB,CAAC2C,CAAD,EAAIlB,QAAQ,CAACG,CAAD,CAAZ,CAArB;AAAA,eAAd,EAAqDS,OAArD,CAA6D1B,QAA7D,CADmB;AAAA,aAArB;AAlEK,6CAsEE;AACLM,cAAAA,cAAc,EAAdA,cADK;AAELM,cAAAA,WAAW,EAAXA,WAFK;AAGLF,cAAAA,gBAAgB,EAAhBA;AAHK,aAtEF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAiFP,gBAAsBuB,YAAtB;AAAA;AAAA;AAIA;AACA;AACA;;;2EANO,kBAA4BC,QAA5B;AAAA;AAAA;AAAA;AAAA;AAAA,2BACEhD,IADF;AAAA;AAAA,mBACaD,EAAE,CAACkD,QAAH,CAAYD,QAAZ,CADb;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAOP,OAAO,SAASE,cAAT,CAAwBC,MAAxB,EAAoE;AACzE,SAAOC,MAAM,CAACC,IAAP,CAAYF,MAAZ,EAAoBG,MAApB,CACL,UAACC,MAAD,EAASC,KAAT;AAAA,WACED,MAAM,CAACE,MAAP,CAAcN,MAAM,CAACK,KAAD,CAAN,CAAcE,GAAd,CAAkB,UAAAC,GAAG;AAAA,aAAIH,KAAK,CAACI,OAAN,CAAc,GAAd,EAAmBD,GAAnB,CAAJ;AAAA,KAArB,CAAd,CADF;AAAA,GADK,EAGL,EAHK,CAAP;AAKD;;AAOD;AACA;AACA;AACA,gBAAsBE,qBAAtB;AAAA;AAAA;;;oFAAO,kBACLzC,cADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAGD0C,YAAAA,aAHC,GAGe,EAHf;AAICC,YAAAA,SAJD,GAIa,EAJb;AAAA;AAAA,mBAKC1B,OAAO,CAACK,GAAR,CACJtB,cAAc,CAACsC,GAAf;AAAA,kFAAmB,kBAAMM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACMjE,EAAE,CAACkD,QAAH,CAAYe,IAAZ,CADN;;AAAA;AACXC,wBAAAA,OADW,kBACyBC,QADzB;AAEXC,wBAAAA,UAFW,GAEEC,IAAI,CAACpD,KAAL,CAAWiD,OAAX,CAFF;AAGjBH,wBAAAA,aAAa,GAAGA,aAAa,CAACL,MAAd,CAAqBU,UAAU,CAACE,UAAhC,CAAhB;;AACA,4BAAIF,UAAU,CAAChB,MAAf,EAAuB;AACrBY,0BAAAA,SAAS,CAAC1C,IAAV,CAAe8C,UAAU,CAAChB,MAA1B;AACD;;AANgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAnB;;AAAA;AAAA;AAAA;AAAA,gBADI,CALD;;AAAA;AAeCA,YAAAA,MAfD,GAeUY,SAAS,CAACT,MAAV,CACb,UAACC,MAAD,EAASC,KAAT;AAAA,qDAAyBD,MAAzB,GAAoCC,KAApC;AAAA,aADa,EAEb,EAFa,CAfV;AAAA,8CAmBE;AACLL,cAAAA,MAAM,EAANA,MADK;AAEL;AACAkB,cAAAA,UAAU,EAAE,IAAIC,GAAJ,CAAQR,aAAR;AAHP,aAnBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import { promises as fs } from \"fs\";\nimport { load } from \"js-yaml\";\nimport glob from \"glob-promise\";\nimport path from \"path\";\n\nexport interface SourceFilesAndYmlFilesByLocale {\n  exceptionFiles: string[];\n  sourceFiles: string[];\n  ymlFilesByLocale: Record<string, string[]>;\n}\n\nexport function shouldProcessFile(fileName: string, folder: string): boolean {\n  return (\n    (!fileName.includes(\"/__\") || folder.includes(\"/__\")) &&\n    !fileName.includes(\"node_modules\") &&\n    !fileName.endsWith(\".d.ts\")\n  );\n}\n\n/**\n * @returns true if the id is not special or reserved (i.e. doesn't start with \"_\").\n */\nexport function isNotSpecialId(id: string): boolean {\n  return !id.startsWith(\"_\");\n}\n\nconst exceptionFileName = \"i18n-exceptions.json\";\n\n/**\n * Helper function that sorts yml, source, and exception files into different buckets.\n * @param argv The value from process.argv.\n * @returns A composite object with a list for yml files by locale, and a list for source files.\n */\nexport async function sortSourceAndYmlFiles(\n  argv: string[]\n): Promise<SourceFilesAndYmlFilesByLocale> {\n  const sourceFiles = [];\n  const ymlFilesByLocale = {};\n  const exceptionFiles = [];\n\n  // Places the given file into the source, yml, or ignoredId file bucket above.\n  function sortFile(fileName: string): void {\n    const parsedArg = path.parse(fileName);\n    const baseName = parsedArg.name;\n    if (parsedArg.base === exceptionFileName) {\n      exceptionFiles.push(fileName);\n    } else if (parsedArg.ext === \".json\") {\n      // Ignore other JSON files.\n    } else if (parsedArg.ext === \".yml\") {\n      const locale = baseName;\n      if (!ymlFilesByLocale[locale]) {\n        ymlFilesByLocale[locale] = [];\n      }\n      const ymlFilesForLocale = ymlFilesByLocale[locale];\n      if (!ymlFilesForLocale.includes(fileName)) {\n        ymlFilesForLocale.push(fileName);\n      }\n      ymlFilesByLocale[locale].push(fileName);\n    } else if (!sourceFiles.includes(fileName)) {\n      sourceFiles.push(fileName);\n    }\n  }\n\n  // Note: reminder that node.js provides the first two argv values:\n  // - argv[0] is the name of the executable file.\n  // - argv[1] is the path to the script file.\n  // - argv[2] and beyond are the files and folders passed to the script.\n  const allGlobPromises = [];\n  const allGlobs = [];\n  const allStatPromises = [];\n  const allStatFiles = [];\n  for (let i = 2; i < argv.length; i++) {\n    // List the files recursively (glob) for this folder.\n    const arg = argv[i];\n\n    if (arg.endsWith(\".yml\")) {\n      // If argument ends with .yml, treat as a file.\n      sortFile(arg);\n      // Also include any exception file in that folder, if it exists.\n      const parsedArg = path.parse(arg);\n      const exceptionFile = `${parsedArg.dir}/${exceptionFileName}`;\n      allStatFiles.push(exceptionFile);\n      allStatPromises.push(fs.stat(exceptionFile));\n    } else {\n      // Otherwise, it is a folder, and use glob to get files recursively.\n      // For glob argument info, see their docs at https://github.com/ahmadnassri/node-glob-promise#api.\n      allGlobs.push(arg);\n      allGlobPromises.push(glob(`${arg}/**/*.{{j,t}s{,x},yml,json}`));\n    }\n  }\n\n  const allStats = await Promise.allSettled(allStatPromises);\n  allStats.forEach((stat, i) => {\n    if (stat.status === \"fulfilled\") {\n      sortFile(allStatFiles[i]);\n    }\n  });\n\n  const allFileLists = await Promise.all(allGlobPromises);\n  allFileLists.forEach((files, i) =>\n    files.filter(f => shouldProcessFile(f, allGlobs[i])).forEach(sortFile)\n  );\n\n  return {\n    exceptionFiles,\n    sourceFiles,\n    ymlFilesByLocale\n  };\n}\n\n/**\n * Load yaml from a file into a js object\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport async function loadYamlFile(filename: string): Promise<any> {\n  return load(await fs.readFile(filename));\n}\n\n/**\n * Convert a groups object into a list of corresponding message ids.\n */\nexport function expandGroupIds(groups: Record<string, string[]>): string[] {\n  return Object.keys(groups).reduce(\n    (result, group) =>\n      result.concat(groups[group].map(key => group.replace(\"*\", key))),\n    []\n  );\n}\n\ninterface CheckException {\n  groups: Record<string, string[]>;\n  ignoredIds: Set<string>;\n}\n\n/**\n * Combines exception files into a single exception object.\n */\nexport async function combineExceptionFiles(\n  exceptionFiles: string[]\n): Promise<CheckException> {\n  let allIgnoredIds = [];\n  const allGroups = [];\n  await Promise.all(\n    exceptionFiles.map(async file => {\n      const rawJson = (await fs.readFile(file)).toString();\n      const jsonObject = JSON.parse(rawJson);\n      allIgnoredIds = allIgnoredIds.concat(jsonObject.ignoredIds);\n      if (jsonObject.groups) {\n        allGroups.push(jsonObject.groups);\n      }\n    })\n  );\n  const groups = allGroups.reduce(\n    (result, group) => ({ ...result, ...group }),\n    {}\n  );\n  return {\n    groups,\n    // Make sure ignored ids are unique\n    ignoredIds: new Set(allIgnoredIds)\n  };\n}\n"],"file":"util.js"}