{"version":3,"sources":["../src/validate-i18n.ts"],"names":["flatten","extract","combineExceptionFiles","expandGroupIds","isNotSpecialId","loadYamlFile","sortSourceAndYmlFiles","checkLocale","ymlFilesForLocale","messageIdsFromCode","ignoredIds","groups","idsChecked","Set","idsNotInCode","allI18nPromises","map","Promise","all","allI18nMessages","idsFromGroupsArray","idsFromGroups","idsFromGroupsNotInYml","forEach","i18nMessages","flattenedMessages","filter","id","add","messageKeys","Object","keys","has","includes","push","missingIdsForLocale","checkI18n","exceptionFiles","sourceFiles","ymlFilesByLocale","JSON","messagesFromCode","parse","englishUsYmls","console","log","length","errorCount","locale","error","process","exit","run","argv","then"],"mappings":"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","sourcesContent":["/* eslint-disable no-console */\nimport flatten from \"flat\";\nimport { extract } from \"@formatjs/cli\";\n\nimport {\n  combineExceptionFiles,\n  expandGroupIds,\n  isNotSpecialId,\n  loadYamlFile,\n  sortSourceAndYmlFiles\n} from \"./util\";\n\n/**\n * Computes the unused ids from code or YML file for a given locale.\n */\nexport async function checkLocale(\n  ymlFilesForLocale: string[],\n  messageIdsFromCode: string[],\n  ignoredIds: Set<string>,\n  groups: Record<string, string[]>\n): Promise<{\n  idsNotInCode: string[];\n  missingIdsForLocale: string[];\n}> {\n  const idsChecked = new Set();\n  const idsNotInCode = [];\n\n  const allI18nPromises = ymlFilesForLocale.map(loadYamlFile);\n  const allI18nMessages = await Promise.all(allI18nPromises);\n\n  const idsFromGroupsArray = expandGroupIds(groups);\n  const idsFromGroups = new Set(idsFromGroupsArray);\n  const idsFromGroupsNotInYml = new Set(idsFromGroupsArray);\n\n  allI18nMessages.forEach(i18nMessages => {\n    const flattenedMessages = flatten(i18nMessages);\n\n    // Message ids from code must be present in yml (except those in ignoredIds).\n    messageIdsFromCode\n      .filter(id => flattenedMessages[id])\n      .forEach(id => idsChecked.add(id));\n\n    // Message ids from yml must be present in code,\n    // except those starting with \"_\" or those in ignoredIds or groups.\n    const messageKeys = Object.keys(flattenedMessages);\n    messageKeys\n      .filter(isNotSpecialId)\n      .filter(id => !ignoredIds.has(id))\n      .filter(id => !idsFromGroups.has(id))\n      .filter(id => !messageIdsFromCode.includes(id))\n      .filter(id => !idsNotInCode.includes(id))\n      .forEach(id => idsNotInCode.push(id));\n\n    // Filter out ids from groups found in YML file.\n    messageKeys.forEach(id => idsFromGroupsNotInYml.delete(id));\n  });\n\n  // Collect ids in code and groups not found in yml.\n  const missingIdsForLocale = [...messageIdsFromCode, ...idsFromGroupsNotInYml]\n    .filter(id => !ignoredIds.has(id))\n    .filter(id => !idsChecked.has(id));\n\n  return {\n    idsNotInCode,\n    missingIdsForLocale\n  };\n}\n\n/**\n * Checks message ids completeness between code and yml files for all locales in repo.\n */\nasync function checkI18n({ exceptionFiles, sourceFiles, ymlFilesByLocale }) {\n  // Gather message ids from code.\n  const messagesFromCode = JSON.parse(await extract(sourceFiles, {}));\n  const messageIdsFromCode = messagesFromCode\n    ? Object.keys(messagesFromCode)\n    : [];\n  const englishUsYmls = ymlFilesByLocale[\"en-US\"];\n  console.log(\n    `Checking ${messageIdsFromCode.length} strings from ${\n      englishUsYmls ? Object.keys(englishUsYmls).length : 0\n    } message files against ${sourceFiles.length} source files (${\n      exceptionFiles.length\n    } exception files).`\n  );\n\n  const { groups, ignoredIds } = await combineExceptionFiles(exceptionFiles);\n  let errorCount = 0;\n  // For each locale, check that all ids in messages are in the yml files.\n  // Accessorily, log message ids from yml files that are not used in the code.\n  await Promise.all(\n    Object.keys(ymlFilesByLocale).map(async locale => {\n      const { idsNotInCode, missingIdsForLocale } = await checkLocale(\n        ymlFilesByLocale[locale],\n        messageIdsFromCode,\n        ignoredIds,\n        groups\n      );\n\n      // Print errors.\n      missingIdsForLocale.forEach(id => {\n        console.error(`Message '${id}' is missing from locale ${locale}.`);\n      });\n      idsNotInCode.forEach(id => {\n        console.error(\n          `Message '${id}' from locale ${locale} is not used in code.`\n        );\n      });\n      errorCount += missingIdsForLocale.length + idsNotInCode.length;\n    })\n  );\n\n  console.log(`There were ${errorCount} error(s).`);\n  if (errorCount > 0) {\n    process.exit(1);\n  }\n}\n\n/**\n * Checks that message ids gathered by the formatjs extract command are present in the specified folder(s).\n * Produces a process error if message ids are present in a language but not another,\n * or if message ids are found in i18n yml files but not in the code or vice-versa.\n * This script is shipped as part of a package so it can be used in other code bases as needed.\n */\nexport default function run(): Promise<void> {\n  return sortSourceAndYmlFiles(process.argv).then(checkI18n);\n}\n"],"file":"validate-i18n.js"}