{"version":3,"sources":["../src/collect-i18n-messages.ts"],"names":["extract","flatten","combineExceptionFiles","expandGroupIds","isNotSpecialId","loadYamlFile","sortSourceAndYmlFiles","buildTranslationTable","ymlFilesByLocale","messagesFromCode","groups","messageIdsFromCode","Object","keys","allLocales","messageData","idsFromGroups","messagesToReport","Promise","all","map","locale","allI18nPromises","allI18nMessages","allI18nMessagesFlattened","forEach","i18nMessages","flattenedMessages","filter","id","description","message","trim","undefined","collectAndPrintOutMessages","exceptionFiles","sourceFiles","JSON","parse","console","log","join","row","messages","run","process","argv","then"],"mappings":"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","sourcesContent":["/* eslint-disable no-console */\nimport { extract } from \"@formatjs/cli\";\nimport flatten from \"flat\";\n\nimport {\n  combineExceptionFiles,\n  expandGroupIds,\n  isNotSpecialId,\n  loadYamlFile,\n  sortSourceAndYmlFiles\n} from \"./util\";\n\n// The data that corresponds to rows in the CSV output.\ntype MessageData = Record<\n  string,\n  Record<string, string> & {\n    description: string;\n  }\n>;\n\n/**\n * Collect all messages in a translation table.\n */\nexport async function buildTranslationTable(\n  ymlFilesByLocale: Record<string, string[]>,\n  messagesFromCode: Record<string, { description?: string }>,\n  groups: Record<string, string[]>\n): Promise<MessageData> {\n  const messageIdsFromCode = Object.keys(messagesFromCode);\n  const allLocales = Object.keys(ymlFilesByLocale);\n\n  // Will contain id, description, and a column for each selected language.\n  const messageData: MessageData = {};\n\n  const idsFromGroups = expandGroupIds(groups);\n  const messagesToReport = [...messageIdsFromCode, ...idsFromGroups];\n\n  await Promise.all(\n    allLocales.map(async locale => {\n      const allI18nPromises = ymlFilesByLocale[locale].map(loadYamlFile);\n      const allI18nMessages = await Promise.all(allI18nPromises);\n      let allI18nMessagesFlattened = {};\n\n      allI18nMessages.forEach(i18nMessages => {\n        const flattenedMessages: Record<string, string> = flatten(i18nMessages);\n        allI18nMessagesFlattened = {\n          ...allI18nMessagesFlattened,\n          ...flattenedMessages\n        };\n      });\n\n      messagesToReport.filter(isNotSpecialId).forEach(id => {\n        const { description } = messagesFromCode[id] || {};\n        const message = allI18nMessagesFlattened[id]?.trim() || undefined;\n\n        if (!messageData[id]) {\n          messageData[id] = {\n            description\n          };\n        }\n        messageData[id][locale] = message;\n      });\n    })\n  );\n\n  return messageData;\n}\n\n/**\n * Collect all messages and create a formatted output.\n */\nasync function collectAndPrintOutMessages({\n  exceptionFiles,\n  sourceFiles,\n  ymlFilesByLocale\n}) {\n  // Gather message ids from code.\n  const messagesFromCode = JSON.parse(await extract(sourceFiles, {}));\n  const { groups } = await combineExceptionFiles(exceptionFiles);\n\n  // Will contain id, description, and a column for each selected language.\n  const messageData = await buildTranslationTable(\n    ymlFilesByLocale,\n    messagesFromCode,\n    groups\n  );\n\n  const allLocales = Object.keys(ymlFilesByLocale);\n  // CSV heading\n  console.log(`ID,Description,${allLocales.join(\",\")}`);\n\n  Object.keys(messageData).forEach(id => {\n    const row = messageData[id];\n    const messages = allLocales.map(locale => row[locale]);\n    console.log(`${id},\"${row.description}\",\"${messages.join('\",\"')}\"`);\n  });\n}\n\n/**\n * This script collects message ids gathered by the formatjs extract command in the specified files and folder(s)\n * and creates a CSV file with the id, description, and messages in the selected language(s).\n * This script is shipped as part of a package so it can be used in other code bases as needed.\n */\nexport default function run(): Promise<void> {\n  return sortSourceAndYmlFiles(process.argv).then(collectAndPrintOutMessages);\n}\n"],"file":"collect-i18n-messages.js"}