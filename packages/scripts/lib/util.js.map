{"version":3,"sources":["../src/util.ts"],"names":["shouldProcessFile","fileName","folder","includes","endsWith","isNotSpecialId","id","startsWith","exceptionFileName","sortSourceAndYmlFiles","argv","sourceFiles","ymlFilesByLocale","exceptionFiles","sortFile","parsedArg","path","parse","baseName","name","base","push","ext","locale","ymlFilesForLocale","allGlobPromises","allGlobs","allStatPromises","allStatFiles","i","length","arg","exceptionFile","dir","fs","stat","allStats","Promise","allSettled","forEach","status","allFileLists","all","files","filter","f","loadYamlFile","filename","readFile","expandGroupIds","groups","Object","keys","reduce","result","group","concat","map","key","replace","combineExceptionFiles","allIgnoredIds","allGroups","file","rawJson","toString","jsonObject","JSON","ignoredIds","Set"],"mappings":"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","sourcesContent":["import { promises as fs } from \"fs\";\nimport { load } from \"js-yaml\";\nimport glob from \"glob-promise\";\nimport path from \"path\";\n\nexport interface SourceFilesAndYmlFilesByLocale {\n  exceptionFiles: string[];\n  sourceFiles: string[];\n  ymlFilesByLocale: Record<string, string[]>;\n}\n\nexport function shouldProcessFile(fileName: string, folder: string): boolean {\n  return (\n    (!fileName.includes(\"/__\") || folder.includes(\"/__\")) &&\n    !fileName.includes(\"node_modules\") &&\n    !fileName.endsWith(\".d.ts\")\n  );\n}\n\n/**\n * @returns true if the id is not special or reserved (i.e. doesn't start with \"_\").\n */\nexport function isNotSpecialId(id: string): boolean {\n  return !id.startsWith(\"_\");\n}\n\nconst exceptionFileName = \"i18n-exceptions.json\";\n\n/**\n * Helper function that sorts yml, source, and exception files into different buckets.\n * @param argv The value from process.argv.\n * @returns A composite object with a list for yml files by locale, and a list for source files.\n */\nexport async function sortSourceAndYmlFiles(\n  argv: string[]\n): Promise<SourceFilesAndYmlFilesByLocale> {\n  const sourceFiles = [];\n  const ymlFilesByLocale = {};\n  const exceptionFiles = [];\n\n  // Places the given file into the source, yml, or ignoredId file bucket above.\n  function sortFile(fileName: string): void {\n    const parsedArg = path.parse(fileName);\n    const baseName = parsedArg.name;\n    if (parsedArg.base === exceptionFileName) {\n      exceptionFiles.push(fileName);\n    } else if (parsedArg.ext === \".json\") {\n      // Ignore other JSON files.\n    } else if (parsedArg.ext === \".yml\") {\n      const locale = baseName;\n      if (!ymlFilesByLocale[locale]) {\n        ymlFilesByLocale[locale] = [];\n      }\n      const ymlFilesForLocale = ymlFilesByLocale[locale];\n      if (!ymlFilesForLocale.includes(fileName)) {\n        ymlFilesForLocale.push(fileName);\n      }\n      ymlFilesByLocale[locale].push(fileName);\n    } else if (!sourceFiles.includes(fileName)) {\n      sourceFiles.push(fileName);\n    }\n  }\n\n  // Note: reminder that node.js provides the first two argv values:\n  // - argv[0] is the name of the executable file.\n  // - argv[1] is the path to the script file.\n  // - argv[2] and beyond are the files and folders passed to the script.\n  const allGlobPromises = [];\n  const allGlobs = [];\n  const allStatPromises = [];\n  const allStatFiles = [];\n  for (let i = 2; i < argv.length; i++) {\n    // List the files recursively (glob) for this folder.\n    const arg = argv[i];\n\n    if (arg.endsWith(\".yml\")) {\n      // If argument ends with .yml, treat as a file.\n      sortFile(arg);\n      // Also include any exception file in that folder, if it exists.\n      const parsedArg = path.parse(arg);\n      const exceptionFile = `${parsedArg.dir}/${exceptionFileName}`;\n      allStatFiles.push(exceptionFile);\n      allStatPromises.push(fs.stat(exceptionFile));\n    } else {\n      // Otherwise, it is a folder, and use glob to get files recursively.\n      // For glob argument info, see their docs at https://github.com/ahmadnassri/node-glob-promise#api.\n      allGlobs.push(arg);\n      allGlobPromises.push(glob(`${arg}/**/*.{{j,t}s{,x},yml,json}`));\n    }\n  }\n\n  const allStats = await Promise.allSettled(allStatPromises);\n  allStats.forEach((stat, i) => {\n    if (stat.status === \"fulfilled\") {\n      sortFile(allStatFiles[i]);\n    }\n  });\n\n  const allFileLists = await Promise.all(allGlobPromises);\n  allFileLists.forEach((files, i) =>\n    files.filter(f => shouldProcessFile(f, allGlobs[i])).forEach(sortFile)\n  );\n\n  return {\n    exceptionFiles,\n    sourceFiles,\n    ymlFilesByLocale\n  };\n}\n\n/**\n * Load yaml from a file into a js object\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport async function loadYamlFile(filename: string): Promise<any> {\n  return load(await fs.readFile(filename));\n}\n\n/**\n * Convert a groups object into a list of corresponding message ids.\n */\nexport function expandGroupIds(groups: Record<string, string[]>): string[] {\n  return Object.keys(groups).reduce(\n    (result, group) =>\n      result.concat(groups[group].map(key => group.replace(\"*\", key))),\n    []\n  );\n}\n\ninterface CheckException {\n  groups: Record<string, string[]>;\n  ignoredIds: Set<string>;\n}\n\n/**\n * Combines exception files into a single exception object.\n */\nexport async function combineExceptionFiles(\n  exceptionFiles: string[]\n): Promise<CheckException> {\n  let allIgnoredIds = [];\n  const allGroups = [];\n  await Promise.all(\n    exceptionFiles.map(async file => {\n      const rawJson = (await fs.readFile(file)).toString();\n      const jsonObject = JSON.parse(rawJson);\n      allIgnoredIds = allIgnoredIds.concat(jsonObject.ignoredIds);\n      if (jsonObject.groups) {\n        allGroups.push(jsonObject.groups);\n      }\n    })\n  );\n  const groups = allGroups.reduce(\n    (result, group) => ({ ...result, ...group }),\n    {}\n  );\n  return {\n    groups,\n    // Make sure ignored ids are unique\n    ignoredIds: new Set(allIgnoredIds)\n  };\n}\n"],"file":"util.js"}