{"version":3,"sources":["../src/collect-i18n-messages.ts"],"names":["buildTranslationTable","ymlFilesByLocale","messagesFromCode","groups","messageIdsFromCode","Object","keys","allLocales","messageData","idsFromGroups","messagesToReport","Promise","all","map","locale","allI18nPromises","loadYamlFile","allI18nMessages","allI18nMessagesFlattened","forEach","i18nMessages","flattenedMessages","filter","isNotSpecialId","id","description","message","trim","undefined","collectAndPrintOutMessages","exceptionFiles","sourceFiles","JSON","parse","console","log","join","row","messages","run","process","argv","then"],"mappings":"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","sourcesContent":["/* eslint-disable no-console */\nimport { extract } from \"@formatjs/cli\";\nimport flatten from \"flat\";\n\nimport {\n  combineExceptionFiles,\n  expandGroupIds,\n  isNotSpecialId,\n  loadYamlFile,\n  sortSourceAndYmlFiles\n} from \"./util\";\n\n// The data that corresponds to rows in the CSV output.\ntype MessageData = Record<\n  string,\n  Record<string, string> & {\n    description: string;\n  }\n>;\n\n/**\n * Collect all messages in a translation table.\n */\nexport async function buildTranslationTable(\n  ymlFilesByLocale: Record<string, string[]>,\n  messagesFromCode: Record<string, { description?: string }>,\n  groups: Record<string, string[]>\n): Promise<MessageData> {\n  const messageIdsFromCode = Object.keys(messagesFromCode);\n  const allLocales = Object.keys(ymlFilesByLocale);\n\n  // Will contain id, description, and a column for each selected language.\n  const messageData: MessageData = {};\n\n  const idsFromGroups = expandGroupIds(groups);\n  const messagesToReport = [...messageIdsFromCode, ...idsFromGroups];\n\n  await Promise.all(\n    allLocales.map(async locale => {\n      const allI18nPromises = ymlFilesByLocale[locale].map(loadYamlFile);\n      const allI18nMessages = await Promise.all(allI18nPromises);\n      let allI18nMessagesFlattened = {};\n\n      allI18nMessages.forEach(i18nMessages => {\n        const flattenedMessages: Record<string, string> = flatten(i18nMessages);\n        allI18nMessagesFlattened = {\n          ...allI18nMessagesFlattened,\n          ...flattenedMessages\n        };\n      });\n\n      messagesToReport.filter(isNotSpecialId).forEach(id => {\n        const { description } = messagesFromCode[id] || {};\n        const message = allI18nMessagesFlattened[id]?.trim() || undefined;\n\n        if (!messageData[id]) {\n          messageData[id] = {\n            description\n          };\n        }\n        messageData[id][locale] = message;\n      });\n    })\n  );\n\n  return messageData;\n}\n\n/**\n * Collect all messages and create a formatted output.\n */\nasync function collectAndPrintOutMessages({\n  exceptionFiles,\n  sourceFiles,\n  ymlFilesByLocale\n}) {\n  // Gather message ids from code.\n  const messagesFromCode = JSON.parse(await extract(sourceFiles, {}));\n  const { groups } = await combineExceptionFiles(exceptionFiles);\n\n  // Will contain id, description, and a column for each selected language.\n  const messageData = await buildTranslationTable(\n    ymlFilesByLocale,\n    messagesFromCode,\n    groups\n  );\n\n  const allLocales = Object.keys(ymlFilesByLocale);\n  // CSV heading\n  console.log(`ID,Description,${allLocales.join(\",\")}`);\n\n  Object.keys(messageData).forEach(id => {\n    const row = messageData[id];\n    const messages = allLocales.map(locale => row[locale]);\n    console.log(`${id},\"${row.description}\",\"${messages.join('\",\"')}\"`);\n  });\n}\n\n/**\n * This script collects message ids gathered by the formatjs extract command in the specified files and folder(s)\n * and creates a CSV file with the id, description, and messages in the selected language(s).\n * This script is shipped as part of a package so it can be used in other code bases as needed.\n */\nexport default function run(): Promise<void> {\n  return sortSourceAndYmlFiles(process.argv).then(collectAndPrintOutMessages);\n}\n"],"file":"collect-i18n-messages.js"}