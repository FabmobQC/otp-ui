{"version":3,"sources":["../src/validate-i18n.ts"],"names":["checkLocale","ymlFilesForLocale","messageIdsFromCode","ignoredIds","groups","idsChecked","Set","idsNotInCode","allI18nPromises","map","loadYamlFile","allI18nMessages","Promise","all","idsFromGroupsArray","idsFromGroups","idsFromGroupsNotInYml","forEach","i18nMessages","flattenedMessages","filter","id","add","messageKeys","Object","keys","isNotSpecialId","has","includes","push","delete","missingIdsForLocale","checkI18n","exceptionFiles","sourceFiles","ymlFilesByLocale","messagesFromCode","JSON","parse","englishUsYmls","console","log","length","errorCount","locale","error","process","exit","run","argv","then"],"mappings":"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","sourcesContent":["/* eslint-disable no-console */\nimport flatten from \"flat\";\nimport { extract } from \"@formatjs/cli\";\n\nimport {\n  combineExceptionFiles,\n  expandGroupIds,\n  isNotSpecialId,\n  loadYamlFile,\n  sortSourceAndYmlFiles\n} from \"./util\";\n\n/**\n * Computes the unused ids from code or YML file for a given locale.\n */\nexport async function checkLocale(\n  ymlFilesForLocale: string[],\n  messageIdsFromCode: string[],\n  ignoredIds: Set<string>,\n  groups: Record<string, string[]>\n): Promise<{\n  idsNotInCode: string[];\n  missingIdsForLocale: string[];\n}> {\n  const idsChecked = new Set();\n  const idsNotInCode = [];\n\n  const allI18nPromises = ymlFilesForLocale.map(loadYamlFile);\n  const allI18nMessages = await Promise.all(allI18nPromises);\n\n  const idsFromGroupsArray = expandGroupIds(groups);\n  const idsFromGroups = new Set(idsFromGroupsArray);\n  const idsFromGroupsNotInYml = new Set(idsFromGroupsArray);\n\n  allI18nMessages.forEach(i18nMessages => {\n    const flattenedMessages = flatten(i18nMessages);\n\n    // Message ids from code must be present in yml (except those in ignoredIds).\n    messageIdsFromCode\n      .filter(id => flattenedMessages[id])\n      .forEach(id => idsChecked.add(id));\n\n    // Message ids from yml must be present in code,\n    // except those starting with \"_\" or those in ignoredIds or groups.\n    const messageKeys = Object.keys(flattenedMessages);\n    messageKeys\n      .filter(isNotSpecialId)\n      .filter(id => !ignoredIds.has(id))\n      .filter(id => !idsFromGroups.has(id))\n      .filter(id => !messageIdsFromCode.includes(id))\n      .filter(id => !idsNotInCode.includes(id))\n      .forEach(id => idsNotInCode.push(id));\n\n    // Filter out ids from groups found in YML file.\n    messageKeys.forEach(id => idsFromGroupsNotInYml.delete(id));\n  });\n\n  // Collect ids in code and groups not found in yml.\n  const missingIdsForLocale = [...messageIdsFromCode, ...idsFromGroupsNotInYml]\n    .filter(id => !ignoredIds.has(id))\n    .filter(id => !idsChecked.has(id));\n\n  return {\n    idsNotInCode,\n    missingIdsForLocale\n  };\n}\n\n/**\n * Checks message ids completeness between code and yml files for all locales in repo.\n */\nasync function checkI18n({ exceptionFiles, sourceFiles, ymlFilesByLocale }) {\n  // Gather message ids from code.\n  const messagesFromCode = JSON.parse(await extract(sourceFiles, {}));\n  const messageIdsFromCode = messagesFromCode\n    ? Object.keys(messagesFromCode)\n    : [];\n  const englishUsYmls = ymlFilesByLocale[\"en-US\"];\n  console.log(\n    `Checking ${messageIdsFromCode.length} strings from ${\n      englishUsYmls ? Object.keys(englishUsYmls).length : 0\n    } message files against ${sourceFiles.length} source files (${\n      exceptionFiles.length\n    } exception files).`\n  );\n\n  const { groups, ignoredIds } = await combineExceptionFiles(exceptionFiles);\n  let errorCount = 0;\n  // For each locale, check that all ids in messages are in the yml files.\n  // Accessorily, log message ids from yml files that are not used in the code.\n  await Promise.all(\n    Object.keys(ymlFilesByLocale).map(async locale => {\n      const { idsNotInCode, missingIdsForLocale } = await checkLocale(\n        ymlFilesByLocale[locale],\n        messageIdsFromCode,\n        ignoredIds,\n        groups\n      );\n\n      // Print errors.\n      missingIdsForLocale.forEach(id => {\n        console.error(`Message '${id}' is missing from locale ${locale}.`);\n      });\n      idsNotInCode.forEach(id => {\n        console.error(\n          `Message '${id}' from locale ${locale} is not used in code.`\n        );\n      });\n      errorCount += missingIdsForLocale.length + idsNotInCode.length;\n    })\n  );\n\n  console.log(`There were ${errorCount} error(s).`);\n  if (errorCount > 0) {\n    process.exit(1);\n  }\n}\n\n/**\n * Checks that message ids gathered by the formatjs extract command are present in the specified folder(s).\n * Produces a process error if message ids are present in a language but not another,\n * or if message ids are found in i18n yml files but not in the code or vice-versa.\n * This script is shipped as part of a package so it can be used in other code bases as needed.\n */\nexport default function run(): Promise<void> {\n  return sortSourceAndYmlFiles(process.argv).then(checkI18n);\n}\n"],"file":"validate-i18n.js"}