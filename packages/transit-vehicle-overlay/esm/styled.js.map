{"version":3,"sources":["../src/styled.ts"],"names":["memoize","coreUtils","styled","css","getForegroundColor","props","foregroundColor","getColorProps","options","defaultColor","routeColor","vehicle","backgroundColor","alphaHex","route","getMostReadableTextColor","Circle","div","RotatingCircle","heading","defaultCaretHeight","defaultCaretHalfWidth","Caret","rotate","InnerCaret","OuterCaret","routeColorBackgroundCss","withRouteColorBackground","Container","innerCss","display","attrs","getStyledContainer","IconContainer","padding","pixels"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,gBAApB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AAEA,OAAOC,MAAP,IAAiBC,GAAjB,QAA4B,mBAA5B;;AAkBA;AACA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,KAAK;AAAA,SAAIA,KAAK,CAACC,eAAV;AAAA,CAAhC;AAEA;AACA;AACA;;;AACA,SAASC,aAAT,CAAuBC,OAAvB,EAA8D;AAC5D,MAAMC,YAAY,GAAG,CAAAD,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEC,YAAT,KAAyB,SAA9C;AAEA,SAAO,UAACJ,KAAD,EAA8C;AACnD,QAAMK,UAAU,GAAGL,KAAK,CAACM,OAAN,CAAcD,UAAd,IAA4BD,YAA/C;AACA,WAAO;AACLG,MAAAA,eAAe,YAAKF,UAAL,SAAkB,CAAAF,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEK,QAAT,KAAqB,EAAvC,CADV;AAELP,MAAAA,eAAe,EAAEL,SAAS,CAACa,KAAV,CAAgBC,wBAAhB,CAAyCL,UAAzC;AAFZ,KAAP;AAID,GAND;AAOD;AAED;AACA;AACA;;;AACA,OAAO,IAAMM,MAAM,GAAGd,MAAM,CAACe,GAAV;AAAA;AAAA;AAAA,4MAAZ;AAgBP;AACA;AACA;;AACA,OAAO,IAAMC,cAAc,GAAGhB,MAAM,CAACc,MAAD,CAAT;AAAA;AAAA;AAAA,mCACL,UAAAX,KAAK;AAAA,SAAIA,KAAK,CAACM,OAAN,CAAcQ,OAAd,IAAyB,CAA7B;AAAA,CADA,CAApB;AAIP,OAAO,IAAMC,kBAAkB,GAAG,CAA3B;AACP,OAAO,IAAMC,qBAAqB,GAAG,CAA9B;AAEP;AACA;AACA;;AACA,OAAO,IAAMC,KAAK,GAAGpB,MAAM,CAACe,GAAV;AAAA;AAAA;AAAA,mSAKI,UAAAZ,KAAK;AAAA,SAAIA,KAAK,CAACkB,MAAN,IAAgB,CAApB;AAAA,CALT,EASGH,kBATH,EAUCC,qBAVD,EAWEA,qBAXF,EAeC,CAACA,qBAfF,CAAX,C,CAsBP;;AACA,OAAO,IAAMG,UAAU,GAAGtB,MAAM,CAACoB,KAAD,CAAT;AAAA;AAAA;AAAA,QAAhB;AAEP,OAAO,IAAMG,UAAU,GAAGvB,MAAM,CAACoB,KAAD,CAAT;AAAA;AAAA;AAAA,+BAEZ,CAACF,kBAFW,CAAhB;AAMP,IAAMM,uBAAuB,GAAGvB,GAAH,6GACb,UAAAE,KAAK;AAAA,SAAIA,KAAK,CAACO,eAAV;AAAA,CADQ,EAElBR,kBAFkB,EAKjBA,kBALiB,EASzBoB,UATyB,EAWApB,kBAXA,CAA7B;AAgBA;AACA;AACA;AACA;;AACA,OAAO,SAASuB,wBAAT,CACLC,SADK,EAELpB,OAFK,EAGD;AACJ,MAAMqB,QAAQ,GACZ,CAAArB,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEsB,OAAT,MAAqB,SAArB,GACI3B,GADJ,oBAGUuB,uBAHV,IAMIA,uBAPN;AASA,SAAOxB,MAAM,CAAC0B,SAAD,CAAN,CAAkBG,KAAlB,CAAwBxB,aAAa,CAACC,OAAD,CAArC,CAAP;AAAA;AAAA;AAAA,eACIqB,QADJ;AAGD;AAED;AACA;AACA;;AACA,OAAO,IAAMG,kBAAkB,GAAGhC,OAAO,CACvC,UACEiC,aADF,EAEEC,OAFF,EAGEC,MAHF,EAIK;AACH,SAAOjC,MAAM,CAAC+B,aAAD,CAAb;AAAA;AAAA;AAAA,wEACYE,MADZ,EAEiBA,MAFjB,EAGaD,OAHb,EAIWC,MAJX;AAMD,CAZsC,CAAlC","sourcesContent":["import memoize from \"lodash.memoize\";\nimport coreUtils from \"@opentripplanner/core-utils\";\nimport { FC } from \"react\";\nimport styled, { css } from \"styled-components\";\n\nimport { VehicleComponentProps } from \"./types\";\n\ninterface RouteColorBackgroundOptions {\n  /**\n   * The alpha component of a color in hexadecimal.\n   */\n  alphaHex?: string;\n  defaultColor?: string;\n  display?: \"fixed\" | \"onhover\";\n}\n\ninterface ColorProps {\n  backgroundColor: string;\n  foregroundColor: string;\n}\n\n// CSS helper functions.\nconst getForegroundColor = props => props.foregroundColor;\n\n/**\n * Computes color props to simplify the CSS filler code.\n */\nfunction getColorProps(options?: RouteColorBackgroundOptions) {\n  const defaultColor = options?.defaultColor || \"#9999ee\";\n\n  return (props: VehicleComponentProps): ColorProps => {\n    const routeColor = props.vehicle.routeColor || defaultColor;\n    return {\n      backgroundColor: `${routeColor}${options?.alphaHex || \"\"}`,\n      foregroundColor: coreUtils.route.getMostReadableTextColor(routeColor)\n    };\n  };\n}\n\n/**\n * Displays a circle with basic settings.\n */\nexport const Circle = styled.div`\n  background: #eee;\n  border: 2px solid #333;\n  /* Set an arbitrary large border radius so that the circle stays that way.\n     (should render fine in Chromium, Firefox, and Safari) */\n  border-radius: 10000px;\n  cursor: default;\n  height: 15px;\n  line-height: 15px;\n  padding: 15px;\n  position: relative;\n  text-align: center;\n  transition: all 0.2s ease-in-out;\n  width: 15px;\n`;\n\n/**\n * Displays a circle with contents that is rotated according to vehicle heading.\n */\nexport const RotatingCircle = styled(Circle)<VehicleComponentProps>`\n  transform: rotate(${props => props.vehicle.heading || 0}deg);\n`;\n\nexport const defaultCaretHeight = 5;\nexport const defaultCaretHalfWidth = 6;\n\n/**\n * Renders a caret that fits within another component and indicates the heading.\n */\nexport const Caret = styled.div<{ rotate: number }>`\n  height: 100%;\n  left: 0;\n  position: absolute;\n  top: 0;\n  transform: rotate(${props => props.rotate || 0}deg);\n  width: 100%;\n\n  &::before {\n    border-bottom: ${defaultCaretHeight}px solid #333;\n    border-left: ${defaultCaretHalfWidth}px solid transparent;\n    border-right: ${defaultCaretHalfWidth}px solid transparent;\n    content: \"\";\n    height: 0;\n    left: 50%;\n    margin-left: ${-defaultCaretHalfWidth}px;\n    position: absolute;\n    top: 0px;\n    width: 0;\n  }\n`;\n\n// Inner/OuterCaret are used for determining whether to apply foreground color with route colors.\nexport const InnerCaret = styled(Caret)``;\n\nexport const OuterCaret = styled(Caret)`\n  &::before {\n    top: ${-defaultCaretHeight}px;\n  }\n`;\n\nconst routeColorBackgroundCss = css<ColorProps>`\n  background: ${props => props.backgroundColor};\n  color: ${getForegroundColor};\n  & svg path,\n  & svg text {\n    fill: ${getForegroundColor};\n  }\n  /* Change the caret foreground color only if it is an inner caret\n     (i.e. renders over the route color background being set above). */\n  ${InnerCaret} {\n    &::before {\n      border-bottom-color: ${getForegroundColor};\n    }\n  }\n`;\n\n/**\n * Applies the vehicle's route color to a component\n * and a foreground color that is contrast-compatible with that color.\n */\nexport function withRouteColorBackground(\n  Container: FC,\n  options?: RouteColorBackgroundOptions\n): FC {\n  const innerCss =\n    options?.display === \"onhover\"\n      ? css`\n          &:hover {\n            ${routeColorBackgroundCss}\n          }\n        `\n      : routeColorBackgroundCss;\n\n  return styled(Container).attrs(getColorProps(options))`\n    ${innerCss}\n  `;\n}\n\n/**\n * Generate and memoize a container component once per set of container/pixels/padding parameters.\n */\nexport const getStyledContainer = memoize(\n  (\n    IconContainer: FC<VehicleComponentProps>,\n    padding: number,\n    pixels: number\n  ) => {\n    return styled(IconContainer)<VehicleComponentProps>`\n      height: ${pixels}px;\n      line-height: ${pixels}px;\n      padding: ${padding}px;\n      width: ${pixels}px;\n    `;\n  }\n);\n"],"file":"styled.js"}