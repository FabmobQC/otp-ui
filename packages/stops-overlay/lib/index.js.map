{"version":3,"sources":["../src/index.tsx"],"names":["StopsOverlay","props","current","map","activeStop","color","highlightedStop","highlightedStopColor","minZoom","refreshStops","setLocation","setViewedStop","stops","visible","clickedStop","setClickedStop","onLayerEnter","getCanvas","style","cursor","onLayerLeave","onLayerClick","event","features","properties","onZoomEnd","viewState","zoom","STOP_LAYERS","forEach","stopLayer","on","off","setNullStop","flexStops","filter","stop","geometries","geoJson","stopsGeoJSON","type","flex","highlighted","id","geometry","coordinates","lon","lat","length","location"],"mappings":"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","sourcesContent":["import { Popup } from \"@opentripplanner/base-map\";\nimport {\n  MapLocationActionArg,\n  Stop,\n  StopEventHandler\n} from \"@opentripplanner/types\";\nimport { EventData } from \"mapbox-gl\";\nimport { Layer, Source, useMap } from \"react-map-gl\";\nimport React, { useCallback, useEffect, useMemo, useState } from \"react\";\n\nimport StopPopup from \"@opentripplanner/map-popup\";\nimport { isGeoJsonFlex } from \"./utils\";\n\ntype Props = {\n  /**\n   * Custom stop color passed from user config\n   */\n  color?: string;\n  /**\n   * An optional id to override the active stop with\n   */\n  activeStop?: string;\n  /**\n   * An optional id to highlight a stop on the map\n   */\n  highlightedStop?: string;\n  /**\n   * A color to use for the highlighted stop\n   */\n  highlightedStopColor?: string;\n  /**\n   * The list of stops to create stop markers for.\n   */\n  stops?: Stop[];\n\n  /**\n   * Whether or not to display the overlay\n   */\n  visible?: boolean;\n  /**\n   * The lowest zoom level the stop markers should be visible at\n   */\n  minZoom?: number;\n  /**\n   * A method to be fired when the map is moved\n   */\n  refreshStops?: () => void;\n  /**\n   * A method fired when a stop is selected as from or to in the popup\n   */\n  setLocation?: (location: MapLocationActionArg) => void;\n  /**\n   * A method fired when the stop viewer is opened in the popup\n   */\n  setViewedStop?: StopEventHandler;\n};\n\n/**\n * An overlay to view a collection of stops.\n */\nconst StopsOverlay = (props: Props): JSX.Element => {\n  const { current: map } = useMap();\n  const {\n    activeStop,\n    color,\n    highlightedStop,\n    highlightedStopColor,\n    minZoom,\n    refreshStops,\n    setLocation,\n    setViewedStop,\n    stops,\n    visible\n  } = props;\n  const [clickedStop, setClickedStop] = useState(null);\n\n  const onLayerEnter = useCallback(() => {\n    map.getCanvas().style.cursor = \"pointer\";\n  }, [map]);\n\n  const onLayerLeave = useCallback(() => {\n    map.getCanvas().style.cursor = \"\";\n  }, [map]);\n\n  const onLayerClick = useCallback(\n    (event: EventData) => {\n      setClickedStop(event.features?.[0].properties);\n    },\n    [setClickedStop]\n  );\n\n  const onZoomEnd = useCallback(\n    (event: EventData) => {\n      if (event.viewState.zoom < minZoom) setClickedStop(null);\n    },\n    [setClickedStop, minZoom]\n  );\n\n  useEffect(() => {\n    setClickedStop(activeStop);\n  }, [activeStop]);\n\n  useEffect(() => {\n    const STOP_LAYERS = [\"stops\", \"flex-stops\"];\n\n    STOP_LAYERS.forEach(stopLayer => {\n      map?.on(\"mouseenter\", stopLayer, onLayerEnter);\n      map?.on(\"mouseleave\", stopLayer, onLayerLeave);\n      map?.on(\"click\", stopLayer, onLayerClick);\n    });\n\n    if (visible && refreshStops) refreshStops();\n\n    map?.on(\"zoomend\", onZoomEnd);\n\n    // Remove event handlers when component unmounts\n    // (prevents error messages about performing state updates on unmounted component)\n    return () => {\n      STOP_LAYERS.forEach(stopLayer => {\n        map?.off(\"mouseenter\", stopLayer, onLayerEnter);\n        map?.off(\"mouseleave\", stopLayer, onLayerLeave);\n        map?.off(\"click\", stopLayer, onLayerClick);\n      });\n      map?.off(\"zoomend\", onZoomEnd);\n    };\n  }, [map, visible]);\n\n  const setNullStop = useCallback(() => {\n    setClickedStop(null);\n  }, [clickedStop]);\n\n  const flexStops = useMemo(\n    () => stops.filter(stop => isGeoJsonFlex(stop?.geometries?.geoJson)),\n    [stops]\n  );\n\n  const stopsGeoJSON: GeoJSON.FeatureCollection = useMemo(\n    () => ({\n      type: \"FeatureCollection\",\n      features: stops.map(stop => ({\n        type: \"Feature\",\n        properties: {\n          ...stop,\n          flex: isGeoJsonFlex(stop?.geometries?.geoJson),\n          highlighted: stop.id === highlightedStop\n        },\n        geometry: { type: \"Point\", coordinates: [stop.lon, stop.lat] }\n      }))\n    }),\n    [stops, highlightedStop]\n  );\n\n  // Don't render if no map or no stops are defined.\n  // (ZoomBasedMarkers will also not render below the minimum zoom threshold defined in the symbols prop.)\n  if (visible === false || !stops || stops.length === 0) {\n    // Null can't be returned here -- react-map-gl dislikes null values as children\n    return <></>;\n  }\n\n  return (\n    <>\n      <Source type=\"geojson\" data={stopsGeoJSON}>\n        <Layer\n          id=\"stops\"\n          minzoom={minZoom || 10}\n          paint={{\n            \"circle-color\": color || \"#fff\",\n            \"circle-opacity\": 0.9,\n            // TODO: Use tinycolor to generate outline with appropriate contrast.\n            \"circle-stroke-color\": color ? \"#fff\" : \"#333\",\n            \"circle-stroke-width\": 2\n          }}\n          type=\"circle\"\n        />\n        <Layer\n          filter={[\"==\", \"highlighted\", true]}\n          id=\"higlightedStop\"\n          paint={{\n            \"circle-color\": highlightedStopColor || \"#ff0000\",\n            \"circle-opacity\": 1,\n            \"circle-radius\": 10,\n            // TODO: Use tinycolor to generate outline with appropriate contrast.\n            \"circle-stroke-color\": color ? \"#fff\" : \"#333\",\n            \"circle-stroke-width\": 2\n          }}\n          type=\"circle\"\n        />\n        <Layer\n          filter={[\"==\", \"flex\", true]}\n          id=\"flex-stops\"\n          paint={{\n            \"circle-color\": [\"get\", \"color\"],\n            \"circle-opacity\": 0.9,\n            \"circle-stroke-color\": \"#333\",\n            \"circle-stroke-width\": 2\n          }}\n          type=\"circle\"\n        />\n      </Source>\n      {clickedStop && (\n        <Popup\n          latitude={clickedStop.lat}\n          longitude={clickedStop.lon}\n          maxWidth=\"100%\"\n          onClose={setNullStop}\n        >\n          <StopPopup\n            setLocation={location => {\n              setNullStop();\n              setLocation(location);\n            }}\n            setViewedStop={stop => {\n              setNullStop();\n              setViewedStop(stop);\n            }}\n            entity={clickedStop}\n          />\n        </Popup>\n      )}\n      {flexStops.map(stop => (\n        <Source\n          data={(stop.geometries.geoJson as unknown) as GeoJSON.Feature}\n          id={stop.id}\n          key={stop.id}\n          type=\"geojson\"\n        >\n          {/* TODO:  add support for overriding layer styles */}\n          <Layer\n            id={stop.id}\n            paint={{\n              \"fill-color\": stop.color,\n              \"fill-opacity\": 0.5,\n              \"fill-outline-color\": stop.color\n            }}\n            type=\"fill\"\n          />\n          <Layer\n            id={`${stop.id}-outline`}\n            layout={{ \"line-join\": \"round\", \"line-cap\": \"round\" }}\n            paint={{\n              \"line-color\": stop.color,\n              \"line-opacity\": 1,\n              \"line-width\": 4\n            }}\n            type=\"line\"\n          />\n        </Source>\n      ))}\n    </>\n  );\n};\n\nexport default StopsOverlay;\n\nexport { Props as StopProps };\n"],"file":"index.js"}