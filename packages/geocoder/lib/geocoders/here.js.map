{"version":3,"sources":["../../src/geocoders/here.ts"],"names":["hereResultTypeToPeliasLayerMap","houseNumber","place","convertHereToGeojson","hereFeature","scoring","categories","address","resultType","title","position","extraFields","confidence","queryScore","addendum","geometry","type","coordinates","lng","lat","properties","country","countryName","country_a","countryCode","country_code","county","housenumber","label","layer","locality","city","name","neighbourhood","district","postalcode","postalCode","region","state","source","street","HereGeocoder","Geocoder","rewriteReverseResponse","items","point","geocoderConfig","reverseUseFeatureCollection","features","map","firstItem","rawGeocodedFeature","rewriteAutocompleteResponse","response","filter","item","rewriteSearchResponse"],"mappings":"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","sourcesContent":["// Prettier does not support typescript annotation\n// eslint-disable-next-line prettier/prettier\nimport type { Feature } from \"geojson\"\nimport type { HereResponse, Item } from \"../apis/here/types\";\nimport type { MultiGeocoderResponse, SingleOrMultiGeocoderResponse } from \"./types\";\n\nimport Geocoder from \"./abstract-geocoder\";\n\nconst hereResultTypeToPeliasLayerMap = {\n  houseNumber: \"address\",\n  place: \"venue\"\n};\n\nconst convertHereToGeojson = (hereFeature: Item): Feature => {\n  const { scoring, categories, address, resultType, title, position } = hereFeature;\n  const extraFields: { confidence?: number; addendum?: any } = {};\n  if (scoring) {\n    extraFields.confidence = scoring.queryScore;\n  }\n  if (categories) {\n    extraFields.addendum = {\n      categories\n    };\n  }\n\n  return {\n    geometry: {\n      type: \"Point\",\n      coordinates: [position.lng, position.lat]\n    },\n    properties: {\n      country: address.countryName,\n      country_a: address.countryCode,\n      country_code: address.countryCode,\n      county: address.county,\n      housenumber: address.houseNumber,\n      label: address.label,\n      layer: hereResultTypeToPeliasLayerMap[resultType]\n        ? hereResultTypeToPeliasLayerMap[resultType]\n        : resultType,\n      ...extraFields,\n      locality: address.city,\n      name: title,\n      neighbourhood: address.district,\n      postalcode: address.postalCode,\n      region: address.state,\n      source: \"here\",\n      street: address.street\n    },\n    type: \"Feature\"\n  };\n};\n\nexport default class HereGeocoder extends Geocoder {\n  rewriteReverseResponse({ items, point }: HereResponse): SingleOrMultiGeocoderResponse {\n    if (this.geocoderConfig?.reverseUseFeatureCollection) {\n      return {\n        features: items.map(convertHereToGeojson),\n        type: \"FeatureCollection\",\n      }\n    } \n    // Render the result as a single geocoder response\n    const firstItem = items[0];\n    return {\n      ...point,\n      name: firstItem.title,\n      rawGeocodedFeature: convertHereToGeojson(firstItem)\n    }\n    \n  }\n\n  rewriteAutocompleteResponse(response: HereResponse): MultiGeocoderResponse {\n    const { items } = response;\n    return {\n      features: items\n      // Here has various types of responses, some of which are not locations.\n      // We only want the actual places, so throw out any without a position.\n      ?.filter(item => !!item.position)\n      .map(convertHereToGeojson),\n      type: \"FeatureCollection\"\n    };\n  }\n\n  rewriteSearchResponse({ items }: HereResponse): MultiGeocoderResponse {\n    return {\n      features: items.map(convertHereToGeojson),\n      type: \"FeatureCollection\"\n    };\n  }\n}\n"],"file":"here.js"}