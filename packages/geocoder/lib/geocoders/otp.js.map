{"version":3,"sources":["../../src/geocoders/otp.ts"],"names":["OTPGeocoder","Geocoder","getAutocompleteQuery","query","baseUrl","geocoderConfig","url","rewriteAutocompleteResponse","response","features","results","map","stop","geometry","type","coordinates","coordinate","lon","lat","id","properties","layer","source","modes","name","label","code"],"mappings":";;;;;;;;;AAIA;;AAJA;AACA;;AAMA;AACA;AACA;AACe,MAAMA,WAAN,SAA0BC,yBAA1B,CAAmC;AAChDC,EAAAA,oBAAoB,CAACC,KAAD,EAA8C;AAChE,UAAM;AACJC,MAAAA;AADI,QAEF,KAAKC,cAFT;AAGA,WAAO;AACLC,MAAAA,GAAG,EAAEF,OADA;AAEL,SAAGD;AAFE,KAAP;AAID;;AAGDI,EAAAA,2BAA2B,CAACC,QAAD,EAAuD;AAAA;;AAChF,WAAO;AACHC,MAAAA,QAAQ,EAAED,QAAF,aAAEA,QAAF,4CAAEA,QAAQ,CAAEE,OAAZ,sDAAE,kBAAmBC,GAAnB,CAAuBC,IAAI,KAAK;AACtCC,QAAAA,QAAQ,EAAE;AAAEC,UAAAA,IAAI,EAAE,OAAR;AAAiBC,UAAAA,WAAW,EAAE,CAACH,IAAI,CAACI,UAAL,CAAgBC,GAAjB,EAAsBL,IAAI,CAACI,UAAL,CAAgBE,GAAtC;AAA9B,SAD4B;AAEtCC,QAAAA,EAAE,EAAEP,IAAI,CAACO,EAF6B;AAGtC;AACA;AACAC,QAAAA,UAAU,EAAE;AAAEC,UAAAA,KAAK,EAAE,OAAT;AAAkBC,UAAAA,MAAM,EAAE,KAA1B;AAAiCC,UAAAA,KAAK,EAAEX,IAAI,CAACW,KAA7C;AAAoDC,UAAAA,IAAI,EAAEZ,IAAI,CAACY,IAA/D;AAAqEC,UAAAA,KAAK,EAAG,GAAEb,IAAI,CAACY,IAAK,KAAIZ,IAAI,CAACc,IAAK;AAAvG,SAL0B;AAMtCZ,QAAAA,IAAI,EAAE;AANgC,OAAL,CAA3B,CADP;AASLA,MAAAA,IAAI,EAAE;AATD,KAAP;AAWD;;AAxB+C","sourcesContent":["// Prettier does not support typescript annotation\n// eslint-disable-next-line prettier/prettier\nimport type { AutocompleteQuery, MultiGeocoderResponse } from \"./types\";\n\nimport Geocoder from \"./abstract-geocoder\";\nimport { OTPGeocoderResponse } from \"../apis/otp\";\n\n/**\n * Allows fetching results from OTP instance with the geocoder endpoint enabled\n */\nexport default class OTPGeocoder extends Geocoder {\n  getAutocompleteQuery(query: AutocompleteQuery): AutocompleteQuery {\n    const {\n      baseUrl,\n    } = this.geocoderConfig;\n    return {\n      url: baseUrl,\n      ...query\n    };\n  }\n\n\n  rewriteAutocompleteResponse(response: OTPGeocoderResponse): MultiGeocoderResponse {\n    return {\n        features: response?.results?.map(stop => ({\n            geometry: { type: \"Point\", coordinates: [stop.coordinate.lon, stop.coordinate.lat] },\n            id: stop.id, \n            // TODO: if non-stops are supported, these need to be detected here and \n            // this layer property updated accordingly\n            properties: { layer: \"stops\", source: \"otp\", modes: stop.modes, name: stop.name, label: `${stop.name} (${stop.code})` }, \n            type: \"Feature\"\n        })),\n      type: \"FeatureCollection\"\n    };\n  }\n\n}\n"],"file":"otp.js"}