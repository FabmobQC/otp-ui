{"version":3,"sources":["../../src/geocoders/photon.ts"],"names":["generateLabel","properties","propertyList","forEach","propertyName","value","length","push","join","PhotonGeocoder","Geocoder","getAutocompleteQuery","query","baseUrl","boundary","focusPoint","options","size","geocoderConfig","url","undefined","getSearchQuery","rewriteAutocompleteResponse","response","features","label","rewriteReverseResponse","reverseUseFeatureCollection","lat","lon","point","firstFeature","name","rawGeocodedFeature","rewriteSearchResponse"],"mappings":"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","sourcesContent":["import { GeoJsonProperties } from \"geojson\";\nimport Geocoder from \"./abstract-geocoder\";\n// Prettier does not support typescript annotation\n// eslint-disable-next-line prettier/prettier\nimport type { AutocompleteQuery, SearchQuery } from \"..\";\nimport type { SingleOrMultiGeocoderResponse } from \"./types\";\nimport { MultiGeocoderResponse } from \"./types\";\n\nconst generateLabel = (properties: GeoJsonProperties): string => {\n  const propertyList = [];\n  [\"name\", \"street\", \"district\", \"state\", \"postcode\", \"city\", \"country\"].forEach((propertyName) => {\n    if (typeof properties[propertyName] === \"undefined\") {\n      return;\n    }\n    const value = `${properties[propertyName]}`;\n    if (value.length > 0) {\n      propertyList.push(value);\n    }\n  })\n  return propertyList.join(\", \");\n}\n\n/**\n * Geocoder implementation for the Photon geocoder.\n * See https://photon.io\n *\n * @extends Geocoder\n */\nexport default class PhotonGeocoder extends Geocoder {\n  getAutocompleteQuery(query: AutocompleteQuery): AutocompleteQuery {\n    const {\n      baseUrl,\n      boundary,\n      focusPoint,\n      options,\n      size,\n    } = this.geocoderConfig;\n    return {\n      boundary,\n      focusPoint,\n      options,\n      size,\n      url: baseUrl ? `${baseUrl}/autocomplete` : undefined,\n      ...query\n    };\n  }\n\n  getSearchQuery(query: SearchQuery): SearchQuery {\n    const {\n      baseUrl,\n      boundary,\n      focusPoint,\n      options,\n      size,\n    } = this.geocoderConfig;\n    return {\n      boundary,\n      focusPoint,\n      options,\n      size,\n      url: baseUrl ? `${baseUrl}/search` : undefined,\n      ...query\n    };\n  }\n\n  rewriteAutocompleteResponse(response: MultiGeocoderResponse): MultiGeocoderResponse {\n    response.features.forEach((value) => {\n      value.properties.label = generateLabel(value.properties);\n    })\n    return response;\n  }\n\n  /**\n   * Rewrite the response into an application-specific data format using the\n   * first feature returned from the geocoder.\n   */\n  rewriteReverseResponse(response): SingleOrMultiGeocoderResponse {\n    if (this.geocoderConfig?.reverseUseFeatureCollection) {\n      response.features.forEach((value) => {\n        value.properties.label = generateLabel(value.properties);\n      })\n      return response as MultiGeocoderResponse;\n    }\n\n    const { lat, lon } = response.point;\n\n    const firstFeature = response.features[0];\n    return {\n      lat,\n      lon,\n      name: generateLabel(firstFeature.properties),\n      rawGeocodedFeature: firstFeature\n    };\n  }\n\n  rewriteSearchResponse(response: MultiGeocoderResponse): MultiGeocoderResponse {\n    return this.rewriteAutocompleteResponse(response) as MultiGeocoderResponse;\n  }\n}\n"],"file":"photon.js"}