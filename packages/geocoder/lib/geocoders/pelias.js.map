{"version":3,"sources":["../../src/geocoders/pelias.ts"],"names":["DEFAULT_LAYERS","PeliasGeocoder","Geocoder","getAutocompleteQuery","query","apiKey","baseUrl","boundary","focusPoint","layers","options","sources","geocoderConfig","url","undefined","getSearchQuery","format","rewriteReverseResponse","response","reverseUseFeatureCollection","lat","lon","isomorphicMapzenSearchQuery","point","firstFeature","name","label","rawGeocodedFeature"],"mappings":";;;;;;;;;AAAA;;AAMA,MAAMA,cAAc,GAAG,mCAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACe,MAAMC,cAAN,SAA6BC,yBAA7B,CAAsC;AACnD;AACF;AACA;AACA;AACA;AACA;AACEC,EAAAA,oBAAoB,CAACC,KAAD,EAA8C;AAChE,UAAM;AACJC,MAAAA,MADI;AAEJC,MAAAA,OAFI;AAGJC,MAAAA,QAHI;AAIJC,MAAAA,UAJI;AAKJC,MAAAA,MAAM,GAAGT,cALL;AAMJU,MAAAA,OANI;AAOJC,MAAAA;AAPI,QAQF,KAAKC,cART;AASA,WAAO;AACLP,MAAAA,MADK;AAELE,MAAAA,QAFK;AAGLC,MAAAA,UAHK;AAILC,MAAAA,MAJK;AAKLC,MAAAA,OALK;AAML;AACA;AACA;AACAC,MAAAA,OAAO,EAAEA,OAAO,IAAI,IATf;AAULE,MAAAA,GAAG,EAAEP,OAAO,GAAI,GAAEA,OAAQ,eAAd,GAA+BQ,SAVtC;AAWL,SAAGV;AAXE,KAAP;AAaD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEW,EAAAA,cAAc,CAACX,KAAD,EAAkC;AAC9C,UAAM;AACJC,MAAAA,MADI;AAEJC,MAAAA,OAFI;AAGJC,MAAAA,QAHI;AAIJE,MAAAA,MAAM,GAAGT,cAJL;AAKJQ,MAAAA,UALI;AAMJE,MAAAA,OANI;AAOJC,MAAAA;AAPI,QAQF,KAAKC,cART;AASA,WAAO;AACLP,MAAAA,MADK;AAELE,MAAAA,QAFK;AAGLE,MAAAA,MAHK;AAILD,MAAAA,UAJK;AAKLE,MAAAA,OALK;AAML;AACA;AACA;AACAC,MAAAA,OAAO,EAAEA,OAAO,IAAI,IATf;AAULE,MAAAA,GAAG,EAAEP,OAAO,GAAI,GAAEA,OAAQ,SAAd,GAAyBQ,SAVhC;AAWLE,MAAAA,MAAM,EAAE,KAXH;AAWU;AACf,SAAGZ;AAZE,KAAP;AAcD;AAED;AACF;AACA;AACA;;;AACEa,EAAAA,sBAAsB,CAACC,QAAD,EAA0C;AAAA;;AAC9D,gCAAI,KAAKN,cAAT,iDAAI,qBAAqBO,2BAAzB,EAAsD,OAAOD,QAAP;AACtD,UAAM;AAAEE,MAAAA,GAAF;AAAOC,MAAAA;AAAP,QAAeH,QAAQ,CAACI,2BAAT,CAAqCC,KAA1D;AAEA,UAAMC,YAAY,GAAGN,QAAQ,CAAC,CAAD,CAA7B;AACA,WAAO;AACLE,MAAAA,GADK;AAELC,MAAAA,GAFK;AAGLI,MAAAA,IAAI,EAAED,YAAY,CAACE,KAHd;AAILC,MAAAA,kBAAkB,EAAEH;AAJf,KAAP;AAMD;;AA/EkD","sourcesContent":["import Geocoder from \"./abstract-geocoder\";\n// Prettier does not support typescript annotation\n// eslint-disable-next-line prettier/prettier\nimport type { AutocompleteQuery, SearchQuery } from \"..\";\nimport type { SingleOrMultiGeocoderResponse } from \"./types\";\n\nconst DEFAULT_LAYERS = \"address,venue,street,intersection\"\n\n/**\n * Geocoder implementation for the Pelias geocoder.\n * See https://pelias.io\n *\n * @extends Geocoder\n */\nexport default class PeliasGeocoder extends Geocoder {\n  /**\n   * Generate an autocomplete query specifically for the Pelias API. The\n   * `sources` parameter is a Pelias-specific option.\n   * This function fills in some more fields of the query\n   * from the existing values in the GeocoderConfig. \n   */\n  getAutocompleteQuery(query: AutocompleteQuery): AutocompleteQuery {\n    const {\n      apiKey,\n      baseUrl,\n      boundary,\n      focusPoint,\n      layers = DEFAULT_LAYERS,\n      options,\n      sources\n    } = this.geocoderConfig;\n    return {\n      apiKey,\n      boundary,\n      focusPoint,\n      layers,\n      options,\n      // explicitly send over null for sources if provided sources is not truthy\n      // in order to avoid default isomorphic-mapzen-search sources form being\n      // applied\n      sources: sources || null,\n      url: baseUrl ? `${baseUrl}/autocomplete` : undefined,\n      ...query\n    };\n  }\n\n  /**\n   * Generate a search query specifically for the Pelias API. The\n   * `sources` parameter is a Pelias-specific option.\n   * This function fills in some more fields of the query\n   * from the existing values in the GeocoderConfig. \n   */\n  getSearchQuery(query: SearchQuery): SearchQuery {\n    const {\n      apiKey,\n      baseUrl,\n      boundary,\n      layers = DEFAULT_LAYERS,\n      focusPoint,\n      options,\n      sources\n    } = this.geocoderConfig;\n    return {\n      apiKey,\n      boundary,\n      layers,\n      focusPoint,\n      options,\n      // explicitly send over null for sources if provided sources is not truthy\n      // in order to avoid default isomorphic-mapzen-search sources form being\n      // applied\n      sources: sources || null,\n      url: baseUrl ? `${baseUrl}/search` : undefined,\n      format: false, // keep as returned GeoJSON,\n      ...query\n    };\n  }\n\n  /**\n   * Rewrite the response into an application-specific data format using the\n   * first feature returned from the geocoder.\n   */\n  rewriteReverseResponse(response): SingleOrMultiGeocoderResponse {\n    if (this.geocoderConfig?.reverseUseFeatureCollection) return response\n    const { lat, lon } = response.isomorphicMapzenSearchQuery.point;\n\n    const firstFeature = response[0];\n    return {\n      lat,\n      lon,\n      name: firstFeature.label,\n      rawGeocodedFeature: firstFeature\n    };\n  }\n}\n"],"file":"pelias.js"}