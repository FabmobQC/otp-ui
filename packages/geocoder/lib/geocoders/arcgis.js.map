{"version":3,"sources":["../../src/geocoders/arcgis.js"],"names":["ArcGISGeocoder","Geocoder","getLocationFromGeocodedFeature","feature","geometry","prototype","api","search","magicKey","text","then","response","firstFeature","features","location","coordinates","name","properties","label","rawGeocodedFeature","rewriteAutocompleteResponse","filter","isCollection","map","rewriteReverseResponse","geocoderConfig","reverseUseFeatureCollection","query","lat","lon"],"mappings":";;;;;;;;;AAAA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACe,MAAMA,cAAN,SAA6BC,yBAA7B,CAAsC;AACnD;AACF;AACA;AACA;AACA;AACEC,EAAAA,8BAA8B,CAACC,OAAD,EAAU;AACtC;AACA;AACA,QAAIA,OAAO,CAACC,QAAZ,EAAsB;AACpB,aAAOH,0BAASI,SAAT,CAAmBH,8BAAnB,CAAkDC,OAAlD,CAAP;AACD,KALqC,CAMtC;AACA;;;AACA,WAAO,KAAKG,GAAL,CACJC,MADI,CACG;AAAEC,MAAAA,QAAQ,EAAEL,OAAO,CAACK,QAApB;AAA8BC,MAAAA,IAAI,EAAEN,OAAO,CAACM;AAA5C,KADH,EAEJC,IAFI,CAECC,QAAQ,IAAI;AAChB,YAAMC,YAAY,GAAGD,QAAQ,CAACE,QAAT,CAAkB,CAAlB,CAArB;AACA,YAAMC,QAAQ,GAAG,6BAAgBF,YAAY,CAACR,QAAb,CAAsBW,WAAtC,CAAjB;AACAD,MAAAA,QAAQ,CAACE,IAAT,GAAgBJ,YAAY,CAACK,UAAb,CAAwBC,KAAxC;AACAJ,MAAAA,QAAQ,CAACK,kBAAT,GAA8BP,YAA9B;AACA,aAAOE,QAAP;AACD,KARI,CAAP;AASD;AAED;AACF;AACA;AACA;;;AACEM,EAAAA,2BAA2B,CAACT,QAAD,EAAW;AACpC,WAAO;AACL;AACA;AACAE,MAAAA,QAAQ,EAAEF,QAAQ,CAACE,QAAT,CACPQ,MADO,CACAlB,OAAO,IAAI,CAACA,OAAO,CAACmB,YADpB,EAER;AAFQ,OAGPC,GAHO,CAGHpB,OAAO,KAAK,EACf,GAAGA,OADY;AAEfc,QAAAA,UAAU,EAAE;AACVC,UAAAA,KAAK,EAAEf,OAAO,CAACM;AADL;AAFG,OAAL,CAHJ;AAHL,KAAP;AAaD;AAED;AACF;AACA;AACA;;;AACEe,EAAAA,sBAAsB,CAACb,QAAD,EAAW;AAAA;;AAC/B,gCAAI,KAAKc,cAAT,iDAAI,qBAAqBC,2BAAzB,EAAsD,OAAOf,QAAP;AAEtD,UAAM;AAAEE,MAAAA,QAAF;AAAYc,MAAAA;AAAZ,QAAsBhB,QAA5B;AACA,UAAM;AAAEiB,MAAAA,GAAF;AAAOC,MAAAA;AAAP,QAAe,uBAAUF,KAAV,CAArB;AACA,UAAMf,YAAY,GAAGC,QAAQ,CAAC,CAAD,CAA7B;AACA,WAAO;AACLe,MAAAA,GADK;AAELC,MAAAA,GAFK;AAGLb,MAAAA,IAAI,EAAEJ,YAAY,CAACK,UAAb,CAAwBC,KAHzB;AAILC,MAAAA,kBAAkB,EAAEP;AAJf,KAAP;AAMD;;AA7DkD","sourcesContent":["import { fromCoordinates, normalize } from \"@conveyal/lonlat\";\n\nimport Geocoder from \"./abstract-geocoder\";\n\n/**\n * Geocoder implementation for the ArcGIS geocoder.\n * See https://developers.arcgis.com/rest/geocode/api-reference/overview-world-geocoding-service.htm\n *\n * @extends Geocoder\n */\nexport default class ArcGISGeocoder extends Geocoder {\n  /**\n   * Using the given magicKey and text, perform a search query to get detailed\n   * address and GPS data. Return data in an application-specific location\n   * format.\n   */\n  getLocationFromGeocodedFeature(feature) {\n    // If feature was returned from 'search' query, it will already be\n    // structured properly.\n    if (feature.geometry) {\n      return Geocoder.prototype.getLocationFromGeocodedFeature(feature);\n    }\n    // If feature returned from autocomplete, we need to use the magicKey to get\n    // the location's coordinates.\n    return this.api\n      .search({ magicKey: feature.magicKey, text: feature.text })\n      .then(response => {\n        const firstFeature = response.features[0];\n        const location = fromCoordinates(firstFeature.geometry.coordinates);\n        location.name = firstFeature.properties.label;\n        location.rawGeocodedFeature = firstFeature;\n        return location;\n      });\n  }\n\n  /**\n   * Rewrite an autocomplete response into an application specific data format.\n   * Also, filter out any results that are collections.\n   */\n  rewriteAutocompleteResponse(response) {\n    return {\n      // remove any autocomplete results that are collections\n      // (eg multiple Starbucks)\n      features: response.features\n        .filter(feature => !feature.isCollection)\n        // add label property so location-field can handle things ok\n        .map(feature => ({\n          ...feature,\n          properties: {\n            label: feature.text\n          }\n        }))\n    };\n  }\n\n  /**\n   * Rewrite the response into an application-specific data format using the\n   * first feature returned from the geocoder.\n   */\n  rewriteReverseResponse(response) {\n    if (this.geocoderConfig?.reverseUseFeatureCollection) return response;\n\n    const { features, query } = response;\n    const { lat, lon } = normalize(query);\n    const firstFeature = features[0];\n    return {\n      lat,\n      lon,\n      name: firstFeature.properties.label,\n      rawGeocodedFeature: firstFeature\n    };\n  }\n}\n"],"file":"arcgis.js"}