{"version":3,"sources":["../src/index.tsx"],"names":["DETAILED_MARKER_CUTOFF","getColorForStation","v","isFloatingCar","isFloatingVehicle","bikesAvailable","undefined","isFloatingBike","checkIfPositionInViewport","bounds","lat","lng","PADDING","sw","ne","_sw","_ne","VehicleRentalOverlay","companies","configCompanies","getStationName","id","refreshVehicles","setLocation","stations","visible","current","map","zoom","getZoom","getBounds","layerId","clickedVehicle","setClickedVehicle","setInterval","VEHICLE_LAYERS","forEach","stopLayer","on","getCanvas","style","cursor","event","features","properties","length","vehiclesGeoJSON","type","filter","vehicle","networks","includes","geometry","coordinates","x","y","JSON","stringify","color","station","location","s","cc","spacesAvailable","parse"],"mappings":"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","sourcesContent":["import { MarkerWithPopup, Popup } from \"@opentripplanner/base-map\";\nimport {\n  Company,\n  ConfiguredCompany,\n  MapLocationActionArg,\n  Station\n} from \"@opentripplanner/types\";\nimport { EventData } from \"mapbox-gl\";\nimport React, { useEffect, useState } from \"react\";\nimport { Layer, Source, useMap } from \"react-map-gl\";\n\nimport StationPopup from \"@opentripplanner/map-popup\";\nimport { BaseBikeRentalIcon, StationMarker } from \"./styled\";\n\n// TODO: Make configurable?\nconst DETAILED_MARKER_CUTOFF = 16;\n\nconst getColorForStation = (v: Station) => {\n  if (v.isFloatingCar) return \"#009cde\";\n  if (v.isFloatingVehicle) return \"#f5a729\";\n  // TODO: nicer color to match transitive\n  if (v.bikesAvailable !== undefined || v.isFloatingBike) return \"#f00\";\n  return \"gray\";\n};\n\nconst checkIfPositionInViewport = (\n  bounds: mapboxgl.LngLatBounds,\n  lat: number,\n  lng: number\n): boolean => {\n  const PADDING = 0.001;\n  // @ts-expect-error types appear to be wrong? version issue?\n  // eslint-disable-next-line no-underscore-dangle\n  const [sw, ne] = [bounds._sw, bounds._ne];\n  if (!sw || !ne) return false;\n\n  return (\n    lat >= sw.lat - PADDING &&\n    lat <= ne.lat + PADDING &&\n    lng >= sw.lng - PADDING &&\n    lng <= ne.lng + PADDING\n  );\n};\n\ntype Props = {\n  /**\n   * A list of companies that are applicable to just this instance of the\n   * overlay.\n   */\n  companies?: string[];\n  /**\n   * The entire companies config array.\n   */\n  configCompanies: ConfiguredCompany[];\n  /**\n   * An id, used to make this layer uniquely identifiable\n   */\n  id: string;\n  /**\n   * An optional custom function to create a string name of a particular vehicle\n   * rental station. This function takes two arguments of the configCompanies\n   * prop and a vehicle rental station. The function must return a string.\n   */\n  getStationName?: (configCompanies: Company[], station: Station) => string;\n  /**\n   * If specified, a function that will be triggered every 30 seconds whenever this layer is\n   * visible.\n   */\n  refreshVehicles?: () => void;\n  /**\n   * A callback for when a user clicks on setting this stop as either the from\n   * or to location of a new search.\n   *\n   * This will be dispatched with the following argument:\n   *\n   * ```js\n   *  {\n   *    location: {\n   *      lat: number,\n   *      lon: number,\n   *      name: string\n   *    },\n   *    locationType: \"from\" or \"to\"\n   *  }\n   * ```\n   */\n  setLocation?: (arg: MapLocationActionArg) => void;\n  /**\n   * A list of the vehicle rental stations specific to this overlay instance.\n   */\n  stations: Station[];\n  /**\n   * Whether the overlay is currently visible.\n   */\n  visible?: boolean;\n  /**\n   * TODO: Add props for overriding symbols?\n   */\n};\n\n/**\n * This vehicle rental overlay can be used to render vehicle rentals of various\n * types. This layer can be configured to show different styles of markers at\n * different zoom levels.\n */\nconst VehicleRentalOverlay = ({\n  companies,\n  configCompanies,\n  getStationName,\n  id,\n  refreshVehicles,\n  setLocation,\n  stations,\n  visible\n}: Props): JSX.Element => {\n  const { current: map } = useMap();\n  const zoom = map?.getZoom();\n  const bounds = map?.getBounds();\n\n  const layerId = `rental-vehicles-${id}`;\n  const [clickedVehicle, setClickedVehicle] = useState(null);\n\n  useEffect(() => {\n    // TODO: Make 30s configurable?\n    if (!refreshVehicles || typeof refreshVehicles !== \"function\") {\n      return;\n    }\n\n    refreshVehicles();\n    setInterval(refreshVehicles, 30_000);\n  }, [refreshVehicles]);\n\n  useEffect(() => {\n    const VEHICLE_LAYERS = [layerId];\n    VEHICLE_LAYERS.forEach(stopLayer => {\n      map?.on(\"mouseenter\", stopLayer, () => {\n        map.getCanvas().style.cursor = \"pointer\";\n      });\n      map?.on(\"mouseleave\", stopLayer, () => {\n        map.getCanvas().style.cursor = \"\";\n      });\n      map?.on(\"click\", stopLayer, (event: EventData) => {\n        setClickedVehicle(event.features?.[0].properties);\n      });\n    });\n  }, [map]);\n\n  // Don't render if no map or no stops are defined.\n  if (visible === false || !stations || stations.length === 0) {\n    // Null can't be returned here -- react-map-gl dislikes null values as children\n    return <></>;\n  }\n\n  const vehiclesGeoJSON: GeoJSON.FeatureCollection = {\n    type: \"FeatureCollection\",\n    features: stations\n      .filter(\n        vehicle =>\n          // Include specified companies only if companies is specified and network info is available\n          !companies ||\n          !vehicle.networks ||\n          companies.includes(vehicle.networks[0])\n      )\n      .map(vehicle => ({\n        type: \"Feature\",\n        geometry: { type: \"Point\", coordinates: [vehicle.x, vehicle.y] },\n        properties: {\n          ...vehicle,\n          networks: JSON.stringify(vehicle.networks),\n          \"stroke-width\":\n            vehicle.isFloatingBike || vehicle.isFloatingVehicle ? 1 : 2,\n          color: getColorForStation(vehicle)\n        }\n      }))\n  };\n\n  return (\n    <>\n      {zoom < DETAILED_MARKER_CUTOFF && (\n        <Source type=\"geojson\" data={vehiclesGeoJSON}>\n          <Layer\n            id={layerId}\n            paint={{\n              \"circle-color\": [\"get\", \"color\"],\n              \"circle-opacity\": 0.9,\n              \"circle-stroke-color\": \"#333\",\n              \"circle-stroke-width\": [\"get\", \"stroke-width\"]\n            }}\n            type=\"circle\"\n          />\n          {/* this is where we add the symbols layer. add a second layer that gets swapped in and out dynamically */}\n        </Source>\n      )}\n      {zoom >= DETAILED_MARKER_CUTOFF &&\n        stations\n          .filter(station =>\n            checkIfPositionInViewport(bounds, station.y, station.x)\n          )\n          .map(station => (\n            <MarkerWithPopup\n              key={station.id}\n              popupContents={\n                <StationPopup\n                  configCompanies={configCompanies}\n                  setLocation={location => {\n                    setClickedVehicle(null);\n                    setLocation(location);\n                  }}\n                  getEntityName={\n                    // @ts-expect-error no stop support. Avoid a breaking change\n                    getStationName && ((s, cc) => getStationName(cc, s))\n                  }\n                  entity={station}\n                />\n              }\n              position={[station.y, station.x]}\n            >\n              {station.bikesAvailable !== undefined &&\n              !station.isFloatingBike &&\n              !station.isFloatingVehicle &&\n              station.spacesAvailable !== undefined ? (\n                <BaseBikeRentalIcon\n                  percent={\n                    station?.bikesAvailable /\n                    (station?.bikesAvailable + station?.spacesAvailable)\n                  }\n                />\n              ) : (\n                <StationMarker width={12} color={getColorForStation(station)} />\n              )}\n            </MarkerWithPopup>\n          ))}\n      {clickedVehicle && (\n        <Popup\n          latitude={clickedVehicle.y}\n          longitude={clickedVehicle.x}\n          maxWidth=\"100%\"\n          onClose={() => {\n            setClickedVehicle(null);\n          }}\n        >\n          <StationPopup\n            configCompanies={configCompanies}\n            getEntityName={\n              // @ts-expect-error no stop support. Avoid a breaking change\n              getStationName && ((s, cc) => getStationName(cc, s))\n            }\n            setLocation={location => {\n              setClickedVehicle(null);\n              setLocation(location);\n            }}\n            entity={{\n              ...clickedVehicle,\n              networks: JSON.parse(clickedVehicle.networks)\n            }}\n          />\n        </Popup>\n      )}\n    </>\n  );\n};\nexport default VehicleRentalOverlay;\nexport { StationPopup };\n"],"file":"index.js"}