{"version":3,"sources":["../src/fare-table.tsx"],"names":["defaultMessages","defaultEnglishMessages","TableHeader","styled","thead","Table","table","TransferIcon","Transfer","useGetHeaderString","headerKey","intl","formatMessage","id","description","defaultMessage","FareTypeTable","cols","legs","colsToRender","map","col","total","mediumId","riderCategoryId","filter","undefined","headerString","filteredLegs","leg","fareProducts","length","fare","columnHeaderKey","currency","code","amount","index","transferAmount","formatNumber","price","currencyDisplay","style","FareLegTable","layout","config"],"mappings":"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","sourcesContent":["import { Leg } from \"@opentripplanner/types\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { Transfer } from \"@styled-icons/boxicons-regular/Transfer\";\n\nimport {\n  getItineraryCost,\n  getLegCost,\n  getLegRouteName\n} from \"@opentripplanner/core-utils/lib/itinerary\";\nimport { useIntl } from \"react-intl\";\nimport { flatten } from \"flat\";\nimport { boldText, renderFare } from \"./utils\";\n\nimport { FareLegTableProps, FareTableLayout } from \"./types\";\n\n// Load the default messages.\nimport defaultEnglishMessages from \"../i18n/en-US.yml\";\n\n// HACK: We should flatten the messages loaded above because\n// the YAML loaders behave differently between webpack and our version of jest:\n// - the yaml loader for webpack returns a nested object,\n// - the yaml loader for jest returns messages with flattened ids.\nconst defaultMessages: Record<string, string> = flatten(defaultEnglishMessages);\n\ninterface FareTypeTableProps extends FareTableLayout {\n  legs: Leg[];\n}\n\nconst TableHeader = styled.thead`\n  th {\n    font-weight: normal;\n    min-width: 5ch;\n    padding: 0.75em 1.5em;\n    text-align: center;\n  }\n  th:nth-of-type(2n + 1) {\n    background: #cccccc22;\n  }\n  th.main {\n    background: #333333;\n    color: #ffffffcc;\n  }\n`;\n\nconst Table = styled.table`\n  border-collapse: collapse;\n  display: block;\n  margin-bottom: 16px;\n  padding: 0;\n\n  td {\n    text-align: right;\n  }\n  td:nth-of-type(2n + 1) {\n    background: #cccccc22;\n  }\n  td.no-zebra {\n    background: none;\n  }\n  th:first-of-type {\n    height: 40px;\n  }\n`;\n\nconst TransferIcon = styled(Transfer)`\n  padding-left: 4px;\n`;\n\nconst useGetHeaderString = (headerKey: string): string => {\n  const intl = useIntl();\n  return intl.formatMessage({\n    id: `otpUi.TripDetails.FareTable.${headerKey}`,\n    description: `Fare leg table header for key ${headerKey}`,\n    defaultMessage:\n      defaultEnglishMessages[`otpUi.TripDetails.FareTable.${headerKey}`]\n  });\n};\n\nconst FareTypeTable = ({\n  cols,\n  headerKey,\n  legs\n}: FareTypeTableProps): JSX.Element => {\n  const intl = useIntl();\n  // FIXME: Is there a nicer way to do this?\n  const colsToRender = cols\n    .map(col => ({\n      ...col,\n      total: getItineraryCost(legs, col.mediumId, col.riderCategoryId)\n    }))\n    .filter(col => col.total !== undefined);\n\n  const headerString = useGetHeaderString(headerKey);\n\n  const filteredLegs = legs.filter(leg => leg.fareProducts?.length > 0);\n  if (colsToRender.length) {\n    return (\n      <Table>\n        <TableHeader>\n          <th className=\"main\" scope=\"col\">\n            {boldText(headerString)}\n          </th>\n          {colsToRender.map(col => {\n            const fare = col.total;\n            return (\n              <th\n                scope=\"col\"\n                key={\n                  col.columnHeaderKey ||\n                  `${col.mediumId}-${col.riderCategoryId}`\n                }\n              >\n                {boldText(useGetHeaderString(col.columnHeaderKey))}\n                <br />\n                {renderFare(fare?.currency?.code, fare?.amount || 0)}\n              </th>\n            );\n          })}\n        </TableHeader>\n        {filteredLegs.map((leg, index) => (\n          <tr key={index}>\n            <td className=\"no-zebra\">{getLegRouteName(leg)}</td>\n            {colsToRender.map(col => {\n              const fare = getLegCost(leg, col.mediumId, col.riderCategoryId);\n              return (\n                <td\n                  key={col.columnHeaderKey}\n                  title={\n                    \"transferAmount\" in fare &&\n                    fare?.transferAmount?.amount > 0 &&\n                    intl.formatMessage(\n                      {\n                        defaultMessage:\n                          defaultMessages[\n                            \"otpUi.TripDetails.transferDiscountExplanation\"\n                          ],\n                        description:\n                          \"Text explaining the transfer discount applied to this fare.\",\n                        id: \"otpUi.TripDetails.transferDiscountExplanation\"\n                      },\n                      {\n                        transferAmount: intl.formatNumber(\n                          fare?.transferAmount?.amount,\n                          {\n                            currency: fare?.price?.currency?.code,\n                            currencyDisplay: \"narrowSymbol\",\n                            style: \"currency\"\n                          }\n                        )\n                      }\n                    )\n                  }\n                >\n                  {\"transferAmount\" in fare &&\n                    fare?.transferAmount?.amount > 0 && (\n                      <>\n                        <TransferIcon size={16} />{\" \"}\n                      </>\n                    )}\n                  {renderFare(\n                    fare?.price?.currency?.code,\n                    fare?.price?.amount || 0\n                  )}\n                </td>\n              );\n            })}\n          </tr>\n        ))}\n      </Table>\n    );\n  }\n  return null;\n};\n\nconst FareLegTable = ({ layout, legs }: FareLegTableProps): JSX.Element => {\n  // the layout argument contains an object for every table to be displayed\n  return (\n    <div>\n      {layout.map(config => (\n        <FareTypeTable\n          cols={config.cols}\n          headerKey={config.headerKey}\n          key={config.headerKey}\n          legs={legs}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default FareLegTable;\n"],"file":"fare-table.js"}