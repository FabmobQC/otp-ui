{"version":3,"sources":["../../src/TransitLegBody/alerts-body.tsx"],"names":["getUserTimezone","getCurrentDate","coreUtils","time","AlertDay","dayDiff","defaultMessages","AlertsBody","alerts","AlertIcon","S","DefaultAlertBodyIcon","timeZone","sort","a","b","effectiveStartDate","map","alertDescriptionText","description","alertHeaderText","header","alertUrl","i","today","compareDate","Date","Math","abs","dateTime","day"],"mappings":"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","sourcesContent":["import { differenceInCalendarDays } from \"date-fns\";\nimport { toDate, utcToZonedTime } from \"date-fns-tz\";\nimport coreUtils from \"@opentripplanner/core-utils\";\nimport { Alert } from \"@opentripplanner/types\";\nimport React, { FunctionComponent, ReactElement } from \"react\";\nimport { FormattedMessage } from \"react-intl\";\n\nimport * as S from \"../styled\";\nimport { defaultMessages } from \"../util\";\n\nconst { getUserTimezone, getCurrentDate } = coreUtils.time;\n\ninterface Props {\n  alerts: Alert[];\n  AlertIcon?: FunctionComponent;\n  timeZone?: string;\n}\n\ninterface AlertDayProps {\n  dayDiff: number;\n}\n\n/**\n * Displays today/yesterday/tomorrow in the correct language.\n */\nfunction AlertDay({ dayDiff }: AlertDayProps) {\n  switch (dayDiff) {\n    case -1:\n      return (\n        <FormattedMessage\n          defaultMessage={\n            defaultMessages[\"otpUi.TransitLegBody.AlertsBody.yesterday\"]\n          }\n          description=\"Yesterday\"\n          id=\"otpUi.TransitLegBody.AlertsBody.yesterday\"\n        />\n      );\n    case 0:\n      return (\n        <FormattedMessage\n          defaultMessage={\n            defaultMessages[\"otpUi.TransitLegBody.AlertsBody.today\"]\n          }\n          description=\"Today\"\n          id=\"otpUi.TransitLegBody.AlertsBody.today\"\n        />\n      );\n    case 1:\n      return (\n        <FormattedMessage\n          defaultMessage={\n            defaultMessages[\"otpUi.TransitLegBody.AlertsBody.tomorrow\"]\n          }\n          description=\"Tomorrow\"\n          id=\"otpUi.TransitLegBody.AlertsBody.tomorrow\"\n        />\n      );\n    default:\n      // Not used.\n      return null;\n  }\n}\n\nexport default function AlertsBody({\n  alerts,\n  AlertIcon = S.DefaultAlertBodyIcon,\n  timeZone = getUserTimezone()\n}: Props): ReactElement {\n  if (typeof alerts !== \"object\") return null;\n  return (\n    <S.TransitAlerts>\n      {alerts\n        .sort((a, b) => b.effectiveStartDate - a.effectiveStartDate)\n        .map(\n          (\n            {\n              alertDescriptionText: description,\n              alertHeaderText: header,\n              alertUrl,\n              effectiveStartDate\n            },\n            i\n          ) => {\n            // If alert is effective as of +/- one day, use today, tomorrow, or\n            // yesterday with time. Otherwise, use long date format.\n            // The difference is expressed in calendar days based on the agency's time zone.\n            // Note: Previously, we used moment.diff(..., \"days\"), which reports the number of whole 24-hour periods\n            // between two timestamps/dates (not considering timezones or daylight time changes).\n            const today = toDate(getCurrentDate(timeZone));\n            const compareDate = utcToZonedTime(\n              new Date(effectiveStartDate),\n              timeZone\n            );\n            const dayDiff = differenceInCalendarDays(compareDate, today);\n\n            return (\n              <S.TransitAlert key={i} href={alertUrl}>\n                <S.TransitAlertIconContainer>\n                  <AlertIcon />\n                </S.TransitAlertIconContainer>\n                {header && (\n                  <S.TransitAlertHeader>{header}</S.TransitAlertHeader>\n                )}\n                <S.TransitAlertBody>{description}</S.TransitAlertBody>\n                <S.TransitAlertEffectiveDate>\n                  {Math.abs(dayDiff) <= 1 ? (\n                    <FormattedMessage\n                      defaultMessage={\n                        defaultMessages[\n                          \"otpUi.TransitLegBody.AlertsBody.effectiveTimeAndDate\"\n                        ]\n                      }\n                      description=\"Text with the time and date an alert takes effect\"\n                      id=\"otpUi.TransitLegBody.AlertsBody.effectiveTimeAndDate\"\n                      values={{\n                        dateTime: effectiveStartDate * 1000,\n                        day: <AlertDay dayDiff={dayDiff} />\n                      }}\n                    />\n                  ) : (\n                    <FormattedMessage\n                      defaultMessage={\n                        defaultMessages[\n                          \"otpUi.TransitLegBody.AlertsBody.effectiveDate\"\n                        ]\n                      }\n                      description=\"Text with the date an alert takes effect\"\n                      id=\"otpUi.TransitLegBody.AlertsBody.effectiveDate\"\n                      values={{\n                        dateTime: effectiveStartDate * 1000\n                      }}\n                    />\n                  )}\n                </S.TransitAlertEffectiveDate>\n              </S.TransitAlert>\n            );\n          }\n        )}\n    </S.TransitAlerts>\n  );\n}\n"],"file":"alerts-body.js"}