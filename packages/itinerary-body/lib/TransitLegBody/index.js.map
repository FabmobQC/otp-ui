{"version":3,"sources":["../../src/TransitLegBody/index.tsx"],"names":["maximumAlertCountToShowUncollapsed","getFlexMessageValues","info","hasPhone","contactInfo","phoneNumber","leadDays","latestBookingTime","daysPrior","action","defaultMessages","advanceNotice","TransitLegBody","Component","constructor","props","onToggleStopsClick","stopsExpanded","state","setState","onToggleAlertsClick","alertsExpanded","onSummaryClick","leg","legIndex","setActiveLeg","render","AlertBodyIcon","AlertToggleIcon","S","DefaultAlertToggleIcon","alwaysCollapseAlerts","defaultFareSelector","intl","legDestination","LegIcon","RouteDescription","RouteDescriptionFooter","setViewedTrip","showAgencyInfo","showViewTripButton","timeZone","TransitLegSubheader","TransitLegSummary","transitOperator","agencyBrandingUrl","agencyName","agencyUrl","alerts","isReservationRequired","coreUtils","itinerary","transitOperatorName","name","logoUrl","logo","shouldCollapseDueToAlertCount","length","shouldOnlyShowAlertsExpanded","expandAlerts","legCost","getLegCost","mediumId","riderCategoryId","formatMessage","defaultMessage","description","id","agencyLink","pickupBookingInfo","alertCount","intermediateStops","from","stopIndex","stopId","to","tripId","price","fare","currency","code","amount","averageWait","waitTime"],"mappings":"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","sourcesContent":["import coreUtils from \"@opentripplanner/core-utils\";\nimport {\n  FareProductSelector,\n  FlexBookingInfo,\n  Leg,\n  LegIconComponent,\n  TransitOperator\n} from \"@opentripplanner/types\";\nimport React, { Component, FunctionComponent, ReactElement } from \"react\";\nimport AnimateHeight from \"react-animate-height\";\nimport {\n  FormattedMessage,\n  FormattedNumber,\n  injectIntl,\n  IntlShape\n} from \"react-intl\";\n\nimport { Duration } from \"../defaults\";\n\nimport * as S from \"../styled\";\nimport {\n  RouteDescriptionProps,\n  RouteDescriptionFooterProps,\n  SetActiveLegFunction,\n  SetViewedTripFunction,\n  TransitLegSubheaderProps,\n  TransitLegSummaryProps\n} from \"../types\";\nimport { defaultMessages } from \"../util\";\n\nimport AlertsBody from \"./alerts-body\";\nimport IntermediateStops from \"./intermediate-stops\";\nimport ViewTripButton from \"./view-trip-button\";\n\ninterface Props {\n  AlertBodyIcon?: FunctionComponent;\n  AlertToggleIcon?: FunctionComponent;\n  alwaysCollapseAlerts: boolean;\n  defaultFareSelector?: FareProductSelector;\n  intl: IntlShape;\n  leg: Leg;\n  legDestination: string;\n  LegIcon: LegIconComponent;\n  legIndex: number;\n  RouteDescription: FunctionComponent<RouteDescriptionProps>;\n  RouteDescriptionFooter: FunctionComponent<RouteDescriptionFooterProps>;\n  setActiveLeg: SetActiveLegFunction;\n  setViewedTrip: SetViewedTripFunction;\n  showAgencyInfo: boolean;\n  showViewTripButton: boolean;\n  timeZone: string;\n  TransitLegSubheader?: FunctionComponent<TransitLegSubheaderProps>;\n  TransitLegSummary: FunctionComponent<TransitLegSummaryProps>;\n  transitOperator?: TransitOperator;\n}\n\ninterface State {\n  alertsExpanded: boolean;\n  stopsExpanded: boolean;\n}\n\nconst maximumAlertCountToShowUncollapsed = 2;\n\n/**\n * Helper function that assembles values for flex pickup/dropoff messages.\n */\nfunction getFlexMessageValues(info: FlexBookingInfo) {\n  // There used to be a variable `hasLeadTime` here. This should be brought back\n  // if the leadTime check is ever to be more than just checking the value of\n  // daysPrior (which can be done within react-intl)\n  const hasPhone = !!info?.contactInfo?.phoneNumber;\n  const leadDays = info?.latestBookingTime?.daysPrior;\n  const phoneNumber = info?.contactInfo?.phoneNumber;\n  return {\n    action: hasPhone ? (\n      <FormattedMessage\n        defaultMessage={defaultMessages[\"otpUi.ItineraryBody.flexCallNumber\"]}\n        description=\"For calling a phone number.\"\n        id=\"otpUi.ItineraryBody.flexCallNumber\"\n        values={{ phoneNumber }}\n      />\n    ) : (\n      <FormattedMessage\n        defaultMessage={defaultMessages[\"otpUi.ItineraryBody.flexCallAhead\"]}\n        description=\"For calling ahead.\"\n        id=\"otpUi.ItineraryBody.flexCallAhead\"\n      />\n    ),\n    advanceNotice:\n      leadDays > 0 ? (\n        <FormattedMessage\n          defaultMessage={\n            defaultMessages[\"otpUi.ItineraryBody.flexAdvanceNotice\"]\n          }\n          description=\"Advance notice for flex service.\"\n          id=\"otpUi.ItineraryBody.flexAdvanceNotice\"\n          values={{ leadDays }}\n        />\n      ) : (\n        \"\"\n      )\n  };\n}\n\nclass TransitLegBody extends Component<Props, State> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      alertsExpanded: false,\n      stopsExpanded: false\n    };\n  }\n\n  onToggleStopsClick = () => {\n    const { stopsExpanded } = this.state;\n    this.setState({ stopsExpanded: !stopsExpanded });\n  };\n\n  onToggleAlertsClick = () => {\n    const { alertsExpanded } = this.state;\n    this.setState({ alertsExpanded: !alertsExpanded });\n  };\n\n  onSummaryClick = () => {\n    const { leg, legIndex, setActiveLeg } = this.props;\n    setActiveLeg(legIndex, leg);\n  };\n\n  render(): ReactElement {\n    const {\n      AlertBodyIcon,\n      AlertToggleIcon = S.DefaultAlertToggleIcon,\n      alwaysCollapseAlerts,\n      defaultFareSelector,\n      intl,\n      leg,\n      legDestination,\n      LegIcon,\n      RouteDescription,\n      RouteDescriptionFooter,\n      setViewedTrip,\n      showAgencyInfo,\n      showViewTripButton,\n      timeZone,\n      TransitLegSubheader,\n      TransitLegSummary,\n      transitOperator\n    } = this.props;\n    const { agencyBrandingUrl, agencyName, agencyUrl, alerts } = leg;\n    const { alertsExpanded, stopsExpanded } = this.state;\n\n    const isReservationRequired = coreUtils.itinerary.isReservationRequired(\n      leg\n    );\n\n    // If the config contains an operator name, prefer that one over the\n    // one provided by OTP\n    const transitOperatorName = transitOperator?.name || agencyName;\n\n    // If the config contains an operator with a logo URL, prefer that over the\n    // one provided by OTP (which is derived from agency.txt#agency_branding_url)\n    const logoUrl =\n      transitOperator && transitOperator.logo\n        ? transitOperator.logo\n        : agencyBrandingUrl;\n\n    const shouldCollapseDueToAlertCount =\n      leg.alerts?.length > maximumAlertCountToShowUncollapsed;\n    // The alerts expansion triangle is shown when `!shouldOnlyShowAlertsExpanded`.\n    // `!leg.alerts` is needed here so the triangle isn't shown when there are 0 alerts.\n    const shouldOnlyShowAlertsExpanded =\n      !(shouldCollapseDueToAlertCount || alwaysCollapseAlerts) || !leg.alerts;\n    const expandAlerts = alertsExpanded || shouldOnlyShowAlertsExpanded;\n\n    const legCost =\n      defaultFareSelector &&\n      coreUtils.itinerary.getLegCost(\n        leg,\n        defaultFareSelector.mediumId,\n        defaultFareSelector.riderCategoryId\n      );\n\n    return (\n      <>\n        {TransitLegSubheader && <TransitLegSubheader leg={leg} />}\n        <S.LegBody>\n          {/* The Route Icon/Name Bar */}\n          <S.LegClickable>\n            <S.LegDescription>\n              <span>\n                <S.InvisibleAdditionalDetails>\n                  {\" - \"}\n                  <FormattedMessage\n                    defaultMessage={\n                      defaultMessages[\"otpUi.TransitLegBody.ride\"]\n                    }\n                    description=\"Prompt to ride a transit vehicle.\"\n                    id=\"otpUi.TransitLegBody.ride\"\n                  />\n                </S.InvisibleAdditionalDetails>\n                <RouteDescription\n                  leg={leg}\n                  LegIcon={LegIcon}\n                  transitOperator={transitOperator}\n                />\n                <S.InvisibleAdditionalDetails>\n                  {\" - \"}\n                  <FormattedMessage\n                    // TODO: Accommodate interline itineraries with \"Stay on board\" instructions.\n                    defaultMessage={\n                      defaultMessages[\"otpUi.TransitLegBody.disembarkAt\"]\n                    }\n                    description=\"Prompt to exit a transit vehicle.\"\n                    id=\"otpUi.TransitLegBody.disembarkAt\"\n                    values={{\n                      legDestination\n                    }}\n                  />\n                </S.InvisibleAdditionalDetails>\n              </span>\n              <S.LegClickableButton onClick={this.onSummaryClick}>\n                <S.InvisibleAdditionalDetails>\n                  <FormattedMessage\n                    defaultMessage={\n                      defaultMessages[\"otpUi.TransitLegBody.zoomToLeg\"]\n                    }\n                    description=\"Identifies behavior of button\"\n                    id=\"otpUi.TransitLegBody.zoomToLeg\"\n                  />\n                </S.InvisibleAdditionalDetails>\n              </S.LegClickableButton>\n            </S.LegDescription>\n          </S.LegClickable>\n          {RouteDescriptionFooter && <RouteDescriptionFooter leg={leg} />}\n          <div\n            // Creates a group of leg details for screenreaders after the initial leg description.\n            aria-label={intl.formatMessage({\n              defaultMessage:\n                defaultMessages[\"otpUi.TransitLegBody.legDetails\"],\n              description: \"Identifies this section as trip leg details\",\n              id: \"otpUi.TransitLegBody.legDetails\"\n            })}\n            role=\"group\"\n          >\n            {/* Agency information */}\n            {showAgencyInfo && (\n              <S.AgencyInfo>\n                <FormattedMessage\n                  defaultMessage={\n                    defaultMessages[\"otpUi.TransitLegBody.operatedBy\"]\n                  }\n                  description=\"Tells which agency operates the service\"\n                  id=\"otpUi.TransitLegBody.operatedBy\"\n                  values={{\n                    agencyLink: (\n                      <a\n                        aria-label={intl.formatMessage(\n                          {\n                            id: \"otpUi.TransitLegBody.agencyExternalLink\"\n                          },\n                          {\n                            agencyName\n                          }\n                        )}\n                        href={agencyUrl || \"#\"}\n                        rel=\"noopener noreferrer\"\n                        target=\"_blank\"\n                      >\n                        {transitOperatorName}\n                        {logoUrl && <img alt=\"\" src={logoUrl} height={25} />}\n                      </a>\n                    )\n                  }}\n                />\n              </S.AgencyInfo>\n            )}\n            {isReservationRequired && leg.pickupBookingInfo && (\n              <S.CallAheadWarning>\n                <FormattedMessage\n                  defaultMessage={\n                    defaultMessages[\"otpUi.ItineraryBody.flexPickupMessage\"]\n                  }\n                  description=\"Instructions for booking and boarding the flex (on-demand) transit service.\"\n                  id=\"otpUi.ItineraryBody.flexPickupMessage\"\n                  values={getFlexMessageValues(leg.pickupBookingInfo)}\n                />\n              </S.CallAheadWarning>\n            )}\n            {/* Alerts toggle */}\n            {alerts?.length > 0 && (\n              <S.TransitAlertToggle onClick={this.onToggleAlertsClick}>\n                <AlertToggleIcon />{\" \"}\n                <FormattedMessage\n                  defaultMessage={\n                    defaultMessages[\"otpUi.TransitLegBody.alertsHeader\"]\n                  }\n                  description=\"Number of alerts header\"\n                  id=\"otpUi.TransitLegBody.alertsHeader\"\n                  values={{\n                    alertCount: alerts.length\n                  }}\n                />\n                {!shouldOnlyShowAlertsExpanded && (\n                  <S.CaretToggle expanded={alertsExpanded} />\n                )}\n              </S.TransitAlertToggle>\n            )}\n\n            {/* The Alerts body, if visible */}\n            <AnimateHeight duration={500} height={expandAlerts ? \"auto\" : 0}>\n              <AlertsBody\n                alerts={leg.alerts}\n                AlertIcon={AlertBodyIcon}\n                timeZone={timeZone}\n              />\n            </AnimateHeight>\n            {/* The \"Ride X Min / X Stops\" Row, including IntermediateStops body */}\n            {leg.intermediateStops && leg.intermediateStops.length > 0 && (\n              <S.TransitLegDetails>\n                {/* The header summary row, clickable to expand intermediate stops */}\n                <S.TransitLegDetailsHeader>\n                  <TransitLegSummary\n                    leg={leg}\n                    onClick={this.onToggleStopsClick}\n                    stopsExpanded={stopsExpanded}\n                  />\n\n                  {showViewTripButton && (\n                    <ViewTripButton\n                      fromIndex={leg.from?.stopIndex}\n                      fromStopId={leg?.from?.stopId}\n                      setViewedTrip={setViewedTrip}\n                      toIndex={leg.to?.stopIndex}\n                      toStopId={leg?.to?.stopId}\n                      tripId={leg.tripId}\n                    />\n                  )}\n                </S.TransitLegDetailsHeader>\n                {/* IntermediateStops expanded body */}\n                <AnimateHeight\n                  duration={500}\n                  height={stopsExpanded ? \"auto\" : 0}\n                >\n                  <S.TransitLegExpandedBody>\n                    <IntermediateStops stops={leg.intermediateStops} />\n                    {legCost?.price && (\n                      <S.TransitLegFare>\n                        <FormattedMessage\n                          defaultMessage={\n                            defaultMessages[\"otpUi.TransitLegBody.fare\"]\n                          }\n                          description=\"Describes the fare for a leg\"\n                          id=\"otpUi.TransitLegBody.fare\"\n                          values={{\n                            fare: (\n                              <FormattedNumber\n                                currency={legCost.price.currency.code}\n                                currencyDisplay=\"narrowSymbol\"\n                                // This isn't a \"real\" style prop\n                                // eslint-disable-next-line react/style-prop-object\n                                style=\"currency\"\n                                value={legCost.price.amount}\n                              />\n                            )\n                          }}\n                        />\n                      </S.TransitLegFare>\n                    )}\n                  </S.TransitLegExpandedBody>\n                </AnimateHeight>\n                {/* Average wait details, if present */}\n                {leg.averageWait && (\n                  <span>\n                    <FormattedMessage\n                      defaultMessage={\n                        defaultMessages[\"otpUi.TransitLegBody.typicalWait\"]\n                      }\n                      description=\"Describes the typical wait for a transit leg\"\n                      id=\"otpUi.TransitLegBody.typicalWait\"\n                      values={{\n                        waitTime: <Duration seconds={leg.averageWait} />\n                      }}\n                    />\n                  </span>\n                )}\n              </S.TransitLegDetails>\n            )}\n          </div>\n        </S.LegBody>\n      </>\n    );\n  }\n}\n\nexport default injectIntl(TransitLegBody);\n\nexport { AlertsBody, IntermediateStops, ViewTripButton };\n"],"file":"index.js"}