{"version":3,"sources":["../../src/AccessLegBody/leg-diagram-preview.tsx"],"names":["METERS_TO_FEET","generateSvg","profile","width","height","points","ptArr","traversed","minElev","maxElev","pts","map","pt","x","y","join","LegDiagramPreview","Component","constructor","props","onResize","setState","isActive","diagramVisible","leg","startTime","onExpandClick","setLegDiagram","formatElevation","elev","Math","round","state","render","intl","showElevationProfile","coreUtils","itinerary","getElevationProfile","steps","distance","mode","formatMessage","defaultMessage","defaultMessages","description","id","gain","loss","length"],"mappings":"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","sourcesContent":["import coreUtils from \"@opentripplanner/core-utils\";\nimport { Leg } from \"@opentripplanner/types\";\nimport React, { Component, ReactElement } from \"react\";\nimport { FormattedMessage, injectIntl, IntlShape } from \"react-intl\";\nimport ReactResizeDetector from \"react-resize-detector\";\n\nimport * as S from \"../styled\";\n\nimport { defaultMessages } from \"../util\";\n\ninterface Props {\n  diagramVisible?: Leg;\n  intl: IntlShape;\n  leg: Leg;\n  setLegDiagram: (leg: Leg) => void;\n  showElevationProfile: boolean;\n}\n\ninterface State {\n  width: number;\n}\n\nconst METERS_TO_FEET = 3.28084;\n\nfunction generateSvg(profile, width) {\n  const height = 30;\n  const { points: ptArr, traversed } = profile;\n  let { minElev, maxElev } = profile;\n  // Pad the min-max range by 25m on either side\n  minElev -= 25;\n  maxElev += 25;\n\n  // Transform the point array and store it as an SVG-ready string\n  const pts = ptArr\n    .map(pt => {\n      const x = (pt[0] / traversed) * width;\n      const y = height - (height * (pt[1] - minElev)) / (maxElev - minElev);\n      return `${x},${y}`;\n    })\n    .join(\" \");\n\n  // Render the SVG\n  return (\n    <svg height={height} width={width}>\n      <polyline points={pts} fill=\"none\" stroke=\"black\" strokeWidth={1.3} />\n    </svg>\n  );\n}\n\nclass LegDiagramPreview extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { width: null };\n  }\n\n  onResize = (width: number): void => {\n    if (width > 0) {\n      this.setState({ width });\n    }\n  };\n\n  /**\n   * Determine if the diagram currently visible is for this leg (based on start\n   * time).\n   */\n  isActive = (): boolean => {\n    const { diagramVisible, leg } = this.props;\n    return diagramVisible && diagramVisible.startTime === leg.startTime;\n  };\n\n  onExpandClick = (): void => {\n    const { leg, setLegDiagram } = this.props;\n    if (this.isActive()) setLegDiagram(null);\n    else setLegDiagram(leg);\n  };\n\n  /** Round elevation to whole number and add foot (') symbol. */\n  formatElevation = (elev: number): string => `${Math.round(elev)}'`;\n\n  render(): ReactElement {\n    const { intl, leg, showElevationProfile } = this.props;\n    const { width } = this.state;\n    if (!showElevationProfile) return null;\n    const profile = coreUtils.itinerary.getElevationProfile(leg.steps);\n    // Don't show for very short legs\n    if (leg.distance < 500 || leg.mode === \"CAR\") return null;\n\n    return (\n      <S.PreviewContainer active={this.isActive()}>\n        {/* The preview elevation SVG */}\n        <S.PreviewDiagram\n          onClick={this.onExpandClick}\n          role=\"button\"\n          tabIndex={0}\n          // This is shown in a tooltip, so use intl.formatMessage.\n          title={intl.formatMessage({\n            defaultMessage:\n              defaultMessages[\n                \"otpUi.AccessLegBody.LegDiagramPreview.toggleElevationChart\"\n              ],\n            description:\n              \"Tooltip text describing the toggling of the elevation chart.\",\n            id: \"otpUi.AccessLegBody.LegDiagramPreview.toggleElevationChart\"\n          })}\n        >\n          <S.PreviewDiagramTitle>\n            <FormattedMessage\n              defaultMessage={\n                defaultMessages[\n                  \"otpUi.AccessLegBody.LegDiagramPreview.elevationChart\"\n                ]\n              }\n              description=\"Title text for elevation chart\"\n              id=\"otpUi.AccessLegBody.LegDiagramPreview.elevationChart\"\n            />\n            <S.PreviewDiagramElevationGain>\n              ↑{this.formatElevation(profile.gain * METERS_TO_FEET)}\n            </S.PreviewDiagramElevationGain>\n            <S.PreviewDiagramElevationLoss>\n              ↓{this.formatElevation(-profile.loss * METERS_TO_FEET)}\n            </S.PreviewDiagramElevationLoss>\n          </S.PreviewDiagramTitle>\n          {profile.points.length > 0 ? (\n            generateSvg(profile, width)\n          ) : (\n            <FormattedMessage\n              defaultMessage={\n                defaultMessages[\n                  \"otpUi.AccessLegBody.LegDiagramPreview.noElevationData\"\n                ]\n              }\n              description=\"Text shown if no elevation data is available.\"\n              id=\"otpUi.AccessLegBody.LegDiagramPreview.noElevationData\"\n            />\n          )}\n          <ReactResizeDetector handleWidth onResize={this.onResize} />\n        </S.PreviewDiagram>\n      </S.PreviewContainer>\n    );\n  }\n}\n\nexport default injectIntl(LegDiagramPreview);\n"],"file":"leg-diagram-preview.js"}