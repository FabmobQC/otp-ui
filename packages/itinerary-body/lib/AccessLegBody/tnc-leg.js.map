{"version":3,"sources":["../../src/AccessLegBody/tnc-leg.tsx"],"names":["TNCLeg","config","followsTransit","leg","LegIcon","LYFT_CLIENT_ID","onSummaryClick","showLegIcon","UBER_CLIENT_ID","universalLinks","uber","coreUtils","ui","isMobile","from","lat","lon","encodeURI","name","to","lyft","rideHailingEstimate","defaultMessages","company","provider","id","companies","label","minutes","parseInt","arrival","startTime","timeMillis","duration","minPrice","maxFare","maxPrice","currency","code","amount","minFare"],"mappings":"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","sourcesContent":["import coreUtils from \"@opentripplanner/core-utils\";\nimport { Config, Leg, LegIconComponent } from \"@opentripplanner/types\";\nimport React, { ReactElement } from \"react\";\nimport { FormattedMessage, FormattedNumber } from \"react-intl\";\nimport { getCompanyForNetwork } from \"@opentripplanner/core-utils/lib/itinerary\";\nimport { Duration } from \"../defaults\";\n\nimport * as S from \"../styled\";\nimport { defaultMessages, parseOTP2Minute } from \"../util\";\n\nimport AccessLegSummary from \"./access-leg-summary\";\n\ninterface Props {\n  config: Config;\n  followsTransit: boolean;\n  leg: Leg;\n  LegIcon: LegIconComponent;\n  LYFT_CLIENT_ID?: string;\n  onSummaryClick: () => void;\n  showLegIcon: boolean;\n  UBER_CLIENT_ID?: string;\n}\n\nexport default function TNCLeg({\n  config,\n  followsTransit,\n  leg,\n  LegIcon,\n  LYFT_CLIENT_ID = \"\",\n  onSummaryClick,\n  showLegIcon,\n  UBER_CLIENT_ID = \"\"\n}: Props): ReactElement {\n  const universalLinks = {\n    uber: `https://m.uber.com/${\n      coreUtils.ui.isMobile() ? \"ul/\" : \"\"\n    }?client_id=${UBER_CLIENT_ID}&action=setPickup&pickup[latitude]=${\n      leg.from.lat\n    }&pickup[longitude]=${leg.from.lon}&pickup[formatted_address]=${encodeURI(\n      leg.from.name\n    )}&dropoff[latitude]=${leg.to.lat}&dropoff[longitude]=${\n      leg.to.lon\n    }&dropoff[formatted_address]=${encodeURI(leg.to.name)}`,\n    lyft: `https://lyft.com/ride?id=lyft&partner=${LYFT_CLIENT_ID}&pickup[latitude]=${leg.from.lat}&pickup[longitude]=${leg.from.lon}&destination[latitude]=${leg.to.lat}&destination[longitude]=${leg.to.lon}`\n  };\n  const { rideHailingEstimate } = leg;\n  if (!rideHailingEstimate) return null;\n  return (\n    <div>\n      <S.PlaceSubheader>\n        <FormattedMessage\n          defaultMessage={\n            defaultMessages[\"otpUi.AccessLegBody.TncLeg.waitForPickup\"]\n          }\n          description=\"Action text for waiting for a ride-hail vehicle.\"\n          id=\"otpUi.AccessLegBody.TncLeg.waitForPickup\"\n          values={{\n            company: getCompanyForNetwork(\n              rideHailingEstimate.provider.id,\n              config.companies\n            )?.label,\n            minutes: followsTransit\n              ? 0\n              : parseInt(parseOTP2Minute(leg.rideHailingEstimate.arrival), 10)\n          }}\n        />\n      </S.PlaceSubheader>\n\n      <S.LegBody>\n        {/* The icon/summary row */}\n        <AccessLegSummary\n          config={config}\n          leg={leg}\n          LegIcon={LegIcon}\n          onSummaryClick={onSummaryClick}\n          showLegIcon={showLegIcon}\n        />\n\n        {/* The \"Book Ride\" button */}\n        <S.BookTNCRideButtonContainer>\n          <S.BookTNCRideButton\n            href={universalLinks[rideHailingEstimate.provider.id]}\n            target={coreUtils.ui.isMobile() ? \"_self\" : \"_blank\"}\n          >\n            <FormattedMessage\n              defaultMessage={\n                defaultMessages[\"otpUi.AccessLegBody.TncLeg.bookRide\"]\n              }\n              description=\"Action text to book a ride with a ride-hail company.\"\n              id=\"otpUi.AccessLegBody.TncLeg.bookRide\"\n            />\n          </S.BookTNCRideButton>\n          {followsTransit && <S.BookLaterPointer />}\n          {followsTransit && typeof leg.startTime === \"number\" && (\n            <S.BookLaterContainer>\n              <S.BookLaterInnerContainer>\n                <S.BookLaterText>\n                  <FormattedMessage\n                    defaultMessage={\n                      defaultMessages[\n                        \"otpUi.AccessLegBody.TncLeg.bookRideLater\"\n                      ]\n                    }\n                    description=\"Hint text to book a ride at a later time.\"\n                    id=\"otpUi.AccessLegBody.TncLeg.bookRideLater\"\n                    values={{\n                      timeMillis:\n                        leg.startTime -\n                        parseInt(\n                          parseOTP2Minute(rideHailingEstimate.arrival),\n                          10\n                        )\n                    }}\n                  />\n                </S.BookLaterText>\n              </S.BookLaterInnerContainer>\n            </S.BookLaterContainer>\n          )}\n        </S.BookTNCRideButtonContainer>\n\n        {/* The estimated travel time */}\n        <S.TNCTravelTime>\n          <FormattedMessage\n            defaultMessage={\n              defaultMessages[\"otpUi.AccessLegBody.TncLeg.estimatedTravelTime\"]\n            }\n            description=\"Describes the estimated travel time.\"\n            id=\"otpUi.AccessLegBody.TncLeg.estimatedTravelTime\"\n            values={{\n              duration: <Duration seconds={leg.duration} />\n            }}\n          />\n        </S.TNCTravelTime>\n\n        {/* The estimated travel cost */}\n        {rideHailingEstimate.minPrice && (\n          <S.TNCCost>\n            <FormattedMessage\n              defaultMessage={\n                defaultMessages[\"otpUi.AccessLegBody.TncLeg.estimatedCost\"]\n              }\n              description=\"Shows the minimum and maximum fares for a TNC ride.\"\n              id=\"otpUi.AccessLegBody.TncLeg.estimatedCost\"\n              values={{\n                maxFare: (\n                  <FormattedNumber\n                    currency={rideHailingEstimate.maxPrice.currency.code}\n                    currencyDisplay=\"narrowSymbol\"\n                    // This isn't a \"real\" style prop\n                    // eslint-disable-next-line react/style-prop-object\n                    style=\"currency\"\n                    value={rideHailingEstimate.maxPrice.amount}\n                  />\n                ),\n                minFare: (\n                  <FormattedNumber\n                    currency={rideHailingEstimate.minPrice.currency.code}\n                    currencyDisplay=\"narrowSymbol\"\n                    // This isn't a \"real\" style prop\n                    // eslint-disable-next-line react/style-prop-object\n                    style=\"currency\"\n                    value={rideHailingEstimate.minPrice.amount}\n                  />\n                )\n              }}\n            />\n          </S.TNCCost>\n        )}\n      </S.LegBody>\n    </div>\n  );\n}\n"],"file":"tnc-leg.js"}