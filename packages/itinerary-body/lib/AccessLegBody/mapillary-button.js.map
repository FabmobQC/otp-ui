{"version":3,"sources":["../../src/AccessLegBody/mapillary-button.tsx"],"names":["generateBoundingBoxFromCoordinate","lat","lon","WINDOW","south","north","west","east","Container","styled","a","Icon","StreetView","MapillaryButton","clickCallback","coords","mapillaryKey","imageId","setImageId","intl","getMapillaryId","bounds","join","raw","fetch","json","data","length","id","handleClick","window","open","mapilaryLabel","formatMessage","defaultMessage","defaultMessages","description","paddingBottom"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,iCAAiC,GAAG,CAAC;AACzCC,EAAAA,GADyC;AAEzCC,EAAAA;AAFyC,CAAD,KAMpC;AACJ,QAAMC,MAAM,GAAG,QAAf;AACA,QAAMC,KAAK,GAAGH,GAAG,GAAGE,MAApB;AACA,QAAME,KAAK,GAAGJ,GAAG,GAAGE,MAApB;AACA,QAAMG,IAAI,GAAGJ,GAAG,GAAGC,MAAnB;AACA,QAAMI,IAAI,GAAGL,GAAG,GAAGC,MAAnB;AACA,SAAO,CAACG,IAAD,EAAOF,KAAP,EAAcG,IAAd,EAAoBF,KAApB,CAAP;AACD,CAbD;;AAeA,MAAMG,SAAS,GAAGC,0BAAOC,CAAV;AAAA;AAAA;AAAA,+HAAf;;AAiBA,MAAMC,IAAI,GAAG,+BAAOC,sBAAP,CAAH;AAAA;AAAA;AAAA,qCAAV;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,eAAe,GAAG,CAAC;AACvBC,EAAAA,aADuB;AAEvBC,EAAAA,MAFuB;AAGvBC,EAAAA;AAHuB,CAAD,KAQL;AACjB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwB,qBAAS,IAAT,CAA9B;AACA,QAAMC,IAAI,GAAG,yBAAb;AAEA,wBAAU,MAAM;AACd;AACA,UAAMC,cAAc,GAAG,YAAY;AAAA;;AACjC,YAAMC,MAAM,GAAGrB,iCAAiC,CAACe,MAAD,CAAjC,CAA0CO,IAA1C,CAA+C,GAA/C,CAAf;AACA,YAAMC,GAAG,GAAG,MAAMC,KAAK,CACpB,qEAAoER,YAAa,SAAQK,MAAO,EAD5E,CAAvB;AAGA,YAAMI,IAAI,GAAG,MAAMF,GAAG,CAACE,IAAJ,EAAnB;;AACA,UAAI,CAAAA,IAAI,SAAJ,IAAAA,IAAI,WAAJ,0BAAAA,IAAI,CAAEC,IAAN,0DAAYC,MAAZ,IAAqB,CAAzB,EAA4B;AAC1BT,QAAAA,UAAU,CAACO,IAAI,CAACC,IAAL,CAAU,CAAV,EAAaE,EAAd,CAAV;AACD;AACF,KATD;;AAWA,QAAI,CAACX,OAAD,IAAY,CAAC,CAACD,YAAlB,EAAgCI,cAAc;AAC/C,GAdD,EAcG,CAACL,MAAD,CAdH;;AAgBA,QAAMc,WAAW,GAAG,MAAM;AACxB,QAAIf,aAAJ,EAAmBA,aAAa,CAACG,OAAD,CAAb,CAAnB,KACK;AACHa,MAAAA,MAAM,CAACC,IAAP,CACG,6CAA4Cd,OAAQ,EADvD,EAEE,QAFF,EAGE,0DAHF;AAKD;AACF,GATD;;AAWA,MAAI,CAACA,OAAL,EAAc,OAAO,IAAP;AACd,QAAMe,aAAa,GAAGb,IAAI,CAACc,aAAL,CAAmB;AACvCC,IAAAA,cAAc,EAAEC,sBAAgB,sCAAhB,CADuB;AAEvCC,IAAAA,WAAW,EAAE,+CAF0B;AAGvCR,IAAAA,EAAE,EAAE;AAHmC,GAAnB,CAAtB;AAKA,sBACE,6BAAC,SAAD;AACE,kBAAYI,aADd;AAEE,IAAA,OAAO,EAAEH,WAFX;AAGE,IAAA,IAAI,EAAC,MAHP;AAIE,IAAA,KAAK,EAAEG;AAJT,kBAME,6BAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEK,MAAAA,aAAa,EAAE;AAAjB;AAAb,IANF,CADF;AAUD,CAvDD;;eAyDexB,e","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useIntl } from \"react-intl\";\nimport styled from \"styled-components\";\nimport { StreetView } from \"@styled-icons/fa-solid/StreetView\";\n\nimport { defaultMessages } from \"../util\";\n\n/**\n * Helper method to generate bounding box from a location. Adding the WINDOW to the coordinate\n * creates a bounding box of approximately 1 meter around the coordinate, which is likely to\n * encompass any imagery available.\n * @param coord     The coordinate to convert to a bounding box\n * @returns         A bounding box 1 meter around the passed coordinate\n */\nconst generateBoundingBoxFromCoordinate = ({\n  lat,\n  lon\n}: {\n  lat: number;\n  lon: number;\n}) => {\n  const WINDOW = 0.000075;\n  const south = lat - WINDOW;\n  const north = lat + WINDOW;\n  const west = lon - WINDOW;\n  const east = lon + WINDOW;\n  return [west, south, east, north];\n};\n\nconst Container = styled.a`\n  &:hover {\n    cursor: pointer;\n    text-decoration: none;\n  }\n\n  &:active {\n    color: #111;\n  }\n\n  &::before {\n    content: \"|\";\n    cursor: auto;\n    margin: 0 0.25em;\n  }\n`;\n\nconst Icon = styled(StreetView)`\n  height: 16px;\n  padding-left: 5px;\n`;\n\n/**\n * A component which shows a \"street view\" button if a Mapillary image is available for a\n * passed coordinate\n *\n * @param coords        The coordinates to find imagery for in the format [lat, lon]\n * @param mapillaryKey  A Mapillary api key used to check for imagery.\n * @param clickCallback A method to fire when the button is clicked, which accepts an ID.\n *  If it is not passed, a popup window will be opened. */\nconst MapillaryButton = ({\n  clickCallback,\n  coords,\n  mapillaryKey\n}: {\n  clickCallback?: (id: string) => void;\n  coords: { lat: number; lon: number };\n  mapillaryKey: string;\n}): JSX.Element => {\n  const [imageId, setImageId] = useState(null);\n  const intl = useIntl();\n\n  useEffect(() => {\n    // useEffect only supports async actions as a child function\n    const getMapillaryId = async () => {\n      const bounds = generateBoundingBoxFromCoordinate(coords).join(\",\");\n      const raw = await fetch(\n        `https://graph.mapillary.com/images?fields=id&limit=1&access_token=${mapillaryKey}&bbox=${bounds}`\n      );\n      const json = await raw.json();\n      if (json?.data?.length > 0) {\n        setImageId(json.data[0].id);\n      }\n    };\n\n    if (!imageId && !!mapillaryKey) getMapillaryId();\n  }, [coords]);\n\n  const handleClick = () => {\n    if (clickCallback) clickCallback(imageId);\n    else {\n      window.open(\n        `https://www.mapillary.com/embed?image_key=${imageId}`,\n        \"_blank\",\n        \"location=no,height=600,width=600,scrollbars=no,status=no\"\n      );\n    }\n  };\n\n  if (!imageId) return null;\n  const mapilaryLabel = intl.formatMessage({\n    defaultMessage: defaultMessages[\"otpUi.AccessLegBody.mapillaryTooltip\"],\n    description: \"Tooltip text describing the street view icon.\",\n    id: \"otpUi.AccessLegBody.mapillaryTooltip\"\n  });\n  return (\n    <Container\n      aria-label={mapilaryLabel}\n      onClick={handleClick}\n      role=\"link\"\n      title={mapilaryLabel}\n    >\n      <Icon style={{ paddingBottom: 1 }} />\n    </Container>\n  );\n};\n\nexport default MapillaryButton;\n"],"file":"mapillary-button.js"}