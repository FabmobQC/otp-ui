{"version":3,"sources":["../../src/ItineraryBody/index.tsx"],"names":["noop","defaultRouteAbbr","arg","toString","ItineraryBody","accessibilityScoreGradationMap","AlertBodyIcon","AlertToggleIcon","alwaysCollapseAlerts","className","config","defaultFareSelector","diagramVisible","frameLeg","itinerary","LegIcon","LineColumnContent","mapillaryCallback","mapillaryKey","PlaceName","RouteDescription","RouteDescriptionFooter","routingType","setActiveLeg","setLegDiagram","setViewedTrip","showAgencyInfo","showElevationProfile","showLegIcon","showMapButtonColumn","showViewTripButton","TimeColumnContent","toRouteAbbreviation","TransitLegSubheader","TransitLegSummary","rows","followsTransit","lastLeg","legs","forEach","leg","i","createPlaceRow","isDestination","push","length","transitLeg"],"mappings":"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","sourcesContent":["import React, { ReactElement } from \"react\";\n\nimport AccessibilityRating from \"./accessibility-rating\";\nimport PlaceRow from \"./place-row\";\nimport * as S from \"../styled\";\nimport { ItineraryBodyProps } from \"../types\";\n\nfunction noop() {}\n\nfunction defaultRouteAbbr(arg: string | number): string {\n  return arg.toString();\n}\n\nconst ItineraryBody = ({\n  accessibilityScoreGradationMap,\n  AlertBodyIcon,\n  AlertToggleIcon,\n  alwaysCollapseAlerts = false,\n  className,\n  config,\n  defaultFareSelector,\n  diagramVisible,\n  frameLeg = noop,\n  itinerary,\n  LegIcon,\n  LineColumnContent,\n  mapillaryCallback,\n  mapillaryKey,\n  PlaceName,\n  RouteDescription,\n  RouteDescriptionFooter,\n  routingType = \"ITINERARY\",\n  setActiveLeg,\n  setLegDiagram,\n  setViewedTrip,\n  showAgencyInfo,\n  showElevationProfile,\n  showLegIcon,\n  showMapButtonColumn = true,\n  showViewTripButton,\n  TimeColumnContent,\n  toRouteAbbreviation = defaultRouteAbbr,\n  TransitLegSubheader,\n  TransitLegSummary\n}: ItineraryBodyProps): ReactElement => {\n  /*\n    TODO: replace component should update logic? companies is simply used to\n    trigger a rerender of this component itinerary is also another criteria\n    that is used to trigger a rerender but has more reuse than companies here\n  */\n  const rows = [];\n  let followsTransit = false;\n  let lastLeg;\n  itinerary.legs.forEach((leg, i) => {\n    function createPlaceRow(isDestination) {\n      // Create a row containing this leg's start place and leg traversal details\n      rows.push(\n        <PlaceRow\n          accessibilityScoreGradationMap={accessibilityScoreGradationMap}\n          AlertToggleIcon={AlertToggleIcon}\n          AlertBodyIcon={AlertBodyIcon}\n          alwaysCollapseAlerts={alwaysCollapseAlerts}\n          // eslint-disable-next-line react/no-array-index-key\n          key={i + (isDestination ? 1 : 0)}\n          config={config}\n          defaultFareSelector={defaultFareSelector}\n          diagramVisible={diagramVisible}\n          followsTransit={followsTransit}\n          frameLeg={frameLeg}\n          isDestination={isDestination}\n          lastLeg={lastLeg}\n          leg={leg}\n          LegIcon={LegIcon}\n          legIndex={i}\n          LineColumnContent={LineColumnContent}\n          mapillaryCallback={mapillaryCallback}\n          mapillaryKey={mapillaryKey}\n          PlaceName={PlaceName}\n          RouteDescription={RouteDescription}\n          RouteDescriptionFooter={RouteDescriptionFooter}\n          routingType={routingType}\n          setActiveLeg={setActiveLeg}\n          setLegDiagram={setLegDiagram}\n          setViewedTrip={setViewedTrip}\n          showAgencyInfo={showAgencyInfo}\n          showElevationProfile={showElevationProfile}\n          showLegIcon={showLegIcon}\n          showMapButtonColumn={showMapButtonColumn}\n          showViewTripButton={showViewTripButton}\n          TimeColumnContent={TimeColumnContent}\n          toRouteAbbreviation={toRouteAbbreviation}\n          TransitLegSubheader={TransitLegSubheader}\n          TransitLegSummary={TransitLegSummary}\n        />\n      );\n    }\n\n    createPlaceRow(false);\n    // If this is the last leg, create a special PlaceRow for the destination only.\n    if (i === itinerary.legs.length - 1) {\n      createPlaceRow(true);\n    }\n    if (leg.transitLeg) followsTransit = true;\n    lastLeg = leg;\n  });\n  return (\n    <S.ItineraryBody className={className}>\n      TEST\n      {rows}\n    </S.ItineraryBody>\n  );\n};\n\nexport default ItineraryBody;\n\nexport { AccessibilityRating };\n"],"file":"index.js"}