{"version":3,"sources":["../../src/ItineraryBody/place-row.tsx"],"names":["PlaceRow","accessibilityScoreGradationMap","AlertBodyIcon","AlertToggleIcon","alwaysCollapseAlerts","config","defaultFareSelector","diagramVisible","followsTransit","frameLeg","isDestination","lastLeg","leg","LegIcon","legIndex","LineColumnContent","mapillaryCallback","mapillaryKey","PlaceName","RouteDescription","RouteDescriptionFooter","setActiveLeg","setLegDiagram","setViewedTrip","showAgencyInfo","showElevationProfile","showLegIcon","showMapButtonColumn","showViewTripButton","TimeColumnContent","DefaultTimeColumnContent","toRouteAbbreviation","TransitLegSubheader","TransitLegSummary","interline","interlineWithPreviousLeg","place","to","from","vertexType","mode","intl","viewOnMapMessage","formatMessage","defaultMessage","defaultMessages","description","id","formattedPlace","direction","accessibilityScore","location","transitLeg","homeTimezone","coreUtils","route","getTransitOperatorFromLeg","transitOperators"],"mappings":"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","sourcesContent":["import coreUtils from \"@opentripplanner/core-utils\";\nimport React, { ReactElement } from \"react\";\nimport { FormattedMessage, useIntl } from \"react-intl\";\n\nimport DefaultTimeColumnContent from \"../defaults/time-column-content\";\nimport AccessLegBody from \"../AccessLegBody\";\nimport * as S from \"../styled\";\nimport TransitLegBody from \"../TransitLegBody\";\n\nimport AccessibilityRating from \"./accessibility-rating\";\nimport { PlaceRowProps } from \"../types\";\nimport { defaultMessages } from \"../util\";\n\n/*\n  TODO: Wondering if it's possible for us to destructure the time\n  preferences from the config object and avoid making the props list so long\n*/\nexport default function PlaceRow({\n  accessibilityScoreGradationMap,\n  AlertBodyIcon,\n  AlertToggleIcon,\n  alwaysCollapseAlerts,\n  config,\n  defaultFareSelector,\n  diagramVisible,\n  followsTransit,\n  frameLeg,\n  isDestination,\n  lastLeg,\n  leg,\n  LegIcon,\n  legIndex,\n  LineColumnContent,\n  mapillaryCallback,\n  mapillaryKey,\n  PlaceName,\n  RouteDescription,\n  RouteDescriptionFooter,\n  setActiveLeg,\n  setLegDiagram,\n  setViewedTrip,\n  showAgencyInfo,\n  showElevationProfile,\n  showLegIcon,\n  showMapButtonColumn,\n  showViewTripButton,\n  TimeColumnContent = DefaultTimeColumnContent,\n  toRouteAbbreviation,\n  TransitLegSubheader,\n  TransitLegSummary\n}: PlaceRowProps): ReactElement {\n  // NOTE: Previously there was a check for itineraries that changed vehicles\n  // at a single stop, which would render the stop place the same as the\n  // interline stop. However, this prevents the user from being able to click\n  // on the stop viewer in this case, which they may want to do in order to\n  // check the real-time arrival information for the next leg of their journey.\n  const interline = !!(!isDestination && leg.interlineWithPreviousLeg);\n  // const hideBorder = interline || !legIndex;\n  const place = isDestination ? { ...leg.to } : { ...leg.from };\n  // OTP2 marks both bikes and scooters as BIKESHARE in the vertextype\n  // To get the right label, we need to fix scooters to be \"VEHICLERENTAL\"\n  place.vertexType =\n    leg.mode === \"SCOOTER\" && !isDestination\n      ? \"VEHICLERENTAL\"\n      : place.vertexType;\n\n  const intl = useIntl();\n  const viewOnMapMessage = intl.formatMessage({\n    defaultMessage: defaultMessages[\"otpUi.ItineraryBody.viewOnMap\"],\n    description: \"Text describing the view-on-map button\",\n    id: \"otpUi.ItineraryBody.viewOnMap\"\n  });\n\n  const formattedPlace = direction => (\n    <PlaceName config={config} interline={interline} place={direction} />\n  );\n\n  return (\n    <S.PlaceRowWrapper key={legIndex || \"destination-place\"}>\n      <S.LineColumn>\n        <LineColumnContent\n          interline={interline}\n          isDestination={isDestination}\n          lastLeg={lastLeg}\n          leg={leg}\n          LegIcon={LegIcon}\n          legIndex={legIndex}\n          toRouteAbbreviation={toRouteAbbreviation}\n        />\n      </S.LineColumn>\n      {/* Dot separating interlined segments, if applicable */}\n      <S.PlaceHeader>\n        {/*\n              TODO: Need to rework this -- Need to display a marker\n              for an interline place\n            */}\n        {interline && <S.InterlineDot>&bull;</S.InterlineDot>}\n        <S.PlaceName aria-hidden>\n          <PlaceName config={config} interline={interline} place={place} />\n        </S.PlaceName>\n      </S.PlaceHeader>\n      <S.TimeColumn>\n        {/* Custom rendering of the departure/arrival time of the specified leg. */}\n        <TimeColumnContent isDestination={isDestination} leg={leg} />\n        {!isDestination && leg.accessibilityScore && (\n          // TODO: Reorder markup so accessibility info doesn't fall between time and destination.\n          <AccessibilityRating\n            gradationMap={accessibilityScoreGradationMap}\n            isLeg\n            score={leg.accessibilityScore}\n          />\n        )}\n      </S.TimeColumn>\n      <S.InvisibleAdditionalDetails>\n        {!isDestination ? (\n          <FormattedMessage\n            description=\"Add starting location for access legs\"\n            id=\"otpUi.TransitLegBody.fromLocation\"\n            values={{\n              location: formattedPlace(leg.from)\n            }}\n          />\n        ) : (\n          <FormattedMessage\n            id=\"otpUi.TransitLegBody.arriveAt\"\n            defaultMessage={defaultMessages[\"otpUi.TransitLegBody.arriveAt\"]}\n            description=\"Identifies end of the trip to screenreaders\"\n            values={{ place: formattedPlace(leg.to) }}\n          />\n        )}\n      </S.InvisibleAdditionalDetails>\n      <S.PlaceDetails>\n        {/* Show the leg, if not rendering the destination */}\n        {!isDestination &&\n          (leg.transitLeg ? (\n            /* This is a transit leg */\n            <TransitLegBody\n              AlertBodyIcon={AlertBodyIcon}\n              AlertToggleIcon={AlertToggleIcon}\n              alwaysCollapseAlerts={alwaysCollapseAlerts}\n              defaultFareSelector={defaultFareSelector}\n              leg={leg}\n              legDestination={formattedPlace(leg.to)}\n              LegIcon={LegIcon}\n              legIndex={legIndex}\n              RouteDescription={RouteDescription}\n              RouteDescriptionFooter={RouteDescriptionFooter}\n              setActiveLeg={setActiveLeg}\n              setViewedTrip={setViewedTrip}\n              showAgencyInfo={showAgencyInfo}\n              showViewTripButton={showViewTripButton}\n              timeZone={config.homeTimezone}\n              TransitLegSubheader={TransitLegSubheader}\n              TransitLegSummary={TransitLegSummary}\n              transitOperator={coreUtils.route.getTransitOperatorFromLeg(\n                leg,\n                config.transitOperators\n              )}\n            />\n          ) : (\n            /* This is an access (e.g. walk/bike/etc.) leg */\n            <AccessLegBody\n              config={config}\n              diagramVisible={diagramVisible}\n              followsTransit={followsTransit}\n              leg={leg}\n              LegIcon={LegIcon}\n              legIndex={legIndex}\n              mapillaryCallback={mapillaryCallback}\n              mapillaryKey={mapillaryKey}\n              setActiveLeg={setActiveLeg}\n              setLegDiagram={setLegDiagram}\n              showElevationProfile={showElevationProfile}\n              showLegIcon={showLegIcon}\n              TransitLegSubheader={TransitLegSubheader}\n            />\n          ))}\n      </S.PlaceDetails>\n      {/* This prop is a string for some reason... */}\n      {showMapButtonColumn && (\n        <S.MapButtonColumn hideBorder=\"true\">\n          <S.MapButton\n            aria-label={viewOnMapMessage}\n            onClick={() => frameLeg({ isDestination, leg, legIndex, place })}\n            title={viewOnMapMessage}\n          >\n            <S.MapIcon title={viewOnMapMessage} />\n          </S.MapButton>\n        </S.MapButtonColumn>\n      )}\n    </S.PlaceRowWrapper>\n  );\n}\n"],"file":"place-row.js"}