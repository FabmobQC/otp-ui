{"version":3,"sources":["../../src/defaults/access-leg-step.tsx"],"names":["AccessLegStep","className","step","style","absoluteDirection","relativeDirection","streetName","intl","street","stepContent","action","defaultMessages","heading","distance"],"mappings":";;;;;;;;;AAEA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AACA;;;;;;AAVA;;AAgBA;AACA;AACA;AACe,SAASA,aAAT,CAAuB;AACpCC,EAAAA,SADoC;AAEpCC,EAAAA,IAFoC;AAGpCC,EAAAA;AAHoC,CAAvB,EAIS;AACtB,QAAM;AAAEC,IAAAA,iBAAF;AAAqBC,IAAAA,iBAArB;AAAwCC,IAAAA;AAAxC,MAAuDJ,IAA7D;AACA,QAAMK,IAAI,GAAG,yBAAb;;AAEA,QAAMC,MAAM,gBACV,6BAAC,CAAD,CAAG,cAAH,qBACE,6BAAC,mBAAD;AAAY,IAAA,aAAa,EAAEF;AAA3B,IADF,CADF;;AAMA,MAAIG,WAAJ;AACA,QAAMC,MAAM,GAAGL,iBAAf;;AACA,UAAQA,iBAAR;AACE,SAAK,UAAL;AACEI,MAAAA,WAAW,gBACT,6BAAC,2BAAD;AACE,QAAA,cAAc,EAAEE,sBAAgB,kCAAhB,CADlB;AAEE,QAAA,WAAW,EAAC,6BAFd;AAGE,QAAA,EAAE,EAAC,kCAHL;AAIE,QAAA,MAAM,EAAE;AAAEH,UAAAA;AAAF;AAJV,QADF;AAQA;;AACF,SAAK,QAAL;AACE,YAAMI,OAAO,GAAGR,iBAAhB;AACAK,MAAAA,WAAW,gBACT,6BAAC,2BAAD;AACE,QAAA,cAAc,EAAEE,sBAAgB,gCAAhB,CADlB;AAEE,QAAA,WAAW,EAAC,uDAFd;AAGE,QAAA,EAAE,EAAC,gCAHL;AAIE,QAAA,MAAM,EAAE;AACNC,UAAAA,OAAO,eAAE,6BAAC,6BAAD;AAAsB,YAAA,OAAO,EAAEA;AAA/B,YADH;AAENJ,UAAAA;AAFM;AAJV,QADF;AAWA;;AACF,SAAK,eAAL;AACA,SAAK,cAAL;AACEC,MAAAA,WAAW,gBACT,6BAAC,2BAAD;AACE,QAAA,cAAc,EAAEE,sBAAgB,iCAAhB,CADlB;AAEE,QAAA,WAAW,EAAC,sDAFd;AAGE,QAAA,EAAE,EAAC,iCAHL;AAIE,QAAA,MAAM,EAAE;AACNT,UAAAA,IAAI,eAAE,6BAAC,4BAAD;AAAqB,YAAA,MAAM,EAAEQ;AAA7B,YADA;AAENF,UAAAA;AAFM;AAJV,QADF;AAWA;;AACF,SAAK,cAAL;AACEC,MAAAA,WAAW,gBACT,6BAAC,2BAAD;AACE,QAAA,cAAc,EACZE,sBAAgB,qCAAhB,CAFJ;AAIE,QAAA,WAAW,EAAC,sDAJd;AAKE,QAAA,EAAE,EAAC,qCALL;AAME,QAAA,MAAM,EAAE;AACNH,UAAAA;AADM;AANV,QADF;AAYA;;AACF;AACEC,MAAAA,WAAW,gBACT,6BAAC,2BAAD;AACE,QAAA,cAAc,EAAEE,sBAAgB,iCAAhB,CADlB;AAEE,QAAA,WAAW,EAAC,sDAFd;AAGE,QAAA,EAAE,EAAC,iCAHL;AAIE,QAAA,MAAM,EAAE;AACNT,UAAAA,IAAI,eAAE,6BAAC,4BAAD;AAAqB,YAAA,MAAM,EAAEQ;AAA7B,YADA;AAENF,UAAAA;AAFM;AAJV,QADF;AAtDJ;;AAkEA;AAAA;AACE;AACA;AACA;AAAM,MAAA,SAAS,EAAEP,SAAjB;AAA4B,MAAA,KAAK,EAAEE;AAAnC,OACGM,WADH,EAGG,CAAAP,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEW,QAAN,IAAiB,CAAjB,iBACC,6BAAC,CAAD,CAAG,UAAH,QACG,8CAAuBX,IAAI,CAACW,QAA5B,EAAsC,KAAtC,EAA6CN,IAA7C,CADH,CAJJ;AAHF;AAaD","sourcesContent":["/* eslint-disable no-case-declarations */\nimport { Step } from \"@opentripplanner/types\";\nimport React, { HTMLAttributes, ReactElement } from \"react\";\nimport { FormattedMessage, useIntl } from \"react-intl\";\nimport { humanizeDistanceString } from \"@opentripplanner/humanize-distance\";\nimport { defaultMessages } from \"../util\";\n\nimport * as S from \"../styled\";\nimport AccessLegStepAction, { Action } from \"./access-leg-step-action\";\nimport AccessLegStepHeading, { Heading } from \"./access-leg-step-heading\";\nimport StreetName from \"./street-name\";\n\ninterface Props extends HTMLAttributes<HTMLSpanElement> {\n  step: Step;\n}\n\n/**\n * Renders a step of an access leg.\n */\nexport default function AccessLegStep({\n  className,\n  step,\n  style\n}: Props): ReactElement {\n  const { absoluteDirection, relativeDirection, streetName } = step;\n  const intl = useIntl();\n\n  const street = (\n    <S.StepStreetName>\n      <StreetName rawStreetName={streetName} />\n    </S.StepStreetName>\n  );\n\n  let stepContent;\n  const action = relativeDirection as Action;\n  switch (relativeDirection) {\n    case \"ELEVATOR\":\n      stepContent = (\n        <FormattedMessage\n          defaultMessage={defaultMessages[\"otpUi.AccessLegBody.stepElevator\"]}\n          description=\"Text for taking an elevator\"\n          id=\"otpUi.AccessLegBody.stepElevator\"\n          values={{ street }}\n        />\n      );\n      break;\n    case \"DEPART\":\n      const heading = absoluteDirection as Heading;\n      stepContent = (\n        <FormattedMessage\n          defaultMessage={defaultMessages[\"otpUi.AccessLegBody.stepDepart\"]}\n          description=\"Describes the initial action to take for an itinerary\"\n          id=\"otpUi.AccessLegBody.stepDepart\"\n          values={{\n            heading: <AccessLegStepHeading heading={heading} />,\n            street\n          }}\n        />\n      );\n      break;\n    case \"ENTER_STATION\":\n    case \"EXIT_STATION\":\n      stepContent = (\n        <FormattedMessage\n          defaultMessage={defaultMessages[\"otpUi.AccessLegBody.stepStation\"]}\n          description=\"Describes an action to progress through an itinerary\"\n          id=\"otpUi.AccessLegBody.stepStation\"\n          values={{\n            step: <AccessLegStepAction action={action} />,\n            street\n          }}\n        />\n      );\n      break;\n    case \"FOLLOW_SIGNS\":\n      stepContent = (\n        <FormattedMessage\n          defaultMessage={\n            defaultMessages[\"otpUi.AccessLegBody.stepFollowSigns\"]\n          }\n          description=\"Describes an action to progress through an itinerary\"\n          id=\"otpUi.AccessLegBody.stepFollowSigns\"\n          values={{\n            street\n          }}\n        />\n      );\n      break;\n    default:\n      stepContent = (\n        <FormattedMessage\n          defaultMessage={defaultMessages[\"otpUi.AccessLegBody.stepGeneric\"]}\n          description=\"Describes an action to progress through an itinerary\"\n          id=\"otpUi.AccessLegBody.stepGeneric\"\n          values={{\n            step: <AccessLegStepAction action={action} />,\n            street\n          }}\n        />\n      );\n  }\n  return (\n    // Return an HTML element which is passed a className (and style props)\n    // for styled-components support.\n    <span className={className} style={style}>\n      {stepContent}\n      {/* TODO: Implement metric vs imperial (up until now it's just imperial). */}\n      {step?.distance > 0 && (\n        <S.StepLength>\n          {humanizeDistanceString(step.distance, false, intl)}\n        </S.StepLength>\n      )}\n    </span>\n  );\n}\n"],"file":"access-leg-step.js"}