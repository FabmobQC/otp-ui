{"version":3,"sources":["../../src/defaults/route-long-name.tsx"],"names":["toPrefix","contents","RouteLongName","className","leg","style","headsign","otp1Headsign","trip","tripHeadsign","routeLongName","hideRouteLongName","defaultMessages","routeName"],"mappings":";;;;;;;;;AAAA;;AAEA;;AACA;;AACA;;AAEA;;AACA;;;;;;AAMA;AACA;AACA;AACA,SAASA,QAAT,CAAkBC,QAAlB,EAAwD;AACtD,sBACE,6BAAC,CAAD,CAAG,4BAAH,QAAiCA,QAAjC,CADF;AAGD;;AAEc,SAASC,aAAT,CAAuB;AACpCC,EAAAA,SADoC;AAEpCC,EAAAA,GAFoC;AAGpCC,EAAAA;AAHoC,CAAvB,EAIS;AACtB,QAAM;AAAEC,IAAAA,QAAQ,EAAEC,YAAZ;AAA0BC,IAAAA;AAA1B,MAAmCJ,GAAzC;AACA,QAAME,QAAQ,GAAG,CAAAE,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEC,YAAN,KAAsBF,YAAvC;AACA,QAAMG,aAAa,GAAG,oCAAoBN,GAApB,CAAtB,CAHsB,CAItB;;AACA,QAAMO,iBAAiB,GACrB,yCAAkBL,QAAQ,IAAI,EAA9B,EAAkCI,aAAa,IAAI,EAAnD,IAAyD,IAAzD,IACA,CAACA,aAFH;AAGA,sBACE;AAAM,IAAA,SAAS,EAAEP,SAAjB;AAA4B,IAAA,KAAK,EAAEE;AAAnC,KACG,CAACM,iBAAD,IAAsBL,QAAtB,gBACC,6BAAC,2BAAD;AACE,IAAA,cAAc,EACZM,sBAAgB,uCAAhB,CAFJ;AAIE,IAAA,WAAW,EAAC,yCAJd;AAKE,IAAA,EAAE,EAAC,uCALL;AAME,IAAA,MAAM,EAAE;AACNN,MAAAA,QADM;AAENO,MAAAA,SAAS,EAAEH,aAFL;AAGNV,MAAAA;AAHM;AANV,IADD,GAcCM,QAAQ,IAAII,aAfhB,CADF;AAoBD","sourcesContent":["import { getLegRouteLongName } from \"@opentripplanner/core-utils/lib/itinerary\";\nimport { Leg } from \"@opentripplanner/types\";\nimport React, { HTMLAttributes, ReactElement } from \"react\";\nimport { FormattedMessage } from \"react-intl\";\nimport { compareTwoStrings } from \"string-similarity\";\n\nimport * as S from \"../styled\";\nimport { defaultMessages } from \"../util\";\n\ninterface Props extends HTMLAttributes<HTMLSpanElement> {\n  leg: Leg;\n}\n\n/**\n * Helper function to format the \"to\" separator.\n */\nfunction toPrefix(contents: ReactElement): ReactElement {\n  return (\n    <S.LegDescriptionHeadsignPrefix>{contents}</S.LegDescriptionHeadsignPrefix>\n  );\n}\n\nexport default function RouteLongName({\n  className,\n  leg,\n  style\n}: Props): ReactElement {\n  const { headsign: otp1Headsign, trip } = leg;\n  const headsign = trip?.tripHeadsign || otp1Headsign;\n  const routeLongName = getLegRouteLongName(leg);\n  // Hide route long name if it contains similar information to the headsign\n  const hideRouteLongName =\n    compareTwoStrings(headsign || \"\", routeLongName || \"\") > 0.25 ||\n    !routeLongName;\n  return (\n    <span className={className} style={style}>\n      {!hideRouteLongName && headsign ? (\n        <FormattedMessage\n          defaultMessage={\n            defaultMessages[\"otpUi.TransitLegBody.routeDescription\"]\n          }\n          description=\"Displays the route name and destination\"\n          id=\"otpUi.TransitLegBody.routeDescription\"\n          values={{\n            headsign,\n            routeName: routeLongName,\n            toPrefix\n          }}\n        />\n      ) : (\n        headsign || routeLongName\n      )}\n    </span>\n  );\n}\n"],"file":"route-long-name.js"}