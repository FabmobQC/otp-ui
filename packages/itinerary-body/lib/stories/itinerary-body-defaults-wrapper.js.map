{"version":3,"sources":["../../src/stories/itinerary-body-defaults-wrapper.tsx"],"names":["config","require","ItineraryBodyDefaultsWrapper","Component","constructor","props","setLegDiagram","leg","setState","diagramVisible","state","render","alwaysCollapseAlerts","defaultFareSelector","hideDrivingDirections","itinerary","LegIcon","TriMetLegIcon","LineColumnContent","PlaceName","RouteDescription","RouteDescriptionFooter","undefined","showAgencyInfo","showLegIcon","showMapButtonColumn","showViewTripButton","styledItinerary","TimeColumnContent","toRouteAbbreviation","r","toString","substr","TransitLegSubheader","TransitLegSummary","AlertToggleIcon","AlertBodyIcon","ItineraryBodyComponent","StyledItineraryBody","OtpRRStyledItineraryBody","ItineraryBody","DefaultLineColumnContent","DefaultPlaceName","DefaultRouteDescription","DefaultRouteDescriptionFooter","DefaultTransitLegSummary"],"mappings":"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","sourcesContent":["// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore FIXME: Create TypeScript types for the icons package.\nimport { TriMetLegIcon } from \"@opentripplanner/icons\";\nimport { Leg } from \"@opentripplanner/types\";\nimport React, { Component, ReactElement } from \"react\";\nimport { action } from \"@storybook/addon-actions\";\n\nimport ItineraryBody from \"..\";\nimport DefaultLineColumnContent from \"../defaults/line-column-content\";\nimport DefaultPlaceName from \"../defaults/place-name\";\nimport DefaultRouteDescription from \"../defaults/route-description\";\nimport { DefaultRouteDescriptionFooter } from \"./route-description-footer\";\nimport DefaultTransitLegSummary from \"../defaults/transit-leg-summary\";\nimport { StyledItineraryBody } from \"../demos\";\nimport OtpRRStyledItineraryBody from \"../otp-react-redux/itinerary-body\";\nimport { ItineraryBodyProps } from \"../types\";\n\nconst config = require(\"../__mocks__/config.json\");\n\ntype Props = ItineraryBodyProps & {\n  hideDrivingDirections?: boolean;\n  styledItinerary?: string;\n};\n\ninterface State {\n  diagramVisible: Leg;\n}\n\nexport default class ItineraryBodyDefaultsWrapper extends Component<\n  Props,\n  State\n> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      diagramVisible: null\n    };\n  }\n\n  setLegDiagram = (leg: Leg): void => {\n    this.setState({ diagramVisible: leg });\n  };\n\n  render(): ReactElement {\n    const {\n      alwaysCollapseAlerts,\n      defaultFareSelector,\n      hideDrivingDirections = false,\n      itinerary,\n      LegIcon = TriMetLegIcon,\n      LineColumnContent,\n      PlaceName,\n      RouteDescription,\n      RouteDescriptionFooter = undefined,\n      showAgencyInfo,\n      showLegIcon,\n      showMapButtonColumn = true,\n      showViewTripButton,\n      styledItinerary,\n      TimeColumnContent,\n      toRouteAbbreviation = r => r?.toString()?.substr(0, 2),\n      TransitLegSubheader,\n      TransitLegSummary,\n      AlertToggleIcon,\n      AlertBodyIcon\n    } = this.props;\n    const { diagramVisible } = this.state;\n    let ItineraryBodyComponent;\n    switch (styledItinerary) {\n      case \"pink-legs\":\n        ItineraryBodyComponent = StyledItineraryBody;\n        break;\n      case \"otp-rr\":\n        ItineraryBodyComponent = OtpRRStyledItineraryBody;\n        break;\n      default:\n        ItineraryBodyComponent = ItineraryBody;\n    }\n\n    config.itinerary = {\n      hideDrivingDirections\n    };\n\n    return (\n      <ItineraryBodyComponent\n        AlertBodyIcon={AlertBodyIcon}\n        AlertToggleIcon={AlertToggleIcon}\n        alwaysCollapseAlerts={alwaysCollapseAlerts}\n        config={config}\n        defaultFareSelector={defaultFareSelector}\n        diagramVisible={diagramVisible}\n        frameLeg={action(\"frameLeg\")}\n        itinerary={itinerary}\n        LegIcon={LegIcon}\n        LineColumnContent={LineColumnContent || DefaultLineColumnContent}\n        mapillaryKey=\"fake key, but ok because the api response is also fake\"\n        PlaceName={PlaceName || DefaultPlaceName}\n        RouteDescription={RouteDescription || DefaultRouteDescription}\n        RouteDescriptionFooter={\n          RouteDescriptionFooter || DefaultRouteDescriptionFooter\n        }\n        routingType=\"ITINERARY\"\n        setActiveLeg={action(\"setActiveLeg\")}\n        setLegDiagram={this.setLegDiagram}\n        setViewedTrip={action(\"setViewedTrip\")}\n        showAgencyInfo={showAgencyInfo}\n        showElevationProfile\n        showLegIcon={showLegIcon}\n        showMapButtonColumn={showMapButtonColumn}\n        showViewTripButton={showViewTripButton}\n        TimeColumnContent={TimeColumnContent}\n        toRouteAbbreviation={toRouteAbbreviation}\n        TransitLegSubheader={TransitLegSubheader}\n        TransitLegSummary={TransitLegSummary || DefaultTransitLegSummary}\n      />\n    );\n  }\n}\n"],"file":"itinerary-body-defaults-wrapper.js"}