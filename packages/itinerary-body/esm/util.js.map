{"version":3,"sources":["../src/util.ts"],"names":["flatten","defaultEnglishMessages","defaultMessages","toSafeRouteColor","routeColor","startsWith","toModeColor","mode","toModeBorderColor","toModeBorder","getCompanyForNetwork","networkString","companies","company","find","co","id","console","warn","getVehicleType","type","intl","formatMessage","defaultMessage","description","getPlaceName","place","address","split","networks","rentalVehicle","network","name","match","length","overridePlaceNames","label","vehicleType","vertexType","parseOTP2Minute","otp2Minute"],"mappings":"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","sourcesContent":["import flatten from \"flat\";\nimport { Company, Place } from \"@opentripplanner/types\";\nimport { IntlShape } from \"react-intl\";\n\n// Load the default messages.\nimport defaultEnglishMessages from \"../i18n/en-US.yml\";\n\n// HACK: We should flatten the messages loaded above because\n// the YAML loaders behave differently between webpack and our version of jest:\n// - the yaml loader for webpack returns a nested object,\n// - the yaml loader for jest returns messages with flattened ids.\nexport const defaultMessages: Record<string, string> = flatten(\n  defaultEnglishMessages\n);\n\n/**\n * the GTFS spec indicates that the route color should not have a leading hash\n * symbol, so add one if the routeColor exists and doesn't start with a hash\n * symbol.\n */\nexport const toSafeRouteColor = (routeColor: string): string => {\n  return (\n    routeColor && (routeColor.startsWith(\"#\") ? routeColor : `#${routeColor}`)\n  );\n};\n\nexport const toModeColor = (mode: string, routeColor: string): string => {\n  switch (mode) {\n    case \"WALK\":\n      return `#e9e9e9`;\n    case \"BICYCLE\":\n    case \"BICYCLE_RENT\":\n      return `red`;\n    case \"CAR\":\n      return `grey`;\n    case \"MICROMOBILITY\":\n    case \"MICROMOBILITY_RENT\":\n    case \"SCOOTER\":\n      return `#f5a729`;\n    default:\n      return toSafeRouteColor(routeColor) || \"#084c8d\";\n  }\n};\n\nexport const toModeBorderColor = (mode: string, routeColor: string): string => {\n  switch (mode) {\n    case \"WALK\":\n      return `#484848`;\n    case \"BICYCLE\":\n    case \"BICYCLE_RENT\":\n      return `red`;\n    case \"CAR\":\n      return `grey`;\n    case \"MICROMOBILITY\":\n    case \"MICROMOBILITY_RENT\":\n    case \"SCOOTER\":\n      return `#f5a729`;\n    default:\n      return toSafeRouteColor(routeColor) || \"#008ab0\";\n  }\n};\n\nexport const toModeBorder = (mode: string, routeColor: string): string => {\n  switch (mode) {\n    case \"WALK\":\n    case \"BICYCLE\":\n    case \"BICYCLE_RENT\":\n    case \"CAR\":\n    case \"MICROMOBILITY\":\n    case \"MICROMOBILITY_RENT\":\n    case \"SCOOTER\":\n      return `dotted 4px ${toModeBorderColor(mode, routeColor)}`;\n    default:\n      return `solid 8px ${toModeBorderColor(mode, routeColor)}`;\n  }\n};\n\n/**\n * FIXME: Move this method back to core-utils when package is localized.\n */\nfunction getCompanyForNetwork(\n  networkString: string,\n  companies: Company[] = []\n) {\n  const company = companies.find(co => co.id === networkString);\n  if (!company) {\n    console.warn(\n      `No company found in config.yml that matches rented vehicle network: ${networkString}`,\n      companies\n    );\n  }\n  return company;\n}\n\n/**\n * Gets a localized version of a vehicle type.\n */\nexport function getVehicleType(type: string, intl: IntlShape): string {\n  switch (type) {\n    case \"BIKEPARK\":\n      return intl.formatMessage({\n        defaultMessage: defaultMessages[\"otpUi.AccessLegBody.vehicleType.bike\"],\n        description: \"Bike vehicle type\",\n        id: \"otpUi.AccessLegBody.vehicleType.bike\"\n      });\n    case \"BIKESHARE\":\n      return intl.formatMessage({\n        defaultMessage:\n          defaultMessages[\"otpUi.AccessLegBody.vehicleType.bikeshare\"],\n        description: \"Bike share vehicle type\",\n        id: \"otpUi.AccessLegBody.vehicleType.bikeshare\"\n      });\n    case \"CARSHARE\":\n      return intl.formatMessage({\n        defaultMessage: defaultMessages[\"otpUi.AccessLegBody.vehicleType.car\"],\n        description: \"Car vehicle type\",\n        id: \"otpUi.AccessLegBody.vehicleType.car\"\n      });\n    case \"VEHICLERENTAL\":\n      return intl.formatMessage({\n        defaultMessage:\n          defaultMessages[\"otpUi.AccessLegBody.vehicleType.escooter\"],\n        description: \"E-scooter vehicle type\",\n        id: \"otpUi.AccessLegBody.vehicleType.escooter\"\n      });\n    default:\n      return intl.formatMessage({\n        defaultMessage:\n          defaultMessages[\"otpUi.AccessLegBody.vehicleType.vehicle\"],\n        description: \"Generic vehicle type\",\n        id: \"otpUi.AccessLegBody.vehicleType.vehicle\"\n      });\n  }\n}\n\n/**\n * Generates a new place name for micromobility stations\n * @param place OTP Place from micromobility location\n * @param companies Configured micromobility companies\n * @param intl IntlShape object\n * @returns User facing string for place\n */\nexport function getPlaceName(\n  place: Place,\n  companies: Company[] = [],\n  intl?: IntlShape\n): string {\n  // If address is provided (i.e. for carshare station, use it)\n  if (place.address) return place.address.split(\",\")?.[0];\n\n  // Some vehicle rental pick up locations are just a UUID.\n  // Other times, it can be a name with relevant information for the user.\n  // Here we detect if the name is just a UUID and generate a better name.\n  // It is also possible to configure station name overrides in the config using overridePlaceNames.\n  const company = getCompanyForNetwork(\n    place.networks?.[0] || place?.rentalVehicle?.network,\n    companies\n  );\n  if (\n    (place.name.match(/-/g) || []).length > 3 ||\n    company?.overridePlaceNames\n  ) {\n    if (company && intl) {\n      return intl.formatMessage(\n        {\n          defaultMessage: defaultMessages[\"otpUi.AccessLegBody.vehicleTitle\"],\n          description: \"Formats rental vehicle company and type\",\n          id: \"otpUi.AccessLegBody.vehicleTitle\"\n        },\n        {\n          company: company.label,\n          vehicleType: getVehicleType(place.vertexType, intl)\n        }\n      );\n    }\n  }\n  // Default to place name\n  return place.name;\n}\n\n// TODO: is this the best way to do this?\nexport const parseOTP2Minute = (otp2Minute: string): string => {\n  return otp2Minute.split(\"PT\")[1].split(\"M\")[0];\n};\n"],"file":"util.js"}