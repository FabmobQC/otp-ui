{"version":3,"sources":["../../src/defaults/line-column-content.tsx"],"names":["getLegRouteLongName","getLegRouteShortName","LocationIcon","React","useIntl","RouteBadge","S","defaultMessages","getTravelMode","modeId","intl","formatMessage","defaultMessage","description","id","LineColumnContent","interline","isDestination","leg","LegIcon","toRouteAbbreviation","mode","routeColor","transitLeg","travelByMessage","routeShortName","parseInt"],"mappings":"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","sourcesContent":["import {\n  getLegRouteLongName,\n  getLegRouteShortName\n} from \"@opentripplanner/core-utils/lib/itinerary\";\nimport LocationIcon from \"@opentripplanner/location-icon\";\nimport React, { ReactElement } from \"react\";\nimport { IntlShape, useIntl } from \"react-intl\";\n\nimport RouteBadge from \"../RouteBadge\";\nimport * as S from \"../styled\";\nimport { LineColumnContentProps } from \"../types\";\nimport { defaultMessages } from \"../util\";\n\n/**\n * Gets the travel mode in the ambient language.\n */\nfunction getTravelMode(modeId: string, intl: IntlShape): string {\n  switch (modeId) {\n    case \"BICYCLE\":\n      return intl.formatMessage({\n        defaultMessage:\n          defaultMessages[\"otpUi.ItineraryBody.travelByMode.bike\"],\n        description: \"Travel by bike\",\n        id: \"otpUi.ItineraryBody.travelByMode.bike\"\n      });\n    case \"CAR\":\n      return intl.formatMessage({\n        defaultMessage: defaultMessages[\"otpUi.ItineraryBody.travelByMode.car\"],\n        description: \"Travel by car\",\n        id: \"otpUi.ItineraryBody.travelByMode.car\"\n      });\n    case \"MICROMOBILITY\":\n    case \"SCOOTER\":\n      return intl.formatMessage({\n        defaultMessage:\n          defaultMessages[\"otpUi.ItineraryBody.travelByMode.escooter\"],\n        description: \"Travel by e-scooter\",\n        id: \"otpUi.ItineraryBody.travelByMode.escooter\"\n      });\n    case \"WALK\":\n      return intl.formatMessage({\n        defaultMessage:\n          defaultMessages[\"otpUi.ItineraryBody.travelByMode.walk\"],\n        description: \"Travel by walking\",\n        id: \"otpUi.ItineraryBody.travelByMode.walk\"\n      });\n    default:\n      return modeId;\n  }\n}\n\nexport default function LineColumnContent({\n  interline,\n  isDestination,\n  leg,\n  LegIcon,\n  toRouteAbbreviation\n}: LineColumnContentProps): ReactElement {\n  const { mode, routeColor, transitLeg } = leg;\n  const intl = useIntl();\n  const travelByMessage = intl.formatMessage(\n    {\n      defaultMessage: defaultMessages[\"otpUi.ItineraryBody.travelBy\"],\n      description: \"Instructs to travel using a mode\",\n      id: \"otpUi.ItineraryBody.travelBy\"\n    },\n    {\n      mode: getTravelMode(mode, intl)\n    }\n  );\n\n  const routeShortName = getLegRouteShortName(leg);\n\n  return (\n    <S.LegLine>\n      {!isDestination && <S.InnerLine mode={mode} routeColor={routeColor} />}\n      <S.LineBadgeContainer>\n        {/* TODO: This is a placeholder for a routebadge when we create the transit leg */}\n        {!interline && !isDestination && transitLeg && (\n          <RouteBadge\n            abbreviation={toRouteAbbreviation(\n              parseInt(routeShortName, 10) || routeShortName\n            )}\n            color={routeColor}\n            name={getLegRouteLongName(leg) || \"\"}\n          />\n        )}\n        {!interline && !isDestination && !transitLeg && (\n          <S.AccessBadge\n            aria-label={travelByMessage}\n            mode={mode}\n            routeColor={routeColor}\n          >\n            <LegIcon leg={leg} title={travelByMessage} width=\"66%\" />\n          </S.AccessBadge>\n        )}\n        {isDestination && (\n          <S.Destination>\n            <LocationIcon size={25} type=\"to\" />\n          </S.Destination>\n        )}\n      </S.LineBadgeContainer>\n    </S.LegLine>\n  );\n}\n"],"file":"line-column-content.js"}