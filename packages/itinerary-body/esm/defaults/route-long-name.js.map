{"version":3,"sources":["../../src/defaults/route-long-name.tsx"],"names":["getLegRouteLongName","React","FormattedMessage","compareTwoStrings","S","defaultMessages","toPrefix","contents","RouteLongName","className","leg","style","otp1Headsign","headsign","trip","tripHeadsign","routeLongName","hideRouteLongName","routeName"],"mappings":"AAAA,SAASA,mBAAT,QAAoC,2CAApC;AAEA,OAAOC,KAAP,MAAoD,OAApD;AACA,SAASC,gBAAT,QAAiC,YAAjC;AACA,SAASC,iBAAT,QAAkC,mBAAlC;AAEA,OAAO,KAAKC,CAAZ,MAAmB,WAAnB;AACA,SAASC,eAAT,QAAgC,SAAhC;;AAMA;AACA;AACA;AACA,SAASC,QAAT,CAAkBC,QAAlB,EAAwD;AACtD,sBACE,oBAAC,CAAD,CAAG,4BAAH,QAAiCA,QAAjC,CADF;AAGD;;AAED,eAAe,SAASC,aAAT,OAIS;AAAA,MAHtBC,SAGsB,QAHtBA,SAGsB;AAAA,MAFtBC,GAEsB,QAFtBA,GAEsB;AAAA,MADtBC,KACsB,QADtBA,KACsB;AACtB,MAAkBC,YAAlB,GAAyCF,GAAzC,CAAQG,QAAR;AAAA,MAAgCC,IAAhC,GAAyCJ,GAAzC,CAAgCI,IAAhC;AACA,MAAMD,QAAQ,GAAG,CAAAC,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEC,YAAN,KAAsBH,YAAvC;AACA,MAAMI,aAAa,GAAGhB,mBAAmB,CAACU,GAAD,CAAzC,CAHsB,CAItB;;AACA,MAAMO,iBAAiB,GACrBd,iBAAiB,CAACU,QAAQ,IAAI,EAAb,EAAiBG,aAAa,IAAI,EAAlC,CAAjB,GAAyD,IAAzD,IACA,CAACA,aAFH;AAGA,sBACE;AAAM,IAAA,SAAS,EAAEP,SAAjB;AAA4B,IAAA,KAAK,EAAEE;AAAnC,KACG,CAACM,iBAAD,IAAsBJ,QAAtB,gBACC,oBAAC,gBAAD;AACE,IAAA,cAAc,EACZR,eAAe,CAAC,uCAAD,CAFnB;AAIE,IAAA,WAAW,EAAC,yCAJd;AAKE,IAAA,EAAE,EAAC,uCALL;AAME,IAAA,MAAM,EAAE;AACNQ,MAAAA,QAAQ,EAARA,QADM;AAENK,MAAAA,SAAS,EAAEF,aAFL;AAGNV,MAAAA,QAAQ,EAARA;AAHM;AANV,IADD,GAcCO,QAAQ,IAAIG,aAfhB,CADF;AAoBD","sourcesContent":["import { getLegRouteLongName } from \"@opentripplanner/core-utils/lib/itinerary\";\nimport { Leg } from \"@opentripplanner/types\";\nimport React, { HTMLAttributes, ReactElement } from \"react\";\nimport { FormattedMessage } from \"react-intl\";\nimport { compareTwoStrings } from \"string-similarity\";\n\nimport * as S from \"../styled\";\nimport { defaultMessages } from \"../util\";\n\ninterface Props extends HTMLAttributes<HTMLSpanElement> {\n  leg: Leg;\n}\n\n/**\n * Helper function to format the \"to\" separator.\n */\nfunction toPrefix(contents: ReactElement): ReactElement {\n  return (\n    <S.LegDescriptionHeadsignPrefix>{contents}</S.LegDescriptionHeadsignPrefix>\n  );\n}\n\nexport default function RouteLongName({\n  className,\n  leg,\n  style\n}: Props): ReactElement {\n  const { headsign: otp1Headsign, trip } = leg;\n  const headsign = trip?.tripHeadsign || otp1Headsign;\n  const routeLongName = getLegRouteLongName(leg);\n  // Hide route long name if it contains similar information to the headsign\n  const hideRouteLongName =\n    compareTwoStrings(headsign || \"\", routeLongName || \"\") > 0.25 ||\n    !routeLongName;\n  return (\n    <span className={className} style={style}>\n      {!hideRouteLongName && headsign ? (\n        <FormattedMessage\n          defaultMessage={\n            defaultMessages[\"otpUi.TransitLegBody.routeDescription\"]\n          }\n          description=\"Displays the route name and destination\"\n          id=\"otpUi.TransitLegBody.routeDescription\"\n          values={{\n            headsign,\n            routeName: routeLongName,\n            toPrefix\n          }}\n        />\n      ) : (\n        headsign || routeLongName\n      )}\n    </span>\n  );\n}\n"],"file":"route-long-name.js"}