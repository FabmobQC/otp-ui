{"version":3,"sources":["../../src/defaults/access-leg-step.tsx"],"names":["React","FormattedMessage","useIntl","humanizeDistanceString","defaultMessages","S","AccessLegStepAction","AccessLegStepHeading","StreetName","AccessLegStep","className","step","style","absoluteDirection","relativeDirection","streetName","intl","street","stepContent","action","heading","distance"],"mappings":"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","sourcesContent":["/* eslint-disable no-case-declarations */\nimport { Step } from \"@opentripplanner/types\";\nimport React, { HTMLAttributes, ReactElement } from \"react\";\nimport { FormattedMessage, useIntl } from \"react-intl\";\nimport { humanizeDistanceString } from \"@opentripplanner/humanize-distance\";\nimport { defaultMessages } from \"../util\";\n\nimport * as S from \"../styled\";\nimport AccessLegStepAction, { Action } from \"./access-leg-step-action\";\nimport AccessLegStepHeading, { Heading } from \"./access-leg-step-heading\";\nimport StreetName from \"./street-name\";\n\ninterface Props extends HTMLAttributes<HTMLSpanElement> {\n  step: Step;\n}\n\n/**\n * Renders a step of an access leg.\n */\nexport default function AccessLegStep({\n  className,\n  step,\n  style\n}: Props): ReactElement {\n  const { absoluteDirection, relativeDirection, streetName } = step;\n  const intl = useIntl();\n\n  const street = (\n    <S.StepStreetName>\n      <StreetName rawStreetName={streetName} />\n    </S.StepStreetName>\n  );\n\n  let stepContent;\n  const action = relativeDirection as Action;\n  switch (relativeDirection) {\n    case \"ELEVATOR\":\n      stepContent = (\n        <FormattedMessage\n          defaultMessage={defaultMessages[\"otpUi.AccessLegBody.stepElevator\"]}\n          description=\"Text for taking an elevator\"\n          id=\"otpUi.AccessLegBody.stepElevator\"\n          values={{ street }}\n        />\n      );\n      break;\n    case \"DEPART\":\n      const heading = absoluteDirection as Heading;\n      stepContent = (\n        <FormattedMessage\n          defaultMessage={defaultMessages[\"otpUi.AccessLegBody.stepDepart\"]}\n          description=\"Describes the initial action to take for an itinerary\"\n          id=\"otpUi.AccessLegBody.stepDepart\"\n          values={{\n            heading: <AccessLegStepHeading heading={heading} />,\n            street\n          }}\n        />\n      );\n      break;\n    case \"ENTER_STATION\":\n    case \"EXIT_STATION\":\n      stepContent = (\n        <FormattedMessage\n          defaultMessage={defaultMessages[\"otpUi.AccessLegBody.stepStation\"]}\n          description=\"Describes an action to progress through an itinerary\"\n          id=\"otpUi.AccessLegBody.stepStation\"\n          values={{\n            step: <AccessLegStepAction action={action} />,\n            street\n          }}\n        />\n      );\n      break;\n    case \"FOLLOW_SIGNS\":\n      stepContent = (\n        <FormattedMessage\n          defaultMessage={\n            defaultMessages[\"otpUi.AccessLegBody.stepFollowSigns\"]\n          }\n          description=\"Describes an action to progress through an itinerary\"\n          id=\"otpUi.AccessLegBody.stepFollowSigns\"\n          values={{\n            street\n          }}\n        />\n      );\n      break;\n    default:\n      stepContent = (\n        <FormattedMessage\n          defaultMessage={defaultMessages[\"otpUi.AccessLegBody.stepGeneric\"]}\n          description=\"Describes an action to progress through an itinerary\"\n          id=\"otpUi.AccessLegBody.stepGeneric\"\n          values={{\n            step: <AccessLegStepAction action={action} />,\n            street\n          }}\n        />\n      );\n  }\n  return (\n    // Return an HTML element which is passed a className (and style props)\n    // for styled-components support.\n    <span className={className} style={style}>\n      {stepContent}\n      {/* TODO: Implement metric vs imperial (up until now it's just imperial). */}\n      {step?.distance > 0 && (\n        <S.StepLength>\n          {humanizeDistanceString(step.distance, false, intl)}\n        </S.StepLength>\n      )}\n    </span>\n  );\n}\n"],"file":"access-leg-step.js"}