{"version":3,"sources":["../../src/TransitLegBody/alerts-body.tsx"],"names":["differenceInCalendarDays","toDate","utcToZonedTime","coreUtils","React","FormattedMessage","S","defaultMessages","time","getUserTimezone","getCurrentDate","AlertDay","dayDiff","AlertsBody","alerts","AlertIcon","DefaultAlertBodyIcon","timeZone","sort","a","b","effectiveStartDate","map","i","description","alertDescriptionText","header","alertHeaderText","alertUrl","today","compareDate","Date","Math","abs","dateTime","day"],"mappings":"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","sourcesContent":["import { differenceInCalendarDays } from \"date-fns\";\nimport { toDate, utcToZonedTime } from \"date-fns-tz\";\nimport coreUtils from \"@opentripplanner/core-utils\";\nimport { Alert } from \"@opentripplanner/types\";\nimport React, { FunctionComponent, ReactElement } from \"react\";\nimport { FormattedMessage } from \"react-intl\";\n\nimport * as S from \"../styled\";\nimport { defaultMessages } from \"../util\";\n\nconst { getUserTimezone, getCurrentDate } = coreUtils.time;\n\ninterface Props {\n  alerts: Alert[];\n  AlertIcon?: FunctionComponent;\n  timeZone?: string;\n}\n\ninterface AlertDayProps {\n  dayDiff: number;\n}\n\n/**\n * Displays today/yesterday/tomorrow in the correct language.\n */\nfunction AlertDay({ dayDiff }: AlertDayProps) {\n  switch (dayDiff) {\n    case -1:\n      return (\n        <FormattedMessage\n          defaultMessage={\n            defaultMessages[\"otpUi.TransitLegBody.AlertsBody.yesterday\"]\n          }\n          description=\"Yesterday\"\n          id=\"otpUi.TransitLegBody.AlertsBody.yesterday\"\n        />\n      );\n    case 0:\n      return (\n        <FormattedMessage\n          defaultMessage={\n            defaultMessages[\"otpUi.TransitLegBody.AlertsBody.today\"]\n          }\n          description=\"Today\"\n          id=\"otpUi.TransitLegBody.AlertsBody.today\"\n        />\n      );\n    case 1:\n      return (\n        <FormattedMessage\n          defaultMessage={\n            defaultMessages[\"otpUi.TransitLegBody.AlertsBody.tomorrow\"]\n          }\n          description=\"Tomorrow\"\n          id=\"otpUi.TransitLegBody.AlertsBody.tomorrow\"\n        />\n      );\n    default:\n      // Not used.\n      return null;\n  }\n}\n\nexport default function AlertsBody({\n  alerts,\n  AlertIcon = S.DefaultAlertBodyIcon,\n  timeZone = getUserTimezone()\n}: Props): ReactElement {\n  if (typeof alerts !== \"object\") return null;\n  return (\n    <S.TransitAlerts>\n      {alerts\n        .sort((a, b) => b.effectiveStartDate - a.effectiveStartDate)\n        .map(\n          (\n            {\n              alertDescriptionText: description,\n              alertHeaderText: header,\n              alertUrl,\n              effectiveStartDate\n            },\n            i\n          ) => {\n            // If alert is effective as of +/- one day, use today, tomorrow, or\n            // yesterday with time. Otherwise, use long date format.\n            // The difference is expressed in calendar days based on the agency's time zone.\n            // Note: Previously, we used moment.diff(..., \"days\"), which reports the number of whole 24-hour periods\n            // between two timestamps/dates (not considering timezones or daylight time changes).\n            const today = toDate(getCurrentDate(timeZone));\n            const compareDate = utcToZonedTime(\n              new Date(effectiveStartDate),\n              timeZone\n            );\n            const dayDiff = differenceInCalendarDays(compareDate, today);\n\n            return (\n              <S.TransitAlert key={i} href={alertUrl}>\n                <S.TransitAlertIconContainer>\n                  <AlertIcon />\n                </S.TransitAlertIconContainer>\n                {header && (\n                  <S.TransitAlertHeader>{header}</S.TransitAlertHeader>\n                )}\n                <S.TransitAlertBody>{description}</S.TransitAlertBody>\n                <S.TransitAlertEffectiveDate>\n                  {Math.abs(dayDiff) <= 1 ? (\n                    <FormattedMessage\n                      defaultMessage={\n                        defaultMessages[\n                          \"otpUi.TransitLegBody.AlertsBody.effectiveTimeAndDate\"\n                        ]\n                      }\n                      description=\"Text with the time and date an alert takes effect\"\n                      id=\"otpUi.TransitLegBody.AlertsBody.effectiveTimeAndDate\"\n                      values={{\n                        dateTime: effectiveStartDate * 1000,\n                        day: <AlertDay dayDiff={dayDiff} />\n                      }}\n                    />\n                  ) : (\n                    <FormattedMessage\n                      defaultMessage={\n                        defaultMessages[\n                          \"otpUi.TransitLegBody.AlertsBody.effectiveDate\"\n                        ]\n                      }\n                      description=\"Text with the date an alert takes effect\"\n                      id=\"otpUi.TransitLegBody.AlertsBody.effectiveDate\"\n                      values={{\n                        dateTime: effectiveStartDate * 1000\n                      }}\n                    />\n                  )}\n                </S.TransitAlertEffectiveDate>\n              </S.TransitAlert>\n            );\n          }\n        )}\n    </S.TransitAlerts>\n  );\n}\n"],"file":"alerts-body.js"}