{"version":3,"sources":["../../src/ItineraryBody/accessibility-rating.tsx"],"names":["React","styled","Wheelchair","useIntl","InvisibleAdditionalDetails","Wrapper","div","props","border","color","large","StatusWrapper","span","TextWrapper","AccessibilityRating","gradationMap","grayscale","isLeg","score","intl","mapping","icon","text","formatMessage","id","mappedKey","parseFloat","Object","keys","sort","reverse","find","key","mapped","accessibilityPreface","accessibilityScore","accessibilityLabel","flex","height","minWidth"],"mappings":"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","sourcesContent":["import { GradationMap } from \"@opentripplanner/types\";\nimport React, { ReactElement } from \"react\";\nimport styled from \"styled-components\";\nimport { Wheelchair } from \"@styled-icons/foundation/Wheelchair\";\nimport { useIntl } from \"react-intl\";\nimport { InvisibleAdditionalDetails } from \"../styled\";\n\ninterface WrapperProps {\n  border: boolean;\n  color: string;\n  large: boolean;\n}\n\nconst Wrapper = styled.div<WrapperProps>`\n  align-items: center;\n  border: ${props => (props.border ? \"1px solid #333\" : \"none\")};\n  background-color: ${props => props.color};\n  border-radius: ${props => (props.large ? \"4px\" : \"20px\")};\n  display: flex;\n  justify-content: space-between;\n  margin-top: 0.25em;\n  max-width: 75px;\n  height: ${props => (props.large ? \"40px\" : \"30px\")};\n  padding: 0.25em 0.6em 0.25em 0.4em;\n  word-wrap: anywhere; /* this can often look quite bad, but helps encourage icons */\n`;\nconst StatusWrapper = styled.span`\n  flex: 1;\n  /* TODO: 0.25em negative margin to get centering correct? */\n\n  span {\n    display: block;\n  }\n`;\n\nconst TextWrapper = styled.span`\n  padding-top: 3px;\n  font-weight: 600;\n`;\n\ninterface Props {\n  gradationMap?: GradationMap;\n  grayscale?: boolean;\n  isLeg?: boolean;\n  large?: boolean;\n  score: number;\n}\n\n/**\n * Component which renders a label with a color and icon depending on\n * a given accessibility score. The color and icon are set by a given gradation map.\n */\nconst AccessibilityRating = ({\n  gradationMap,\n  grayscale = false,\n  isLeg = false,\n  large = false,\n  score\n}: Props): ReactElement => {\n  const intl = useIntl();\n  // Provide default mapping\n  const mapping = gradationMap || {\n    0.0: {\n      color: \"#ffe4e5\",\n      icon: \"❌\",\n      text: intl.formatMessage({\n        id: `otpUi.ItineraryBody.tripAccessibility.inaccessible`\n      })\n    },\n    0.5: {\n      color: \"#dbe9ff\",\n      icon: \"？\",\n      text: intl.formatMessage({\n        id: `otpUi.ItineraryBody.tripAccessibility.unclear`\n      })\n    },\n    0.9: {\n      color: \"#bfffb5\",\n      icon: \"✅\",\n      text: intl.formatMessage({\n        id: `otpUi.ItineraryBody.tripAccessibility.likelyAccessible`\n      })\n    }\n  };\n\n  // Find the highest (including equality) key for our score.\n  const mappedKey: number = parseFloat(\n    Object.keys(mapping)\n      .sort()\n      // Start at the top, so the first one that is less/equal to our score is the correct label\n      .reverse()\n      .find(key => parseFloat(key) <= score)\n  );\n\n  // External configuration may report \"0.0\" as 0, so include fallback\n  const mapped = mapping[mappedKey] || mapping[0.0];\n\n  const accessibilityPreface = intl.formatMessage({\n    id: `otpUi.ItineraryBody.tripAccessibility.${\n      isLeg ? \"legAccessibility\" : \"itineraryAccessibility\"\n    }`\n  });\n\n  const accessibilityScore = mapped.text;\n\n  const accessibilityLabel = accessibilityPreface + accessibilityScore;\n\n  return (\n    <Wrapper\n      border={grayscale}\n      color={grayscale ? \"transparent\" : mapped.color}\n      large={large}\n      title={accessibilityLabel}\n    >\n      <InvisibleAdditionalDetails>\n        {accessibilityLabel}\n      </InvisibleAdditionalDetails>\n      <Wheelchair style={{ flex: \"2\", height: \"100%\", minWidth: \"20px\" }} />\n      <StatusWrapper aria-hidden>\n        {/* Show either icon or text if no icon given */}\n        {mapped.icon || <TextWrapper>{mapped.text}</TextWrapper>}\n      </StatusWrapper>\n    </Wrapper>\n  );\n};\n\nexport default AccessibilityRating;\n"],"file":"accessibility-rating.js"}