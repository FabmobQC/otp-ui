{"version":3,"sources":["../../src/AccessLegBody/rented-vehicle-subheader.tsx"],"names":["coreUtils","React","FormattedMessage","S","defaultMessages","VehicleType","type","RentedVehicleSubheader","config","leg","configCompanies","companies","from","mode","rentedBike","walkingBike","legName","name","networks","vertexType","modeType","place","rentalDescription","company","itinerary","getCompaniesLabelFromNetworks","vehicleName","rentedCar","vehicleType"],"mappings":"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","sourcesContent":["import coreUtils from \"@opentripplanner/core-utils\";\nimport { Config, Leg } from \"@opentripplanner/types\";\nimport React, { ReactElement } from \"react\";\nimport { FormattedMessage } from \"react-intl\";\n\nimport * as S from \"../styled\";\nimport { defaultMessages } from \"../util\";\n\ninterface Props {\n  config: Config;\n  leg: Leg;\n}\n\n/**\n * Although similar to utils/getVehicleType, this version accommodates gendered articles\n * for Spanish and French, so sentences literally read like \"Pickup the scooter ABC\".\n */\nfunction VehicleType({ type }: { type: string }) {\n  switch (type) {\n    case \"BIKEPARK\":\n      return (\n        <FormattedMessage\n          defaultMessage={\n            defaultMessages[\n              \"otpUi.AccessLegBody.RentedVehicleSubheader.vehicleType.bike\"\n            ]\n          }\n          description=\"Bike vehicle type\"\n          id=\"otpUi.AccessLegBody.RentedVehicleSubheader.vehicleType.bike\"\n        />\n      );\n    case \"BIKESHARE\":\n      return (\n        <FormattedMessage\n          defaultMessage={\n            defaultMessages[\n              \"otpUi.AccessLegBody.RentedVehicleSubheader.vehicleType.bikeshare\"\n            ]\n          }\n          description=\"Bike vehicle type\"\n          id=\"otpUi.AccessLegBody.RentedVehicleSubheader.vehicleType.bikeshare\"\n        />\n      );\n    case \"CARSHARE\":\n      return (\n        <FormattedMessage\n          defaultMessage={\n            defaultMessages[\n              \"otpUi.AccessLegBody.RentedVehicleSubheader.vehicleType.car\"\n            ]\n          }\n          description=\"Bike vehicle type\"\n          id=\"otpUi.AccessLegBody.RentedVehicleSubheader.vehicleType.car\"\n        />\n      );\n    case \"VEHICLERENTAL\":\n      return (\n        <FormattedMessage\n          defaultMessage={\n            defaultMessages[\n              \"otpUi.AccessLegBody.RentedVehicleSubheader.vehicleType.escooter\"\n            ]\n          }\n          description=\"Bike vehicle type\"\n          id=\"otpUi.AccessLegBody.RentedVehicleSubheader.vehicleType.escooter\"\n        />\n      );\n    default:\n      return (\n        <FormattedMessage\n          defaultMessage={\n            defaultMessages[\n              \"otpUi.AccessLegBody.RentedVehicleSubheader.vehicleType.vehicle\"\n            ]\n          }\n          description=\"Bike vehicle type\"\n          id=\"otpUi.AccessLegBody.RentedVehicleSubheader.vehicleType.vehicle\"\n        />\n      );\n  }\n}\n\n/**\n * A component to display vehicle rental instructions, such as\n *   Pick up REACHNOW rented car XYZNDB OR\n *   Pick up SPIN E-scooter\n *   Pick up shared bike\n *\n * The word \"Vehicle\" has been used\n * because a future refactor is intended to combine car rental, bike rental\n * and micromobility rental all within this component. The future refactor is\n * assuming that the leg.rentedCar and leg.rentedBike response elements from OTP\n * will eventually be merged into the leg.rentedVehicle element.\n */\nexport default function RentedVehicleSubheader({\n  config,\n  leg\n}: Props): ReactElement {\n  const configCompanies = config.companies || [];\n  const { from, mode, rentedBike, walkingBike } = leg;\n  const { name: legName, networks, vertexType } = from;\n  // in OTP2 scooters are BIKERENTALs, so we need to override this\n  const modeType = mode === \"SCOOTER\" ? \"VEHICLERENTAL\" : vertexType;\n\n  // Sometimes rented vehicles can be walked over things like stairs or other\n  // ways that forbid the main mode of travel.\n  if (mode === \"WALK\" || walkingBike) {\n    return (\n      <S.PlaceSubheader>\n        <FormattedMessage\n          defaultMessage={\n            defaultMessages[\n              \"otpUi.AccessLegBody.RentedVehicleSubheader.walkVehicle\"\n            ]\n          }\n          description=\"Instructs to walk with a bike or scooter along a place.\"\n          id=\"otpUi.AccessLegBody.RentedVehicleSubheader.walkVehicle\"\n          values={{\n            place: legName\n          }}\n        />\n      </S.PlaceSubheader>\n    );\n  }\n\n  let rentalDescription;\n  // The networks attribute of the from data will only appear at the very\n  // beginning of the rental. It is possible that there will be some forced\n  // walking that occurs in the middle of the rental, so once the main mode\n  // resumes there won't be any network info. In that case we simply return\n  // that the rental is continuing.\n  if (networks || rentedBike) {\n    // Add company and vehicle labels.\n    const company = coreUtils.itinerary.getCompaniesLabelFromNetworks(\n      networks || [],\n      configCompanies\n    );\n    // Only show vehicle name for car rentals. For bikes and E-scooters, these\n    // IDs/names tend to be less relevant (or entirely useless) in this context.\n    const vehicleName = leg.rentedCar && legName ? legName : \"\";\n\n    rentalDescription = (\n      <FormattedMessage\n        defaultMessage={\n          defaultMessages[\n            \"otpUi.AccessLegBody.RentedVehicleSubheader.pickupRental\"\n          ]\n        }\n        description=\"Instructs to pick up a rental vehicle\"\n        id=\"otpUi.AccessLegBody.RentedVehicleSubheader.pickupRental\"\n        values={{\n          company,\n          vehicleName,\n          vehicleType: <VehicleType type={modeType} />\n        }}\n      />\n    );\n  } else {\n    rentalDescription = (\n      <FormattedMessage\n        defaultMessage={\n          defaultMessages[\n            \"otpUi.AccessLegBody.RentedVehicleSubheader.resumeRentalRide\"\n          ]\n        }\n        description=\"Instructs to continue riding with a rental vehicle\"\n        id=\"otpUi.AccessLegBody.RentedVehicleSubheader.resumeRentalRide\"\n      />\n    );\n  }\n  return <S.PlaceSubheader>{rentalDescription}</S.PlaceSubheader>;\n}\n"],"file":"rented-vehicle-subheader.js"}