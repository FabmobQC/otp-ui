{"version":3,"sources":["../../src/AccessLegBody/index.tsx"],"names":["React","Component","AnimateHeight","FormattedMessage","Duration","S","AccessLegSteps","AccessLegSummary","LegDiagramPreview","MapillaryButton","RentedVehicleSubheader","TNCLeg","defaultMessages","AccessLegBody","props","onStepsHeaderClick","expanded","state","setState","onSummaryClick","leg","legIndex","setActiveLeg","config","diagramVisible","followsTransit","LegIcon","mapillaryCallback","mapillaryKey","setLegDiagram","showElevationProfile","showLegIcon","TransitLegSubheader","hideDrivingDirections","itinerary","mode","rideHailingEstimate","mapillary","from","rentedVehicle","rentedBike","rentedCar","stopId","duration","steps","length","gridColumn","Styled"],"mappings":"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","sourcesContent":["import { Config, Leg, LegIconComponent } from \"@opentripplanner/types\";\nimport React, { Component, FunctionComponent, ReactElement } from \"react\";\nimport AnimateHeight from \"react-animate-height\";\nimport { FormattedMessage } from \"react-intl\";\nimport { Duration } from \"../defaults\";\n\nimport * as S from \"../styled\";\nimport { SetActiveLegFunction, TransitLegSubheaderProps } from \"../types\";\n\nimport AccessLegSteps from \"./access-leg-steps\";\nimport AccessLegSummary from \"./access-leg-summary\";\nimport LegDiagramPreview from \"./leg-diagram-preview\";\nimport MapillaryButton from \"./mapillary-button\";\nimport RentedVehicleSubheader from \"./rented-vehicle-subheader\";\nimport TNCLeg from \"./tnc-leg\";\n\nimport { defaultMessages } from \"../util\";\n\ninterface Props {\n  config: Config & {\n    itinerary?: {\n      hideDrivingDirections?: boolean;\n    };\n  };\n  /**\n   * Should be either null or a legType. Indicates that a particular leg diagram\n   * has been selected and is active.\n   */\n  diagramVisible?: Leg;\n  followsTransit?: boolean;\n  leg: Leg;\n  LegIcon: LegIconComponent;\n  legIndex: number;\n  mapillaryCallback?: (id: string) => void;\n  mapillaryKey?: string;\n  setActiveLeg: SetActiveLegFunction;\n  setLegDiagram: (leg: Leg) => void;\n  showElevationProfile: boolean;\n  showLegIcon: boolean;\n  TransitLegSubheader?: FunctionComponent<TransitLegSubheaderProps>;\n}\n\ninterface State {\n  expanded: boolean;\n}\n\n/**\n * Component for access (e.g. walk/bike/etc.) leg in narrative itinerary. This\n * particular component is used in the line-itin (i.e., trimet-mod-otp) version\n * of the narrative itinerary.\n */\nclass AccessLegBody extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { expanded: false };\n  }\n\n  onStepsHeaderClick = (): void => {\n    const { expanded } = this.state;\n    this.setState({ expanded: !expanded });\n  };\n\n  onSummaryClick = (): void => {\n    const { leg, legIndex, setActiveLeg } = this.props;\n    setActiveLeg(legIndex, leg);\n  };\n\n  render(): ReactElement {\n    const {\n      config,\n      diagramVisible,\n      followsTransit,\n      leg,\n      LegIcon,\n      mapillaryCallback,\n      mapillaryKey,\n      setLegDiagram,\n      showElevationProfile,\n      showLegIcon,\n      TransitLegSubheader\n    } = this.props;\n    const { expanded } = this.state;\n\n    const hideDrivingDirections =\n      config?.itinerary?.hideDrivingDirections && leg.mode === \"CAR\";\n\n    if (leg.mode === \"CAR\" && leg.rideHailingEstimate) {\n      return (\n        <TNCLeg\n          config={config}\n          followsTransit={followsTransit}\n          leg={leg}\n          LegIcon={LegIcon}\n          onSummaryClick={this.onSummaryClick}\n          showLegIcon={showLegIcon}\n        />\n      );\n    }\n\n    const mapillary = (\n      <MapillaryButton\n        clickCallback={mapillaryCallback}\n        coords={leg.from}\n        mapillaryKey={mapillaryKey}\n      />\n    );\n    return (\n      <>\n        {/* Place subheading: rented vehicle (e.g., scooter, bike, car)\n pickup */}\n        {leg && (leg.rentedVehicle || leg.rentedBike || leg.rentedCar) && (\n          <RentedVehicleSubheader config={config} leg={leg} />\n        )}\n        {leg.from.stopId && TransitLegSubheader && (\n          <TransitLegSubheader leg={leg} />\n        )}\n        <S.LegBody>\n          <AccessLegSummary\n            config={config}\n            leg={leg}\n            LegIcon={LegIcon}\n            onSummaryClick={this.onSummaryClick}\n            showLegIcon={showLegIcon}\n          />\n          <S.LegDetails>\n            {hideDrivingDirections ? (\n              <S.StepsHeaderAndMapLink>\n                <S.StepsHeaderSpan>\n                  <Duration seconds={leg.duration} />\n                </S.StepsHeaderSpan>\n                {mapillary}\n              </S.StepsHeaderAndMapLink>\n            ) : (\n              <>\n                <S.StepsHeaderAndMapLink>\n                  <S.StepsHeaderButton\n                    aria-expanded={expanded}\n                    onClick={this.onStepsHeaderClick}\n                  >\n                    <Duration seconds={leg.duration} />\n                    {leg.steps && leg.steps.length > 0 && (\n                      <S.CaretToggle expanded={expanded} />\n                    )}\n\n                    <S.InvisibleAdditionalDetails>\n                      <FormattedMessage\n                        defaultMessage={\n                          defaultMessages[\"otpUi.TransitLegBody.expandDetails\"]\n                        }\n                        description=\"Screen reader text added to expand steps\"\n                        id=\"otpUi.TransitLegBody.expandDetails\"\n                      />\n                    </S.InvisibleAdditionalDetails>\n                  </S.StepsHeaderButton>\n                  {mapillary}\n                </S.StepsHeaderAndMapLink>\n                <AnimateHeight\n                  duration={500}\n                  height={expanded ? \"auto\" : 0}\n                  style={{ gridColumn: \"1 / span 2\" }}\n                >\n                  <AccessLegSteps\n                    mapillaryCallback={mapillaryCallback}\n                    mapillaryKey={mapillaryKey}\n                    steps={leg.steps}\n                  />\n                </AnimateHeight>\n              </>\n            )}\n            <LegDiagramPreview\n              diagramVisible={diagramVisible}\n              leg={leg}\n              setLegDiagram={setLegDiagram}\n              showElevationProfile={showElevationProfile}\n            />\n          </S.LegDetails>\n        </S.LegBody>\n      </>\n    );\n  }\n}\n\nexport default AccessLegBody;\n\nexport {\n  AccessLegSteps,\n  AccessLegSummary,\n  LegDiagramPreview,\n  RentedVehicleSubheader,\n  S as Styled,\n  TNCLeg\n};\n"],"file":"index.js"}