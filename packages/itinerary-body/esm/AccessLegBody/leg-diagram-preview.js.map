{"version":3,"sources":["../../src/AccessLegBody/leg-diagram-preview.tsx"],"names":["coreUtils","React","Component","FormattedMessage","injectIntl","ReactResizeDetector","S","defaultMessages","METERS_TO_FEET","generateSvg","profile","width","height","ptArr","points","traversed","minElev","maxElev","pts","map","pt","x","y","join","LegDiagramPreview","props","onResize","setState","isActive","diagramVisible","leg","startTime","onExpandClick","setLegDiagram","formatElevation","elev","Math","round","state","intl","showElevationProfile","itinerary","getElevationProfile","steps","distance","mode","formatMessage","defaultMessage","description","id","gain","loss","length"],"mappings":"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","sourcesContent":["import coreUtils from \"@opentripplanner/core-utils\";\nimport { Leg } from \"@opentripplanner/types\";\nimport React, { Component, ReactElement } from \"react\";\nimport { FormattedMessage, injectIntl, IntlShape } from \"react-intl\";\nimport ReactResizeDetector from \"react-resize-detector\";\n\nimport * as S from \"../styled\";\n\nimport { defaultMessages } from \"../util\";\n\ninterface Props {\n  diagramVisible?: Leg;\n  intl: IntlShape;\n  leg: Leg;\n  setLegDiagram: (leg: Leg) => void;\n  showElevationProfile: boolean;\n}\n\ninterface State {\n  width: number;\n}\n\nconst METERS_TO_FEET = 3.28084;\n\nfunction generateSvg(profile, width) {\n  const height = 30;\n  const { points: ptArr, traversed } = profile;\n  let { minElev, maxElev } = profile;\n  // Pad the min-max range by 25m on either side\n  minElev -= 25;\n  maxElev += 25;\n\n  // Transform the point array and store it as an SVG-ready string\n  const pts = ptArr\n    .map(pt => {\n      const x = (pt[0] / traversed) * width;\n      const y = height - (height * (pt[1] - minElev)) / (maxElev - minElev);\n      return `${x},${y}`;\n    })\n    .join(\" \");\n\n  // Render the SVG\n  return (\n    <svg height={height} width={width}>\n      <polyline points={pts} fill=\"none\" stroke=\"black\" strokeWidth={1.3} />\n    </svg>\n  );\n}\n\nclass LegDiagramPreview extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { width: null };\n  }\n\n  onResize = (width: number): void => {\n    if (width > 0) {\n      this.setState({ width });\n    }\n  };\n\n  /**\n   * Determine if the diagram currently visible is for this leg (based on start\n   * time).\n   */\n  isActive = (): boolean => {\n    const { diagramVisible, leg } = this.props;\n    return diagramVisible && diagramVisible.startTime === leg.startTime;\n  };\n\n  onExpandClick = (): void => {\n    const { leg, setLegDiagram } = this.props;\n    if (this.isActive()) setLegDiagram(null);\n    else setLegDiagram(leg);\n  };\n\n  /** Round elevation to whole number and add foot (') symbol. */\n  formatElevation = (elev: number): string => `${Math.round(elev)}'`;\n\n  render(): ReactElement {\n    const { intl, leg, showElevationProfile } = this.props;\n    const { width } = this.state;\n    if (!showElevationProfile) return null;\n    const profile = coreUtils.itinerary.getElevationProfile(leg.steps);\n    // Don't show for very short legs\n    if (leg.distance < 500 || leg.mode === \"CAR\") return null;\n\n    return (\n      <S.PreviewContainer active={this.isActive()}>\n        {/* The preview elevation SVG */}\n        <S.PreviewDiagram\n          onClick={this.onExpandClick}\n          role=\"button\"\n          tabIndex={0}\n          // This is shown in a tooltip, so use intl.formatMessage.\n          title={intl.formatMessage({\n            defaultMessage:\n              defaultMessages[\n                \"otpUi.AccessLegBody.LegDiagramPreview.toggleElevationChart\"\n              ],\n            description:\n              \"Tooltip text describing the toggling of the elevation chart.\",\n            id: \"otpUi.AccessLegBody.LegDiagramPreview.toggleElevationChart\"\n          })}\n        >\n          <S.PreviewDiagramTitle>\n            <FormattedMessage\n              defaultMessage={\n                defaultMessages[\n                  \"otpUi.AccessLegBody.LegDiagramPreview.elevationChart\"\n                ]\n              }\n              description=\"Title text for elevation chart\"\n              id=\"otpUi.AccessLegBody.LegDiagramPreview.elevationChart\"\n            />\n            <S.PreviewDiagramElevationGain>\n              ↑{this.formatElevation(profile.gain * METERS_TO_FEET)}\n            </S.PreviewDiagramElevationGain>\n            <S.PreviewDiagramElevationLoss>\n              ↓{this.formatElevation(-profile.loss * METERS_TO_FEET)}\n            </S.PreviewDiagramElevationLoss>\n          </S.PreviewDiagramTitle>\n          {profile.points.length > 0 ? (\n            generateSvg(profile, width)\n          ) : (\n            <FormattedMessage\n              defaultMessage={\n                defaultMessages[\n                  \"otpUi.AccessLegBody.LegDiagramPreview.noElevationData\"\n                ]\n              }\n              description=\"Text shown if no elevation data is available.\"\n              id=\"otpUi.AccessLegBody.LegDiagramPreview.noElevationData\"\n            />\n          )}\n          <ReactResizeDetector handleWidth onResize={this.onResize} />\n        </S.PreviewDiagram>\n      </S.PreviewContainer>\n    );\n  }\n}\n\nexport default injectIntl(LegDiagramPreview);\n"],"file":"leg-diagram-preview.js"}