{"version":3,"sources":["../../src/stories/itinerary-body-defaults-wrapper.tsx"],"names":["TriMetLegIcon","React","Component","action","ItineraryBody","DefaultLineColumnContent","DefaultPlaceName","DefaultRouteDescription","DefaultRouteDescriptionFooter","DefaultTransitLegSummary","StyledItineraryBody","OtpRRStyledItineraryBody","config","require","ItineraryBodyDefaultsWrapper","props","setLegDiagram","leg","setState","diagramVisible","state","alwaysCollapseAlerts","defaultFareSelector","hideDrivingDirections","itinerary","LegIcon","LineColumnContent","PlaceName","RouteDescription","RouteDescriptionFooter","undefined","showAgencyInfo","showLegIcon","showMapButtonColumn","showViewTripButton","styledItinerary","TimeColumnContent","toRouteAbbreviation","r","toString","substr","TransitLegSubheader","TransitLegSummary","AlertToggleIcon","AlertBodyIcon","ItineraryBodyComponent"],"mappings":"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","sourcesContent":["// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore FIXME: Create TypeScript types for the icons package.\nimport { TriMetLegIcon } from \"@opentripplanner/icons\";\nimport { Leg } from \"@opentripplanner/types\";\nimport React, { Component, ReactElement } from \"react\";\nimport { action } from \"@storybook/addon-actions\";\n\nimport ItineraryBody from \"..\";\nimport DefaultLineColumnContent from \"../defaults/line-column-content\";\nimport DefaultPlaceName from \"../defaults/place-name\";\nimport DefaultRouteDescription from \"../defaults/route-description\";\nimport { DefaultRouteDescriptionFooter } from \"./route-description-footer\";\nimport DefaultTransitLegSummary from \"../defaults/transit-leg-summary\";\nimport { StyledItineraryBody } from \"../demos\";\nimport OtpRRStyledItineraryBody from \"../otp-react-redux/itinerary-body\";\nimport { ItineraryBodyProps } from \"../types\";\n\nconst config = require(\"../__mocks__/config.json\");\n\ntype Props = ItineraryBodyProps & {\n  hideDrivingDirections?: boolean;\n  styledItinerary?: string;\n};\n\ninterface State {\n  diagramVisible: Leg;\n}\n\nexport default class ItineraryBodyDefaultsWrapper extends Component<\n  Props,\n  State\n> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      diagramVisible: null\n    };\n  }\n\n  setLegDiagram = (leg: Leg): void => {\n    this.setState({ diagramVisible: leg });\n  };\n\n  render(): ReactElement {\n    const {\n      alwaysCollapseAlerts,\n      defaultFareSelector,\n      hideDrivingDirections = false,\n      itinerary,\n      LegIcon = TriMetLegIcon,\n      LineColumnContent,\n      PlaceName,\n      RouteDescription,\n      RouteDescriptionFooter = undefined,\n      showAgencyInfo,\n      showLegIcon,\n      showMapButtonColumn = true,\n      showViewTripButton,\n      styledItinerary,\n      TimeColumnContent,\n      toRouteAbbreviation = r => r?.toString()?.substr(0, 2),\n      TransitLegSubheader,\n      TransitLegSummary,\n      AlertToggleIcon,\n      AlertBodyIcon\n    } = this.props;\n    const { diagramVisible } = this.state;\n    let ItineraryBodyComponent;\n    switch (styledItinerary) {\n      case \"pink-legs\":\n        ItineraryBodyComponent = StyledItineraryBody;\n        break;\n      case \"otp-rr\":\n        ItineraryBodyComponent = OtpRRStyledItineraryBody;\n        break;\n      default:\n        ItineraryBodyComponent = ItineraryBody;\n    }\n\n    config.itinerary = {\n      hideDrivingDirections\n    };\n\n    return (\n      <ItineraryBodyComponent\n        AlertBodyIcon={AlertBodyIcon}\n        AlertToggleIcon={AlertToggleIcon}\n        alwaysCollapseAlerts={alwaysCollapseAlerts}\n        config={config}\n        defaultFareSelector={defaultFareSelector}\n        diagramVisible={diagramVisible}\n        frameLeg={action(\"frameLeg\")}\n        itinerary={itinerary}\n        LegIcon={LegIcon}\n        LineColumnContent={LineColumnContent || DefaultLineColumnContent}\n        mapillaryKey=\"fake key, but ok because the api response is also fake\"\n        PlaceName={PlaceName || DefaultPlaceName}\n        RouteDescription={RouteDescription || DefaultRouteDescription}\n        RouteDescriptionFooter={\n          RouteDescriptionFooter || DefaultRouteDescriptionFooter\n        }\n        routingType=\"ITINERARY\"\n        setActiveLeg={action(\"setActiveLeg\")}\n        setLegDiagram={this.setLegDiagram}\n        setViewedTrip={action(\"setViewedTrip\")}\n        showAgencyInfo={showAgencyInfo}\n        showElevationProfile\n        showLegIcon={showLegIcon}\n        showMapButtonColumn={showMapButtonColumn}\n        showViewTripButton={showViewTripButton}\n        TimeColumnContent={TimeColumnContent}\n        toRouteAbbreviation={toRouteAbbreviation}\n        TransitLegSubheader={TransitLegSubheader}\n        TransitLegSummary={TransitLegSummary || DefaultTransitLegSummary}\n      />\n    );\n  }\n}\n"],"file":"itinerary-body-defaults-wrapper.js"}