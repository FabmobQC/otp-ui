{"version":3,"sources":["../src/transit-leg.tsx"],"names":["getDisplayedStopId","getLegRouteShortName","Defaults","React","FormattedMessage","AccessibilityAnnotation","S","defaultMessages","strongText","TransitLeg","accessibilityScoreGradationMap","leg","LegIcon","interlineFollows","stopIdFrom","from","stopIdTo","to","route","undefined","routeDescription","alightMessage","place","name","stopId","strong","time","endTime","interlineWithPreviousLeg","startTime"],"mappings":"AAAA,SACEA,kBADF,EAEEC,oBAFF,QAGO,2CAHP;AAIA,SAASC,QAAT,QAAyB,iCAAzB;AAEA,OAAOC,KAAP,MAAoC,OAApC;AACA,SAASC,gBAAT,QAAiC,YAAjC;AAEA,OAAOC,uBAAP,MAAoC,4BAApC;AACA,OAAO,KAAKC,CAAZ,MAAmB,UAAnB;AACA,SAASC,eAAT,EAA0BC,UAA1B,QAA4C,QAA5C;AASA,eAAe,SAASC,UAAT,OAKS;AAAA,MAJtBC,8BAIsB,QAJtBA,8BAIsB;AAAA,MAHtBC,GAGsB,QAHtBA,GAGsB;AAAA,MAFtBC,OAEsB,QAFtBA,OAEsB;AAAA,MADtBC,gBACsB,QADtBA,gBACsB;AACtB,MAAMC,UAAU,GAAGd,kBAAkB,CAACW,GAAG,CAACI,IAAL,CAArC;AACA,MAAMC,QAAQ,GAAGhB,kBAAkB,CAACW,GAAG,CAACM,EAAL,CAAnC,CAFsB,CAItB;AACA;AACA;AACA;;AACA,MAAIN,GAAG,CAACO,KAAJ,KAAc,IAAlB,EAAwBP,GAAG,CAACO,KAAJ,GAAYC,SAAZ;AAExB,MAAMC,gBAAgB,gBACpB,uDACE,oCAASnB,oBAAoB,CAACU,GAAD,CAA7B,CADF,oBAC+C,oBAAC,CAAD,CAAG,aAAH;AAAiB,IAAA,GAAG,EAAEA;AAAtB,IAD/C,CADF;AAMA,MAAMU,aAAa,gBACjB,oBAAC,gBAAD;AACE,IAAA,cAAc,EACZd,eAAe,CAAC,4CAAD,CAFnB;AAIE,IAAA,WAAW,EAAC,4CAJd;AAKE,IAAA,EAAE,EAAC,4CALL;AAME,IAAA,MAAM,EAAE;AACNe,MAAAA,KAAK,EAAEX,GAAG,CAACM,EAAJ,CAAOM,IADR;AAENC,MAAAA,MAAM,EAAER,QAFF;AAGNS,MAAAA,MAAM,EAAEjB,UAHF;AAINkB,MAAAA,IAAI,EAAEf,GAAG,CAACgB;AAJJ;AANV,IADF,CAhBsB,CAgCtB;;AACA,MAAIhB,GAAG,CAACiB,wBAAR,EAAkC;AAChC,wBACE,oBAAC,CAAD,CAAG,YAAH,qBACE,oBAAC,CAAD,CAAG,OAAH,qBACE,oBAAC,CAAD,CAAG,SAAH,qBACE,oBAAC,gBAAD;AACE,MAAA,cAAc,EACZrB,eAAe,CACb,iDADa,CAFnB;AAME,MAAA,WAAW,EAAC,wCANd;AAOE,MAAA,EAAE,EAAC,iDAPL;AAQE,MAAA,MAAM,EAAE;AAAEa,QAAAA,gBAAgB,EAAhBA;AAAF;AARV,MADF,CADF,eAaE,oBAAC,CAAD,CAAG,UAAH,qBACE,oBAAC,CAAD,CAAG,SAAH,QAAcC,aAAd,CADF,CAbF,CADF,CADF;AAqBD;;AAED,sBACE,oBAAC,CAAD,CAAG,GAAH,qBACE,oBAAC,uBAAD;AACE,IAAA,8BAA8B,EAAEX,8BADlC;AAEE,IAAA,SAAS,MAFX;AAGE,IAAA,GAAG,EAAEC,GAHP;AAIE,IAAA,OAAO,EAAEC;AAJX,IADF,eAOE,oBAAC,CAAD,CAAG,OAAH,qBACE,oBAAC,CAAD,CAAG,SAAH,QAAcQ,gBAAd,CADF,eAEE,oBAAC,CAAD,CAAG,UAAH,qBACE,oBAAC,CAAD,CAAG,SAAH,qBACE,oBAAC,gBAAD;AACE,IAAA,cAAc,EACZb,eAAe,CAAC,2CAAD,CAFnB;AAIE,IAAA,WAAW,EAAC,sCAJd;AAKE,IAAA,EAAE,EAAC,2CALL;AAME,IAAA,MAAM,EAAE;AACNe,MAAAA,KAAK,EAAEX,GAAG,CAACI,IAAJ,CAASQ,IADV;AAENC,MAAAA,MAAM,EAAEV,UAFF;AAGNW,MAAAA,MAAM,EAAEjB,UAHF;AAINkB,MAAAA,IAAI,EAAEf,GAAG,CAACkB;AAJJ;AANV,IADF,CADF,eAgBE,oBAAC,CAAD,CAAG,SAAH,QACGhB,gBAAgB,gBACf,oBAAC,QAAD,CAAU,WAAV;AAAsB,IAAA,KAAK,EAAEF,GAAG,CAACM;AAAjC,IADe,GAGfI,aAJJ,CAhBF,CAFF,CAPF,CADF;AAqCD","sourcesContent":["import {\n  getDisplayedStopId,\n  getLegRouteShortName\n} from \"@opentripplanner/core-utils/lib/itinerary\";\nimport { Defaults } from \"@opentripplanner/itinerary-body\";\nimport { GradationMap, Leg, LegIconComponent } from \"@opentripplanner/types\";\nimport React, { ReactElement } from \"react\";\nimport { FormattedMessage } from \"react-intl\";\n\nimport AccessibilityAnnotation from \"./accessibility-annotation\";\nimport * as S from \"./styled\";\nimport { defaultMessages, strongText } from \"./util\";\n\ninterface Props {\n  accessibilityScoreGradationMap?: GradationMap;\n  interlineFollows?: boolean;\n  leg: Leg;\n  LegIcon: LegIconComponent;\n}\n\nexport default function TransitLeg({\n  accessibilityScoreGradationMap,\n  leg,\n  LegIcon,\n  interlineFollows\n}: Props): ReactElement {\n  const stopIdFrom = getDisplayedStopId(leg.from);\n  const stopIdTo = getDisplayedStopId(leg.to);\n\n  // TODO: core-utils needs some larger-scale type fixes\n  // null is an object, so we need to redefine it as undefined to prevent\n  // it from being read as an object. The long term solution is to avoid\n  // using type checks for this purpose\n  if (leg.route === null) leg.route = undefined;\n\n  const routeDescription = (\n    <>\n      <strong>{getLegRouteShortName(leg)}</strong> <S.RouteLongName leg={leg} />\n    </>\n  );\n\n  const alightMessage = (\n    <FormattedMessage\n      defaultMessage={\n        defaultMessages[\"otpUi.PrintableItinerary.TransitLeg.alight\"]\n      }\n      description=\"Instructs to alight/exit a transit vehicle\"\n      id=\"otpUi.PrintableItinerary.TransitLeg.alight\"\n      values={{\n        place: leg.to.name,\n        stopId: stopIdTo,\n        strong: strongText,\n        time: leg.endTime\n      }}\n    />\n  );\n\n  // Handle case of transit leg interlined w/ previous\n  if (leg.interlineWithPreviousLeg) {\n    return (\n      <S.CollapsedTop>\n        <S.LegBody>\n          <S.LegHeader>\n            <FormattedMessage\n              defaultMessage={\n                defaultMessages[\n                  \"otpUi.PrintableItinerary.TransitLeg.continuesAs\"\n                ]\n              }\n              description=\"Informs of an interlined transit route\"\n              id=\"otpUi.PrintableItinerary.TransitLeg.continuesAs\"\n              values={{ routeDescription }}\n            />\n          </S.LegHeader>\n          <S.LegDetails>\n            <S.LegDetail>{alightMessage}</S.LegDetail>\n          </S.LegDetails>\n        </S.LegBody>\n      </S.CollapsedTop>\n    );\n  }\n\n  return (\n    <S.Leg>\n      <AccessibilityAnnotation\n        accessibilityScoreGradationMap={accessibilityScoreGradationMap}\n        grayscale\n        leg={leg}\n        LegIcon={LegIcon}\n      />\n      <S.LegBody>\n        <S.LegHeader>{routeDescription}</S.LegHeader>\n        <S.LegDetails>\n          <S.LegDetail>\n            <FormattedMessage\n              defaultMessage={\n                defaultMessages[\"otpUi.PrintableItinerary.TransitLeg.board\"]\n              }\n              description=\"Instructs to board a transit vehicle\"\n              id=\"otpUi.PrintableItinerary.TransitLeg.board\"\n              values={{\n                place: leg.from.name,\n                stopId: stopIdFrom,\n                strong: strongText,\n                time: leg.startTime\n              }}\n            />\n          </S.LegDetail>\n          <S.LegDetail>\n            {interlineFollows ? (\n              <Defaults.StayOnBoard place={leg.to} />\n            ) : (\n              alightMessage\n            )}\n          </S.LegDetail>\n        </S.LegDetails>\n      </S.LegBody>\n    </S.Leg>\n  );\n}\n"],"file":"transit-leg.js"}