{"version":3,"sources":["../src/tnc-leg.tsx"],"names":["TNCLeg","accessibilityScoreGradationMap","leg","LegIcon","rideHailingEstimate","defaultMessages","company","provider","id","label","place","to","name","strong","strongText","arrival","duration","parseInt"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;AACA;;AAEA;;AACA;;AACA;;;;;;AAQe,SAASA,MAAT,CAAgB;AAC7BC,EAAAA,8BAD6B;AAE7BC,EAAAA,GAF6B;AAG7BC,EAAAA;AAH6B,CAAhB,EAIS;AAAA;;AACtB,QAAM;AAAEC,IAAAA;AAAF,MAA0BF,GAAhC;AACA,MAAI,CAACE,mBAAL,EAA0B,OAAO,IAAP;AAE1B,sBACE,6BAAC,CAAD,CAAG,GAAH,qBACE,6BAAC,gCAAD;AACE,IAAA,8BAA8B,EAAEH,8BADlC;AAEE,IAAA,SAAS,MAFX;AAGE,IAAA,GAAG,EAAEC,GAHP;AAIE,IAAA,OAAO,EAAEC;AAJX,IADF,eAOE,6BAAC,CAAD,CAAG,OAAH,qBACE,6BAAC,CAAD,CAAG,SAAH,qBACE,6BAAC,2BAAD;AACE,IAAA,cAAc,EACZE,uBAAgB,wCAAhB,CAFJ;AAIE,IAAA,WAAW,EAAC,0BAJd;AAKE,IAAA,EAAE,EAAC,wCALL;AAME,IAAA,MAAM,EAAE;AACNC,MAAAA,OAAO,2BAAE,qCAAqBF,mBAAmB,CAACG,QAApB,CAA6BC,EAAlD,CAAF,0DAAE,sBACLC,KAFE;AAGNC,MAAAA,KAAK,EAAER,GAAG,CAACS,EAAJ,CAAOC,IAHR;AAINC,MAAAA,MAAM,EAAEC;AAJF;AANV,IADF,CADF,eAgBE,6BAAC,CAAD,CAAG,UAAH,QACG,QAAOZ,GAAP,aAAOA,GAAP,gDAAOA,GAAG,CAAEE,mBAAZ,0DAAO,sBAA0BW,OAAjC,MAA6C,QAA7C,iBACC,6BAAC,CAAD,CAAG,SAAH,qBACE,6BAAC,2BAAD;AACE,IAAA,cAAc,EACZV,uBACE,mDADF,CAFJ;AAME,IAAA,WAAW,EAAC,wCANd;AAOE,IAAA,EAAE,EAAC,mDAPL;AAQE,IAAA,MAAM,EAAE;AACNW,MAAAA,QAAQ,eACN,6BAAC,uBAAD,CAAU,QAAV;AACE,QAAA,OAAO,EACLC,QAAQ,CACN,2BAAgBf,GAAG,CAACE,mBAAJ,CAAwBW,OAAxC,CADM,EAEN,EAFM,CAAR,GAGI;AALR,QAFI;AAWNF,MAAAA,MAAM,EAAEC;AAXF;AARV,IADF,CAFJ,eA2BE,6BAAC,CAAD,CAAG,SAAH,qBACE,6BAAC,2BAAD;AACE,IAAA,cAAc,EACZT,uBACE,qDADF,CAFJ;AAME,IAAA,WAAW,EAAC,0CANd;AAOE,IAAA,EAAE,EAAC,qDAPL;AAQE,IAAA,MAAM,EAAE;AACNW,MAAAA,QAAQ,eAAE,6BAAC,uBAAD,CAAU,QAAV;AAAmB,QAAA,OAAO,EAAEd,GAAG,CAACc;AAAhC,QADJ;AAENH,MAAAA,MAAM,EAAEC;AAFF;AARV,IADF,CA3BF,CAhBF,CAPF,CADF;AAsED","sourcesContent":["import { getCompanyForNetwork } from \"@opentripplanner/core-utils/lib/itinerary\";\nimport { Defaults } from \"@opentripplanner/itinerary-body\";\nimport { parseOTP2Minute } from \"@opentripplanner/itinerary-body/lib/util\";\nimport { GradationMap, Leg, LegIconComponent } from \"@opentripplanner/types\";\nimport React, { ReactElement } from \"react\";\nimport { FormattedMessage } from \"react-intl\";\n\nimport AccessibilityAnnotation from \"./accessibility-annotation\";\nimport * as S from \"./styled\";\nimport { defaultMessages, strongText } from \"./util\";\n\ninterface Props {\n  accessibilityScoreGradationMap?: GradationMap;\n  leg: Leg;\n  LegIcon: LegIconComponent;\n}\n\nexport default function TNCLeg({\n  accessibilityScoreGradationMap,\n  leg,\n  LegIcon\n}: Props): ReactElement {\n  const { rideHailingEstimate } = leg;\n  if (!rideHailingEstimate) return null;\n\n  return (\n    <S.Leg>\n      <AccessibilityAnnotation\n        accessibilityScoreGradationMap={accessibilityScoreGradationMap}\n        grayscale\n        leg={leg}\n        LegIcon={LegIcon}\n      />\n      <S.LegBody>\n        <S.LegHeader>\n          <FormattedMessage\n            defaultMessage={\n              defaultMessages[\"otpUi.PrintableItinerary.TncLeg.header\"]\n            }\n            description=\"Summary text for TNC leg\"\n            id=\"otpUi.PrintableItinerary.TncLeg.header\"\n            values={{\n              company: getCompanyForNetwork(rideHailingEstimate.provider.id)\n                ?.label,\n              place: leg.to.name,\n              strong: strongText\n            }}\n          />\n        </S.LegHeader>\n        <S.LegDetails>\n          {typeof leg?.rideHailingEstimate?.arrival === \"string\" && (\n            <S.LegDetail>\n              <FormattedMessage\n                defaultMessage={\n                  defaultMessages[\n                    \"otpUi.PrintableItinerary.TncLeg.estimatedWaitTime\"\n                  ]\n                }\n                description=\"Describes the estimated TNC wait time.\"\n                id=\"otpUi.PrintableItinerary.TncLeg.estimatedWaitTime\"\n                values={{\n                  duration: (\n                    <Defaults.Duration\n                      seconds={\n                        parseInt(\n                          parseOTP2Minute(leg.rideHailingEstimate.arrival),\n                          10\n                        ) * 60\n                      }\n                    />\n                  ),\n                  strong: strongText\n                }}\n              />\n            </S.LegDetail>\n          )}\n          <S.LegDetail>\n            <FormattedMessage\n              defaultMessage={\n                defaultMessages[\n                  \"otpUi.PrintableItinerary.TncLeg.estimatedTravelTime\"\n                ]\n              }\n              description=\"Describes the estimated TNC travel time.\"\n              id=\"otpUi.PrintableItinerary.TncLeg.estimatedTravelTime\"\n              values={{\n                duration: <Defaults.Duration seconds={leg.duration} />,\n                strong: strongText\n              }}\n            />\n          </S.LegDetail>\n        </S.LegDetails>\n      </S.LegBody>\n    </S.Leg>\n  );\n}\n"],"file":"tnc-leg.js"}