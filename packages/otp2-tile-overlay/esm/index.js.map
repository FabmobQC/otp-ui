{"version":3,"sources":["../src/index.tsx"],"names":["EntityPopup","React","useCallback","useEffect","useState","Layer","Popup","Source","useMap","generateLayerPaint","SOURCE_ID","OTP2TileLayerWithPopup","color","configCompanies","id","network","onMapClick","setLocation","setViewedStop","type","map","current","clickedEntity","setClickedEntity","defaultClickHandler","event","features","sourceLayer","synthesizedEntity","properties","lat","lngLat","lon","lng","isFloatingBike","formFactor","isFloatingVehicle","networks","bikesAvailable","vehiclesAvailable","x","y","onLayerEnter","getCanvas","style","cursor","onLayerLeave","on","off","gtfsId","location","generateOTP2TileLayers","layers","endpoint","l","join","layer","name","initiallyVisible"],"mappings":"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","sourcesContent":["import EntityPopup from \"@opentripplanner/map-popup\"\nimport {\n  ConfiguredCompany,\n  MapLocationActionArg,\n  Stop,\n  StopEventHandler,\n} from \"@opentripplanner/types\"\n// eslint-disable-next-line prettier/prettier\nimport type { EventData } from \"mapbox-gl\"\nimport React, { useCallback, useEffect, useState } from \"react\"\nimport { Layer, Popup, Source, useMap } from \"react-map-gl\"\n\n// eslint-disable-next-line prettier/prettier\nimport { generateLayerPaint } from \"./util\"\n\nconst SOURCE_ID = \"otp2-tiles\"\n\nconst OTP2TileLayerWithPopup = ({\n  color,\n  configCompanies,\n  id,\n  network,\n  onMapClick,\n  setLocation,\n  setViewedStop,\n  type\n}: {\n  /**\n   * Optional configuration item which allows for customizing properties of scooter and\n   * bikeshare companies. If this is provided, scooter/bikeshare company names can be rendered in the\n   * default scooter/bike popup.\n   */\n  color?: string;\n  configCompanies?: ConfiguredCompany[]\n  id: string\n  name?: string\n  /**\n   * If `network` is specified, the layer will be filtered to only show vehicles from\n   * that network\n   */\n  network?: string\n  /**\n   * An optional method to override the map click handler. If a method is passed, NO POPUPS\n   * WILL APPEAR ON CLICK. The implementer will be responsible for handling all click events\n   * in accordance with the MapLibreGL api.\n   */\n  onMapClick?: (event: EventData) => void\n  /**\n   * A method fired when a stop is selected as from or to in the default popup. If this method\n   * is not passed, the from/to buttons will not be shown.\n   */\n  setLocation?: (location: MapLocationActionArg) => void\n  /**\n   * A method fired when the stop viewer is opened in the default popup. If this method is\n   * not passed, the stop viewer link will not be shown.\n   */\n  setViewedStop?: StopEventHandler\n  /**\n   * Determines which layer of the OTP2 tile data to display. Also determines icon color.\n   */\n  type: string\n  visible?: boolean\n}): JSX.Element => {\n  const { current: map } = useMap()\n\n  // TODO: handle this complex type: it can be a stop, a station, and some extra fields too\n  const [clickedEntity, setClickedEntity] = useState<any>(null)\n\n  const defaultClickHandler = (event: EventData) => {\n    const { sourceLayer } = event.features?.[0]\n    const synthesizedEntity = {\n      ...event.features?.[0].properties,\n      lat: event.lngLat.lat,\n      lon: event.lngLat.lng,\n      sourceLayer\n    }\n\n    // TODO: once the popup converges into a single one that can handle\n    // stops, stations, and vehicles, this re-writing will not be needed\n    // See: https://github.com/opentripplanner/otp-ui/pull/472#discussion_r1023124055\n    if (sourceLayer === \"stops\" || sourceLayer === \"stations\") {\n      setClickedEntity(synthesizedEntity)\n    }\n    if (\n      sourceLayer === \"rentalVehicles\" ||\n      sourceLayer === \"rentalStations\"\n    ) {\n      setClickedEntity({\n        // GraphQL field not in the tile info, but we can deduce it\n        isFloatingBike:\n          sourceLayer === \"rentalVehicles\" &&\n          synthesizedEntity.formFactor === \"BICYCLE\",\n        // GraphQL field not in the tile info, but we can deduce it\n        isFloatingVehicle:\n          sourceLayer === \"rentalVehicles\" &&\n          synthesizedEntity.formFactor === \"SCOOTER\",\n        // OTP1 compatibility -- will get overwritten if possible\n        networks: [synthesizedEntity.network],\n        ...synthesizedEntity,\n        // OTP1 compatibility\n        bikesAvailable: synthesizedEntity.vehiclesAvailable,\n        // OTP1 compatibility\n        x: synthesizedEntity.lon,\n        // OTP1 compatibility\n        y: synthesizedEntity.lat\n      })\n    }\n  }\n\n  const onLayerEnter = useCallback(() => {\n    map.getCanvas().style.cursor = \"pointer\";\n  }, [map]);\n\n  const onLayerLeave = useCallback(() => {\n    map.getCanvas().style.cursor = \"\";\n  }, [map]);\n\n  useEffect(() => {\n    map?.on(\"mouseenter\", id, onLayerEnter)\n    map?.on(\"mouseleave\", id, onLayerLeave)\n    map?.on(\"click\", id, onMapClick || defaultClickHandler)\n\n    return () => {\n      map?.off(\"mouseenter\", id, onLayerEnter);\n      map?.off(\"mouseleave\", id, onLayerLeave);\n      map?.off(\"click\", id, onMapClick || defaultClickHandler);\n    };\n  }, [id, map])\n\n  return (\n    <>\n      <Layer\n        filter={network ? [\"all\", [\"==\", \"network\", network]] : [\"all\"]}\n        id={id}\n        key={id}\n        paint={generateLayerPaint(color)[type]}\n        source={SOURCE_ID}\n        source-layer={type}\n        type=\"circle\"\n      />\n      {clickedEntity && (\n        <Popup\n          latitude={clickedEntity.lat}\n          longitude={clickedEntity.lon}\n          maxWidth=\"100%\"\n          // TODO: only set null if the x is clicked, not a new stop\n          onClose={() => setClickedEntity(null)}\n        >\n          <EntityPopup\n            configCompanies={configCompanies}\n            entity={{ ...clickedEntity, id: clickedEntity?.id || clickedEntity?.gtfsId }}\n            setLocation={setLocation ? (location) => { setClickedEntity(null); setLocation(location) } : null}\n            setViewedStop={setViewedStop}\n          />\n\n        </Popup>\n      )}\n    </>\n  )\n}\n\n/**\n * Generates an array of MapLibreGL Source and Layer components with included popups for \n * rendering OTP2 tile data.\n * \n * @param layers          A list of layers, with some minimal config, matching what is configured on the server.\n *                        This list will be used to craft the tilejson request to OTP.\n * @param endpoint        The OTP endpoint to make the requests to\n * @param setLocation     An optional method to make from/to buttons functional. See component for more detail.\n * @param setViewedStop   An optional method to make stop viewer button functional. See component for more detail. \n * @param configCompanies An optional list of companies used to prettify network information.\n * @returns               Array of <Source> and <OTP2TileLayerWithPopup> components\n */\nconst generateOTP2TileLayers = (\n  layers: { color?: string; name?: string; network?: string; type: string, initiallyVisible?: boolean }[],\n  endpoint: string,\n  setLocation?: (location: MapLocationActionArg) => void,\n  setViewedStop?: (stop: Stop) => void,\n  configCompanies?: ConfiguredCompany[]\n): JSX.Element[] => {\n  return [\n    <Source\n      // @ts-expect-error we use a nonstandard prop\n      alwaysShow\n      id={SOURCE_ID}\n      key={SOURCE_ID}\n      type=\"vector\"\n      // Only grab the data we need based on layers defined\n      url={`${endpoint}/${layers.map((l) => l.type).join(\",\")}/tilejson.json`}\n    />,\n    ...layers.map((layer) => {\n      const { color, name, network, type, initiallyVisible } = layer\n\n      const id = `${type}${network ? `-${network}` : \"\"}`\n      return (\n        <OTP2TileLayerWithPopup\n          color={color}\n          configCompanies={configCompanies}\n          id={id}\n          key={id}\n          name={name || id}\n          network={network}\n          setLocation={setLocation}\n          setViewedStop={setViewedStop}\n          type={type}\n          visible={initiallyVisible}\n        />\n      )\n    })\n  ]\n}\n\nexport default generateOTP2TileLayers"],"file":"index.js"}