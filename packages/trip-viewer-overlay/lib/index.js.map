{"version":3,"sources":["../src/index.tsx"],"names":["TripViewerOverlay","props","path","tripData","visible","geometry","pts","polyline","decode","points","map","pt","reverse","bounds","reduce","bnds","coord","extend","LngLatBounds","current","length","every","Number","isFinite","util","fitMapBounds","geojson","type","coordinates","properties","color","opacity","weight"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;AAWA,MAAMA,iBAAiB,GAAIC,KAAD,IAA+B;AACvD,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,QAAR;AAAkBC,IAAAA;AAAlB,MAA8BH,KAApC;AACA,MAAI,CAACE,QAAL,EAAe,OAAO,IAAP;AAEf,QAAM;AAAEE,IAAAA;AAAF,MAAeF,QAArB;AAEA,MAAI,CAACE,QAAL,EAAe,OAAO,IAAP;;AAEf,QAAMC,GAAG,GAAGC,kBACTC,MADS,CACFH,QAAQ,CAACI,MADP,EAETC,GAFS,CAEJC,EAAD,IAA0BA,EAAE,CAACC,OAAH,EAFrB,CAAZ;;AAIA,QAAMC,MAAM,GAAG,oBAAQ,MAAM;AAC3B,WAAOP,GAAG,CAACQ,MAAJ,CAAW,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACjC,aAAOD,IAAI,CAACE,MAAL,CAAYD,KAAZ,CAAP;AACD,KAFM,EAEJ,IAAIE,wBAAJ,CAAiBZ,GAAG,CAAC,CAAD,CAApB,EAAyBA,GAAG,CAAC,CAAD,CAA5B,CAFI,CAAP;AAGD,GAJc,EAIZ,CAACA,GAAD,CAJY,CAAf;AAMA,QAAM;AAAEa,IAAAA,OAAO,EAAET;AAAX,MAAmB,yBAAzB;AACA,wBAAU,MAAM;AACd,QAAIA,GAAG,IAAIG,MAAM,CAACO,MAAP,KAAkB,CAAzB,IAA8BP,MAAM,CAACQ,KAAP,CAAaC,MAAM,CAACC,QAApB,CAAlC,EAAiE;AAC/DC,oBAAKC,YAAL,CAAkBf,GAAlB,EAAuBG,MAAvB;AACD;AACF,GAJD,EAIG,CAACH,GAAD,EAAMG,MAAN,CAJH;AAMA,MAAI,CAACT,OAAD,IAAY,CAACE,GAAjB,EAAsB,OAAO,IAAP;AAEtB,QAAMoB,OAAwB,GAAG;AAC/BC,IAAAA,IAAI,EAAE,SADyB;AAE/BtB,IAAAA,QAAQ,EAAE;AAAEsB,MAAAA,IAAI,EAAE,YAAR;AAAsBC,MAAAA,WAAW,EAAEtB;AAAnC,KAFqB;AAG/BuB,IAAAA,UAAU,EAAE;AAHmB,GAAjC;AAMA,sBACE,6BAAC,kBAAD;AAAQ,IAAA,EAAE,EAAC,OAAX;AAAmB,IAAA,IAAI,EAAC,SAAxB;AAAkC,IAAA,IAAI,EAAEH;AAAxC,kBACE,6BAAC,iBAAD;AACE,IAAA,EAAE,EAAC,OADL;AAEE,IAAA,MAAM,EAAE;AAAE,kBAAY,OAAd;AAAuB,mBAAa;AAApC,KAFV;AAGE,IAAA,KAAK,EAAE;AACL,oBAAc,CAAAxB,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAE4B,KAAN,KAAe,SADxB;AAEL,sBAAgB,CAAA5B,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAE6B,OAAN,KAAiB,GAF5B;AAGL,oBAAc,CAAA7B,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAE8B,MAAN,KAAgB;AAHzB,KAHT;AAQE,IAAA,IAAI,EAAC;AARP,IADF,CADF;AAcD,CA/CD;;eAiDehC,iB","sourcesContent":["import polyline from \"@mapbox/polyline\";\nimport { LngLatBounds } from \"maplibre-gl\";\nimport { util } from \"@opentripplanner/base-map\";\nimport { Layer, Source, useMap } from \"react-map-gl\";\nimport React, { useEffect, useMemo } from \"react\";\n\ntype Props = {\n  path?: {\n    color?: string;\n    opacity?: number;\n    weight?: number;\n  };\n  tripData: { geometry: { points: string; length: number } };\n  visible?: boolean;\n};\nconst TripViewerOverlay = (props: Props): JSX.Element => {\n  const { path, tripData, visible } = props;\n  if (!tripData) return null;\n\n  const { geometry } = tripData;\n\n  if (!geometry) return null;\n\n  const pts = polyline\n    .decode(geometry.points)\n    .map((pt: [number, number]) => pt.reverse());\n\n  const bounds = useMemo(() => {\n    return pts.reduce((bnds, coord) => {\n      return bnds.extend(coord);\n    }, new LngLatBounds(pts[0], pts[0]));\n  }, [pts]);\n\n  const { current: map } = useMap();\n  useEffect(() => {\n    if (map && bounds.length === 4 && bounds.every(Number.isFinite)) {\n      util.fitMapBounds(map, bounds);\n    }\n  }, [map, bounds]);\n\n  if (!visible || !pts) return null;\n\n  const geojson: GeoJSON.Feature = {\n    type: \"Feature\",\n    geometry: { type: \"LineString\", coordinates: pts },\n    properties: []\n  };\n\n  return (\n    <Source id=\"route\" type=\"geojson\" data={geojson}>\n      <Layer\n        id=\"route\"\n        layout={{ \"line-cap\": \"round\", \"line-join\": \"round\" }}\n        paint={{\n          \"line-color\": path?.color || \"#00bfff\",\n          \"line-opacity\": path?.opacity || 0.6,\n          \"line-width\": path?.weight || 8\n        }}\n        type=\"line\"\n      />\n    </Source>\n  );\n};\n\nexport default TripViewerOverlay;\n"],"file":"index.js"}