{"version":3,"sources":["../src/index.tsx"],"names":["BaseMap","baseLayer","baseLayerNames","center","children","id","mapLibreProps","maxZoom","onClick","onContextMenu","onViewportChanged","style","zoom","initZoom","viewState","setViewState","React","useState","latitude","longitude","fakeMobileHover","setFakeHover","longPressTimer","setLongPressTimer","toggleableLayers","Array","isArray","flat","filter","child","props","undefined","alwaysShow","map","layerId","name","visible","hiddenLayers","setHiddenLayers","layer","activeBaseLayer","setActiveBaseLayer","clearLongPressTimer","clearTimeout","maplibregl","evt","e","touchPointCount","points","length","setTimeout","index","includes","updatedLayers","splice","indexOf","push","LayerWrapper","Popup","Styled"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\nimport { Map, MapProps } from \"react-map-gl\";\nimport maplibregl, { Event } from \"maplibre-gl\";\n\nimport * as Styled from \"./styled\";\nimport * as util from \"./util\";\nimport MarkerWithPopup from \"./MarkerWithPopup\";\n\n/**\n * The BaseMap component renders a MapLibre map\n * as well as markers that are declared as child elements of the BaseMap element.\n *\n * As BaseMap wraps a react-map-gl Map component, any control which can be added as a child of a react-map-gl map is supported.\n * See https://visgl.github.io/react-map-gl/docs/api-reference/map to see which react-map-gl\n * children are shipped by default. Others are also supported.\n *\n * Overlays are groups of similar MapLibre markers, e.g. vehicle location\n * markers, bus stop markers, etc.\n *\n * Overlays are automatically added to the overlay control displayed by the\n * BaseMap. The user uses that control to turn overlays on or off. Only overlays\n * with an id are added to the control.\n */\ntype Props = React.ComponentPropsWithoutRef<React.ElementType> & {\n  /** A URL, or list of URLs pointing to the vector tile specification which should be used as the main map.  */\n  baseLayer?: string | string[];\n  /** A list of names to match onto the base layers. Used only if there are multiple entries defined for `BaseLayer` */\n  baseLayerNames?: string[];\n  /** A [lat, lon] position to center the map at. */\n  center?: [number, number];\n  /** A unique identifier for the map (useful when using MapProvider) */\n  id?: string;\n  /** An object of props which should be passed down to MapLibre */\n  mapLibreProps?: MapProps;\n  /** The maximum zoom level the map should allow */\n  maxZoom?: number;\n  /** A callback method which is fired when the map is clicked with the left mouse button/tapped */\n  onClick?: (evt: Event) => void;\n  /** A callback method which is fired when the map is clicked with the right mouse button/long tapped */\n  // Unknown is used here because of a maplibre/mapbox issue with the true type, MapLayerMouseEvent\n  onContextMenu?: (e: unknown) => void;\n  /** A callback method which is fired when the map zoom or map bounds change */\n  onViewportChanged?: (e: State) => void;\n  /** An initial zoom value for the map */\n  zoom?: number;\n};\ntype State = {\n  latitude: number;\n  longitude: number;\n  zoom: number;\n};\n\nconst BaseMap = ({\n  // These tiles are free to use, but not in production\n  baseLayer = \"https://basemaps.cartocdn.com/gl/positron-gl-style/style.json\",\n  baseLayerNames,\n  center,\n  children,\n  id,\n  mapLibreProps,\n  maxZoom,\n  onClick,\n  onContextMenu,\n  onViewportChanged,\n  style,\n  zoom: initZoom = 12\n}: Props): JSX.Element => {\n  const [viewState, setViewState] = React.useState<State>({\n    latitude: center?.[0],\n    longitude: center?.[1],\n    zoom: initZoom\n  });\n\n  // Firefox and Safari on iOS: hover is not triggered when the user touches the layer selector\n  // (unlike Firefox or Chromium on Android), so we have to detect touch and trigger hover ourselves.\n  const [fakeMobileHover, setFakeHover] = useState(false);\n  const [longPressTimer, setLongPressTimer] = useState(null);\n\n  useEffect(() => {\n    if (typeof onViewportChanged === \"function\") {\n      onViewportChanged(viewState);\n    }\n  }, [viewState]);\n\n  useEffect(() => {\n    if (center?.[0] === null || center?.[1] === null) return;\n\n    setViewState({\n      ...viewState,\n      latitude: center?.[0],\n      longitude: center?.[1]\n    });\n  }, [center]);\n\n  const toggleableLayers = Array.isArray(children)\n    ? children\n        .flat(10)\n        .filter(\n          child =>\n            child?.props?.id !== undefined &&\n            // Some sources will not have layers as children, and should be ignored\n            // from the list.\n            child?.props?.alwaysShow !== true\n        )\n        .map(child => {\n          const { id: layerId, name, visible } = child.props;\n          return { id: layerId, name, visible };\n        })\n    : [];\n\n  const [hiddenLayers, setHiddenLayers] = useState(\n    toggleableLayers.filter(layer => !layer?.visible).map(layer => layer.id)\n  );\n  const [activeBaseLayer, setActiveBaseLayer] = useState(\n    typeof baseLayer === \"object\" ? baseLayer?.[0] : baseLayer\n  );\n\n  const clearLongPressTimer = useCallback(() => clearTimeout(longPressTimer), [\n    longPressTimer\n  ]);\n\n  return (\n    <Map\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...mapLibreProps}\n      id={id}\n      latitude={viewState.latitude}\n      longitude={viewState.longitude}\n      mapLib={maplibregl}\n      mapStyle={activeBaseLayer}\n      maxZoom={maxZoom}\n      onClick={onClick}\n      onContextMenu={onContextMenu}\n      onMove={evt => {\n        setViewState(evt.viewState);\n        clearLongPressTimer();\n      }}\n      onTouchStart={e => {\n        setFakeHover(false);\n        // Start detecting long presses on screens when there is only one touch point.\n        // If the user is pinching the map or does other multi-touch actions, cancel long-press detection.\n        const touchPointCount = e.points.length;\n        if (touchPointCount === 1) {\n          setLongPressTimer(setTimeout(() => onContextMenu(e), 600));\n        } else {\n          clearLongPressTimer();\n        }\n      }}\n      onTouchCancel={clearLongPressTimer}\n      onTouchEnd={clearLongPressTimer}\n      style={style}\n      zoom={viewState.zoom}\n    >\n      {(toggleableLayers.length > 0 ||\n        (!!baseLayer &&\n          typeof baseLayer === \"object\" &&\n          baseLayer.length > 1)) && (\n        <Styled.LayerSelector\n          className=\"filter-group\"\n          id=\"filter-group\"\n          onBlur={() => setFakeHover(false)}\n          onFocus={() => setFakeHover(true)}\n          onTouchEnd={() => setFakeHover(true)}\n        >\n          <ul\n            className={`maplibregl-ctrl-group layers-list ${\n              fakeMobileHover ? \"fake-mobile-hover\" : \"\"\n            }`}\n          >\n            {!!baseLayer &&\n              typeof baseLayer === \"object\" &&\n              baseLayer.map((layer: string, index: number) => {\n                return (\n                  <li key={index}>\n                    {/* eslint-disable-next-line jsx-a11y/label-has-associated-control */}\n                    <label>\n                      <input\n                        checked={activeBaseLayer === layer}\n                        id={layer}\n                        name=\"base-layer\"\n                        onChange={() => setActiveBaseLayer(layer)}\n                        type=\"radio\"\n                      />\n                      {baseLayerNames?.[index] || layer}\n                    </label>\n                  </li>\n                );\n              })}\n\n            {toggleableLayers.map((layer: LayerProps, index: number) => {\n              return (\n                <li key={index}>\n                  {/* eslint-disable-next-line jsx-a11y/label-has-associated-control */}\n                  <label>\n                    <input\n                      checked={!hiddenLayers.includes(layer.id)}\n                      id={layer.id}\n                      onChange={() => {\n                        const updatedLayers = [...hiddenLayers];\n                        // Delete the layer id if present, add it otherwise\n                        updatedLayers.includes(layer.id)\n                          ? updatedLayers.splice(\n                              updatedLayers.indexOf(layer.id),\n                              1\n                            )\n                          : updatedLayers.push(layer.id);\n\n                        setHiddenLayers(updatedLayers);\n                      }}\n                      type=\"checkbox\"\n                    />\n                    {layer.name || layer.id}\n                  </label>\n                </li>\n              );\n            })}\n          </ul>\n        </Styled.LayerSelector>\n      )}\n      {Array.isArray(children)\n        ? children\n            .flat(10)\n            .filter(child => !hiddenLayers.includes(child?.props?.id))\n        : children}\n    </Map>\n  );\n};\n\nexport default BaseMap;\n\ntype LayerProps = React.ComponentPropsWithoutRef<React.ElementType> & {\n  id: string;\n  name?: string;\n  visible?: boolean;\n};\nconst LayerWrapper = (props: LayerProps): JSX.Element => {\n  const { children, visible } = props;\n  return <>{visible && children}</>;\n};\n\nexport const Popup = Styled.Popup;\n\nexport { LayerWrapper, MarkerWithPopup, Styled, util };\n"],"file":"index.js"}