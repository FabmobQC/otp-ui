{"version":3,"sources":["../src/query-gen.ts"],"names":["extractAdditionalModes","modeSettings","enabledModes","reduce","prev","cur","map","m","mode","includes","applicableMode","type","addTransportMode","value","newTransportModes","Array","isArray","transportMode","options","find","o","combinations","array","length","fill","e1","i","filter","e2","j","SIMPLIFICATIONS","AIRPLANE","BICYCLE","BUS","CABLE_CAR","CAR","FERRY","FLEX","FUNICULAR","GONDOLA","RAIL","SCOOTER","SUBWAY","TROLLEYBUS","TRAM","TRANSIT","WALK","VALID_COMBOS","BANNED_TOGETHER","TRANSIT_SUBMODES","Object","keys","TRANSIT_SUBMODES_AND_TRANSIT","isCombinationValid","combo","queryTransitSubmodes","simplifiedModes","from","Set","c","qualifier","vc","every","generateCombinations","params","completeModeList","modes","generateOtp2Query","arriveBy","banned","date","numItineraries","preferred","time","to","planQuery","DefaultPlanQuery","modeSettingValues","inverseKey","high","low","key","truthValue","falseValue","bikeReluctance","carReluctance","walkSpeed","walkReluctance","wheelchair","query","variables","fromPlace","name","lat","lon","toPlace"],"mappings":"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","sourcesContent":["import { LonLatOutput } from \"@conveyal/lonlat\";\nimport { print } from \"graphql\";\nimport {\n  ModeSetting,\n  ModeSettingValues,\n  TransportMode\n} from \"@opentripplanner/types\";\n\nimport DefaultPlanQuery from \"./planQuery.graphql\";\n\ntype InputBanned = {\n  routes?: string;\n  agencies?: string;\n  trips?: string;\n  stops?: string;\n  stopsHard?: string;\n};\n\ntype InputPreferred = {\n  routes?: string;\n  agencies?: string;\n  unpreferredCost?: string;\n};\n\ntype OTPQueryParams = {\n  arriveBy: boolean;\n  date?: string;\n  from: LonLatOutput & { name?: string };\n  modes: TransportMode[];\n  modeSettings: ModeSetting[];\n  time?: string;\n  numItineraries?: number;\n  to: LonLatOutput & { name?: string };\n  banned?: InputBanned;\n  preferred?: InputPreferred;\n};\n\ntype GraphQLQuery = {\n  query: string;\n  variables: Record<string, unknown>;\n};\n\n/**\n * Mode Settings can contain additional modes to add to the query,\n * this function extracts those additional modes from the settings\n * and returns them in an array.\n * @param modeSettings List of mode settings with values populated\n * @returns Additional transport modes to add to query\n */\nexport function extractAdditionalModes(\n  modeSettings: ModeSetting[],\n  enabledModes: TransportMode[]\n): TransportMode[] {\n  return modeSettings.reduce<TransportMode[]>((prev, cur) => {\n    // First, ensure that the mode associated with this setting is even enabled\n    if (!enabledModes.map(m => m.mode).includes(cur.applicableMode)) {\n      return prev;\n    }\n\n    // In checkboxes, mode must be enabled and have a transport mode in it\n    if (\n      (cur.type === \"CHECKBOX\" || cur.type === \"SUBMODE\") &&\n      cur.addTransportMode &&\n      cur.value\n    ) {\n      const newTransportModes = Array.isArray(cur.addTransportMode)\n        ? cur.addTransportMode\n        : [cur.addTransportMode];\n      return [...prev, ...newTransportModes];\n    }\n    if (cur.type === \"DROPDOWN\") {\n      const transportMode = cur.options.find(o => o.value === cur.value)\n        ?.addTransportMode;\n      if (transportMode) {\n        return [...prev, transportMode];\n      }\n    }\n    return prev;\n  }, []);\n}\n\n/**\n * Generates every possible mathematical subset of the input TransportModes.\n * Uses code from:\n * https://stackoverflow.com/questions/5752002/find-all-possible-subset-combos-in-an-array\n * @param array Array of input transport modes\n * @returns 2D array representing every possible subset of transport modes from input\n */\nfunction combinations(array: TransportMode[]): TransportMode[][] {\n  if (!array) return [];\n  return (\n    // eslint-disable-next-line no-bitwise\n    new Array(1 << array.length)\n      .fill(null)\n      // eslint-disable-next-line no-bitwise\n      .map((e1, i) => array.filter((e2, j) => i & (1 << j)))\n  );\n}\n\n/**\n * This constant maps all the transport mode to a broader mode type,\n * which is used to determine the valid combinations of modes used in query generation.\n */\nexport const SIMPLIFICATIONS = {\n  AIRPLANE: \"TRANSIT\",\n  BICYCLE: \"PERSONAL\",\n  BUS: \"TRANSIT\",\n  CABLE_CAR: \"TRANSIT\",\n  CAR: \"CAR\",\n  FERRY: \"TRANSIT\",\n  FLEX: \"SHARED\", // TODO: this allows FLEX+WALK. Is this reasonable?\n  FUNICULAR: \"TRANSIT\",\n  GONDOLA: \"TRANSIT\",\n  RAIL: \"TRANSIT\",\n  SCOOTER: \"PERSONAL\",\n  SUBWAY: \"TRANSIT\",\n  TROLLEYBUS: \"TRANSIT\",\n  TRAM: \"TRANSIT\",\n  TRANSIT: \"TRANSIT\",\n  WALK: \"WALK\"\n};\n\n// Inclusion of \"TRANSIT\" alone automatically implies \"WALK\" in OTP\nconst VALID_COMBOS = [\n  [\"WALK\"],\n  [\"PERSONAL\"],\n  [\"TRANSIT\", \"SHARED\"],\n  [\"WALK\", \"SHARED\"],\n  [\"TRANSIT\"],\n  [\"TRANSIT\", \"PERSONAL\"],\n  [\"TRANSIT\", \"CAR\"]\n];\n\nconst BANNED_TOGETHER = [\"SCOOTER\", \"BICYCLE\", \"CAR\"];\n\nexport const TRANSIT_SUBMODES = Object.keys(SIMPLIFICATIONS).filter(\n  mode => SIMPLIFICATIONS[mode] === \"TRANSIT\" && mode !== \"TRANSIT\"\n);\nexport const TRANSIT_SUBMODES_AND_TRANSIT = Object.keys(SIMPLIFICATIONS).filter(\n  mode => SIMPLIFICATIONS[mode] === \"TRANSIT\"\n);\n\nfunction isCombinationValid(\n  combo: TransportMode[],\n  queryTransitSubmodes: string[]\n): boolean {\n  if (combo.length === 0) return false;\n\n  // All current qualifiers currently simplify to \"SHARED\"\n  const simplifiedModes = Array.from(\n    new Set(combo.map(c => (c.qualifier ? \"SHARED\" : SIMPLIFICATIONS[c.mode])))\n  );\n\n  // Ensure that if we have one transit mode, then we include ALL transit modes\n  if (simplifiedModes.includes(\"TRANSIT\")) {\n    // Don't allow TRANSIT along with any other submodes\n    if (queryTransitSubmodes.length && combo.find(c => c.mode === \"TRANSIT\")) {\n      return false;\n    }\n\n    if (\n      combo.reduce((prev, cur) => {\n        if (queryTransitSubmodes.includes(cur.mode)) {\n          return prev - 1;\n        }\n        return prev;\n      }, queryTransitSubmodes.length) !== 0\n    ) {\n      return false;\n    }\n    // Continue to the other checks\n  }\n\n  // OTP doesn't support multiple non-walk modes\n  if (BANNED_TOGETHER.filter(m => combo.find(c => c.mode === m)).length > 1) {\n    return false;\n  }\n\n  return !!VALID_COMBOS.find(\n    vc =>\n      simplifiedModes.every(m => vc.includes(m)) &&\n      vc.every(m => simplifiedModes.includes(m))\n  );\n}\n\n/**\n * Generates a list of queries for OTP to get a comprehensive\n * set of results based on the modes input.\n * @param params OTP Query Params\n * @returns Set of parameters to generate queries\n */\nexport function generateCombinations(params: OTPQueryParams): OTPQueryParams[] {\n  const completeModeList = [\n    ...extractAdditionalModes(params.modeSettings, params.modes),\n    ...params.modes\n  ];\n\n  // List of the transit *submodes* that are included in the input params\n  const queryTransitSubmodes = completeModeList\n    .filter(mode => TRANSIT_SUBMODES.includes(mode.mode))\n    .map(mode => mode.mode);\n\n  return combinations(completeModeList)\n    .filter(combo => isCombinationValid(combo, queryTransitSubmodes))\n    .map(combo => ({ ...params, modes: combo }));\n}\n\n/**\n * Generates a query for OTP GraphQL API based on parameters.\n * @param param0 OTP2 Parameters for the query\n * @param planQuery Override the default query for OTP\n * @returns A fully formed query+variables ready to be sent to GraphQL backend\n */\nexport function generateOtp2Query(\n  {\n    arriveBy,\n    banned,\n    date,\n    from,\n    modes,\n    modeSettings,\n    numItineraries,\n    preferred,\n    time,\n    to\n  }: OTPQueryParams,\n  planQuery = DefaultPlanQuery\n): GraphQLQuery {\n  // This extracts the values from the mode settings to key value pairs\n  const modeSettingValues = modeSettings.reduce((prev, cur) => {\n    if (cur.type === \"SLIDER\" && cur.inverseKey) {\n      prev[cur.inverseKey] = cur.high - cur.value + cur.low;\n    }\n    prev[cur.key] = cur.value;\n\n    // If we assign a value on true, return the value (or null) instead of a boolean.\n    if (cur.type === \"CHECKBOX\" && cur.truthValue) {\n      prev[cur.key] =\n        cur.value === true ? cur.truthValue : cur.falseValue ?? null;\n    }\n    return prev;\n  }, {}) as ModeSettingValues;\n\n  const {\n    bikeReluctance,\n    carReluctance,\n    walkSpeed,\n    walkReluctance,\n    wheelchair\n  } = modeSettingValues;\n\n  return {\n    query: print(planQuery),\n    variables: {\n      arriveBy,\n      banned,\n      bikeReluctance,\n      carReluctance,\n      date,\n      fromPlace: `${from.name}::${from.lat},${from.lon}}`,\n      modes,\n      numItineraries,\n      preferred,\n      time,\n      toPlace: `${to.name}::${to.lat},${to.lon}}`,\n      walkReluctance,\n      walkSpeed,\n      wheelchair\n    }\n  };\n}\n"],"file":"query-gen.js"}