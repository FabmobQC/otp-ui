{"version":3,"sources":["../src/query-params.js"],"names":["formatPlace","location","alternateName","name","lat","lon","storedSettings","queryParams","routingTypes","default","itineraryRewrite","value","fromPlace","profileRewrite","from","toPlace","to","getCurrentDate","getCurrentTime","arriveBy","accessModes","directModes","transitModes","length","split","forEach","m","push","applicable","query","otp2","mode","indexOf","selector","label","options","text","maxWalkDistance","maxBikeDistance","opts","optimize","low","high","step","labelLow","labelHigh","maxEScooterDistance","watts","maximumMicromobilitySpeed","weight","TYPICAL_RIDER_WEIGHT","icon","config","modes","configModes","concat","some","configMode","find","showWheelchairSetting","company","companies","includes","places","Array","isArray","intermediatePlaces","map","place","undefined","param","userDefaultOverride","getCustomQueryParams","customizations","clonedParams","Object","keys","k","paramIndex","findIndex"],"mappings":"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","sourcesContent":["// TODO: Remove this entire file, as it is deprecated in favor of i18n-queryParams within\n// the SettingsSelector package\n\n// This is only used within stories\nimport cloneDeep from \"lodash.clonedeep\";\nimport React from \"react\";\nimport { Wheelchair } from \"@styled-icons/foundation/Wheelchair\";\n\nimport {\n  isTransit,\n  isAccessMode,\n  isCar,\n  hasTransit,\n  hasBike,\n  hasMicromobility\n} from \"./itinerary\";\nimport { getItem } from \"./storage\";\nimport { getCurrentDate, getCurrentTime } from \"./time\";\n\n/**\n * name: the default name of the parameter used for internal reference and API calls\n *\n * routingTypes: array of routing type(s) (ITINERARY, PROFILE, or both) this param applies to\n *\n * applicable: an optional function (accepting the current full query as a\n *   parameter) indicating whether this query parameter is applicable to the query.\n *   (Applicability is assumed if this function is not provided.)\n *\n * default: the default value for this parameter. The default can be also be a\n *  function that gets executed when accessing the default value.\n *\n * itineraryRewrite: an optional function for translating the key and/or value\n *   for ITINERARY mode only (e.g. 'to' is rewritten as 'toPlace'). Accepts the\n *   initial internal value as a function parameter.\n *\n * profileRewrite: an optional function for translating the value for PROFILE mode\n *\n * label: a text label for for onscreen display. May either be a text string or a\n *   function (accepting the current full query as a parameter) returning a string\n *\n * selector: the default type of UI selector to use in the form. Can be one of:\n *   - DROPDOWN: a standard drop-down menu selector\n *\n * options: an array of text/value pairs used with a dropdown selector\n *\n * TODO: validation system for rewrite functions and/or better user documentation\n * TODO: alphabetize below list\n */\n\n// FIXME: Use for parsing URL values?\n// const stringToLocation = string => {\n//   const split = string.split(',')\n//   return split.length === 2\n//     ? {lat: split[0], lon: split[1]}\n//     : {lat: null, lon: null}\n// }\n\n/**\n * Format location object as string for use in fromPlace or toPlace query param.\n */\nexport function formatPlace(location, alternateName) {\n  if (!location) return null;\n  const name =\n    location.name ||\n    `${alternateName ? `${alternateName} ` : \"\"}(${location.lat},${\n      location.lon\n    })`;\n  // This string is not language-specific\n  return `${name}::${location.lat},${location.lon}`;\n}\n\n// Load stored default query settings from local storage\nconst storedSettings = getItem(\"defaultQuery\", {});\n\nconst queryParams = [\n  {\n    /* from - the trip origin. stored internally as a location (lat/lon/name) object  */\n    name: \"from\",\n    routingTypes: [\"ITINERARY\", \"PROFILE\"],\n    default: null,\n    itineraryRewrite: value => ({ fromPlace: formatPlace(value) }),\n    profileRewrite: value => ({ from: { lat: value.lat, lon: value.lon } })\n    // FIXME: Use for parsing URL values?\n    // fromURL: stringToLocation\n  },\n\n  {\n    /* to - the trip destination. stored internally as a location (lat/lon/name) object  */\n    name: \"to\",\n    routingTypes: [\"ITINERARY\", \"PROFILE\"],\n    default: null,\n    itineraryRewrite: value => ({ toPlace: formatPlace(value) }),\n    profileRewrite: value => ({ to: { lat: value.lat, lon: value.lon } })\n    // FIXME: Use for parsing URL values?\n    // fromURL: stringToLocation\n  },\n\n  {\n    /* date - the date of travel, in MM-DD-YYYY format */\n    name: \"date\",\n    routingTypes: [\"ITINERARY\", \"PROFILE\"],\n    default: getCurrentDate\n  },\n\n  {\n    /* time - the arrival/departure time for an itinerary trip, in HH:mm format */\n    name: \"time\",\n    routingTypes: [\"ITINERARY\"],\n    default: getCurrentTime\n  },\n\n  {\n    /* departArrive - whether this is a depart-at, arrive-by, or leave-now trip */\n    name: \"departArrive\",\n    routingTypes: [\"ITINERARY\"],\n    default: \"NOW\",\n    itineraryRewrite: value => ({ arriveBy: value === \"ARRIVE\" })\n  },\n\n  {\n    /* startTime - the start time for a profile trip, in HH:mm format */\n    name: \"startTime\",\n    routingTypes: [\"PROFILE\"],\n    default: \"07:00\"\n  },\n\n  {\n    /* endTime - the end time for a profile trip, in HH:mm format */\n    name: \"endTime\",\n    routingTypes: [\"PROFILE\"],\n    default: \"09:00\"\n  },\n\n  {\n    /* mode - the allowed modes for a trip, as a comma-separated list */\n    name: \"mode\",\n    routingTypes: [\"ITINERARY\", \"PROFILE\"],\n    default: \"WALK,TRANSIT\", // TODO: make this dependent on routingType?\n    profileRewrite: value => {\n      const accessModes = [];\n      const directModes = [];\n      const transitModes = [];\n\n      if (value && value.length > 0) {\n        value.split(\",\").forEach(m => {\n          if (isTransit(m)) transitModes.push(m);\n          if (isAccessMode(m)) {\n            accessModes.push(m);\n            // TODO: make configurable whether direct-driving is considered\n            if (!isCar(m)) directModes.push(m);\n          }\n        });\n      }\n\n      return { accessModes, directModes, transitModes };\n    }\n  },\n\n  {\n    /* showIntermediateStops - whether response should include intermediate stops for transit legs */\n    name: \"showIntermediateStops\",\n    routingTypes: [\"ITINERARY\"],\n    default: true\n  },\n\n  {\n    /* maxWalkDistance - the maximum distance in meters the user will walk to transit. */\n    name: \"maxWalkDistance\",\n    routingTypes: [\"ITINERARY\"],\n    applicable: query =>\n      /* Since this query variable isn't in this list, it's not included in the generated query\n       * It does however allow us to determine if we should show the OTP1 max walk distance\n       * dropdown or the OTP2 walk reluctance slider\n       */\n      !query.otp2 &&\n      query.mode &&\n      hasTransit(query.mode) &&\n      query.mode.indexOf(\"WALK\") !== -1,\n    default: 1609, // 1 mi.\n    selector: \"DROPDOWN\",\n    label: \"Maximum Walk\",\n    options: [\n      {\n        text: \"1/10 mile\",\n        value: 160.9\n      },\n      {\n        text: \"1/4 mile\",\n        value: 402.3\n      },\n      {\n        text: \"1/2 mile\",\n        value: 804.7\n      },\n      {\n        text: \"3/4 mile\",\n        value: 1207\n      },\n      {\n        text: \"1 mile\",\n        value: 1609\n      },\n      {\n        text: \"2 miles\",\n        value: 3219\n      },\n      {\n        text: \"5 miles\",\n        value: 8047\n      }\n    ]\n  },\n\n  {\n    /* maxBikeDistance - the maximum distance in meters the user will bike. Not\n     * actually an OTP parameter (maxWalkDistance doubles for biking) but we\n     * store it separately internally in order to allow different default values,\n     * options, etc.  Translated to 'maxWalkDistance' via the rewrite function.\n     */\n    name: \"maxBikeDistance\",\n    routingTypes: [\"ITINERARY\"],\n    applicable: query =>\n      query.mode &&\n      hasTransit(query.mode) &&\n      query.mode.indexOf(\"BICYCLE\") !== -1,\n    default: 4828, // 3 mi.\n    selector: \"DROPDOWN\",\n    label: \"Maximum Bike\",\n    options: [\n      {\n        text: \"1/4 mile\",\n        value: 402.3\n      },\n      {\n        text: \"1/2 mile\",\n        value: 804.7\n      },\n      {\n        text: \"3/4 mile\",\n        value: 1207\n      },\n      {\n        text: \"1 mile\",\n        value: 1609\n      },\n      {\n        text: \"2 miles\",\n        value: 3219\n      },\n      {\n        text: \"3 miles\",\n        value: 4828\n      },\n      {\n        text: \"5 miles\",\n        value: 8047\n      },\n      {\n        text: \"10 miles\",\n        value: 16093\n      },\n      {\n        text: \"20 miles\",\n        value: 32187\n      },\n      {\n        text: \"30 miles\",\n        value: 48280\n      }\n    ],\n    itineraryRewrite: value => ({\n      maxWalkDistance: value,\n      // ensures that the value is repopulated when loaded from URL params\n      maxBikeDistance: value\n    })\n  },\n\n  {\n    /* optimize -- how to optimize a trip (non-bike, non-micromobility trips) */\n    name: \"optimize\",\n    // This parameter doesn't seem to do anything\n    applicable: () => false,\n    routingTypes: [\"ITINERARY\"],\n    default: \"QUICK\",\n    selector: \"DROPDOWN\",\n    label: \"Optimize for\",\n    options: [\n      {\n        text: \"Speed\",\n        value: \"QUICK\"\n      },\n      {\n        text: \"Fewest Transfers\",\n        value: \"TRANSFERS\"\n      }\n    ]\n  },\n\n  {\n    /* optimizeBike -- how to optimize an bike-based trip */\n    name: \"optimizeBike\",\n    applicable: query => !query.otp2 && hasBike(query.mode),\n    routingTypes: [\"ITINERARY\"],\n    default: \"SAFE\",\n    selector: \"DROPDOWN\",\n    label: \"Optimize for\",\n    options: () => {\n      const opts = [\n        {\n          text: \"Speed\",\n          value: \"QUICK\"\n        },\n        {\n          text: \"Bike-Friendly Trip\",\n          value: \"SAFE\"\n        },\n        {\n          text: \"Flat Trip\",\n          value: \"FLAT\"\n        }\n      ];\n\n      return opts;\n    },\n    itineraryRewrite: value => ({ optimize: value })\n  },\n\n  {\n    /* maxWalkTime -- the maximum time the user will spend walking in minutes */\n    name: \"maxWalkTime\",\n    routingTypes: [\"PROFILE\"],\n    default: 15,\n    selector: \"DROPDOWN\",\n    label: \"Max Walk Time\",\n    applicable: query =>\n      query.mode && hasTransit(query.mode) && query.mode.indexOf(\"WALK\") !== -1,\n    options: [\n      {\n        text: \"5 minutes\",\n        value: 5\n      },\n      {\n        text: \"10 minutes\",\n        value: 10\n      },\n      {\n        text: \"15 minutes\",\n        value: 15\n      },\n      {\n        text: \"20 minutes\",\n        value: 20\n      },\n      {\n        text: \"30 minutes\",\n        value: 30\n      },\n      {\n        text: \"45 minutes\",\n        value: 45\n      },\n      {\n        text: \"1 hour\",\n        value: 60\n      }\n    ]\n  },\n  {\n    name: \"walkReluctance\",\n    routingTypes: [\"ITINERARY\", \"PROFILE\"],\n    selector: \"SLIDER\",\n    low: 1,\n    high: 10,\n    step: 0.5,\n    label: \"walk reluctance\",\n    labelLow: \"More Walking\",\n    labelHigh: \"More Transit\",\n    applicable: query =>\n      /* Since this query variable isn't in this list, it's not included in the generated query\n       * It does however allow us to determine if we should show the OTP1 max walk distance\n       * dropdown or the OTP2 walk reluctance slider\n       */\n      !!query.otp2 && query.mode && query.mode.indexOf(\"WALK\") !== -1\n  },\n  {\n    /* maxBikeTime -- the maximum time the user will spend biking in minutes */\n    name: \"maxBikeTime\",\n    routingTypes: [\"PROFILE\"],\n    default: 20,\n    selector: \"DROPDOWN\",\n    label: \"Max Bike Time\",\n    applicable: query =>\n      query.mode &&\n      hasTransit(query.mode) &&\n      query.mode.indexOf(\"BICYCLE\") !== -1,\n    options: [\n      {\n        text: \"5 minutes\",\n        value: 5\n      },\n      {\n        text: \"10 minutes\",\n        value: 10\n      },\n      {\n        text: \"15 minutes\",\n        value: 15\n      },\n      {\n        text: \"20 minutes\",\n        value: 20\n      },\n      {\n        text: \"30 minutes\",\n        value: 30\n      },\n      {\n        text: \"45 minutes\",\n        value: 45\n      },\n      {\n        text: \"1 hour\",\n        value: 60\n      }\n    ]\n  },\n\n  {\n    /* bikeSpeed -- the user's bikeSpeed speed in m/s */\n    name: \"bikeSpeed\",\n    routingTypes: [\"ITINERARY\", \"PROFILE\"],\n    default: 3.58,\n    selector: \"DROPDOWN\",\n    label: \"Bicycle Speed\",\n    applicable: query => query.mode && query.mode.indexOf(\"BICYCLE\") !== -1,\n    options: [\n      {\n        text: \"6 MPH\",\n        value: 2.68\n      },\n      {\n        text: \"8 MPH\",\n        value: 3.58\n      },\n      {\n        text: \"10 MPH\",\n        value: 4.47\n      },\n      {\n        text: \"12 MPH\",\n        value: 5.36\n      }\n    ]\n  },\n\n  {\n    /* maxEScooterDistance - the maximum distance in meters the user will ride\n     * an E-scooter. Not actually an OTP parameter (maxWalkDistance doubles for\n     * any non-transit mode except for car) but we store it separately\n     * internally in order to allow different default values, options, etc.\n     * Translated to 'maxWalkDistance' via the rewrite function.\n     */\n    name: \"maxEScooterDistance\",\n    routingTypes: [\"ITINERARY\"],\n    applicable: query =>\n      query.mode && hasTransit(query.mode) && hasMicromobility(query.mode),\n    default: 4828, // 3 mi.\n    selector: \"DROPDOWN\",\n    label: \"Maximum E-scooter Distance\",\n    options: [\n      {\n        text: \"1/4 mile\",\n        value: 402.3\n      },\n      {\n        text: \"1/2 mile\",\n        value: 804.7\n      },\n      {\n        text: \"3/4 mile\",\n        value: 1207\n      },\n      {\n        text: \"1 mile\",\n        value: 1609\n      },\n      {\n        text: \"2 miles\",\n        value: 3219\n      },\n      {\n        text: \"3 miles\",\n        value: 4828\n      },\n      {\n        text: \"5 miles\",\n        value: 8047\n      },\n      {\n        text: \"10 miles\",\n        value: 16093\n      },\n      {\n        text: \"20 miles\",\n        value: 32187\n      },\n      {\n        text: \"30 miles\",\n        value: 48280\n      }\n    ],\n    itineraryRewrite: value => ({\n      maxWalkDistance: value,\n      // ensures that the value is repopulated when loaded from URL params\n      maxEScooterDistance: value\n    })\n  },\n\n  {\n    /* bikeSpeed -- the user's bikeSpeed speed in m/s */\n    name: \"watts\",\n    routingTypes: [\"ITINERARY\", \"PROFILE\"],\n    default: 250,\n    selector: \"DROPDOWN\",\n    label: \"E-scooter Power\",\n    // this configuration should only be allowed for personal E-scooters as these\n    // settings will be defined by the vehicle type of an E-scooter being rented\n    applicable: query =>\n      query.mode &&\n      query.mode.indexOf(\"MICROMOBILITY\") !== -1 &&\n      query.mode.indexOf(\"MICROMOBILITY_RENT\") === -1 &&\n      query.mode.indexOf(\"SCOOTER\") === -1,\n    options: [\n      {\n        text: \"Kid's hoverboard (6mph)\",\n        value: 125\n      },\n      {\n        text: \"Entry-level scooter (11mph)\",\n        value: 250\n      },\n      {\n        text: \"Robust E-scooter (18mph)\",\n        value: 500\n      },\n      {\n        text: \"Powerful E-scooter (24mph)\",\n        value: 1500\n      }\n    ],\n    // rewrite a few other values to add some baseline assumptions about the\n    // vehicle\n    itineraryRewrite: value => {\n      const watts = value;\n      // the maximum cruising and downhill speed. Units in m/s\n      let maximumMicromobilitySpeed;\n      let weight;\n      // see https://en.wikipedia.org/wiki/Human_body_weight#Average_weight_around_the_world\n      // estimate is for an average North American human with clothes and stuff\n      // units are in kg\n      const TYPICAL_RIDER_WEIGHT = 90;\n      switch (watts) {\n        case 125:\n          // exemplar: Swagtron Turbo 5 hoverboard (https://swagtron.com/product/recertified-swagtron-turbo-five-hoverboard-classic/)\n          maximumMicromobilitySpeed = 2.8; // ~= 6mph\n          weight = TYPICAL_RIDER_WEIGHT + 9;\n          break;\n        case 250:\n          // exemplar: Xiaomi M365 (https://www.gearbest.com/skateboard/pp_596618.html)\n          maximumMicromobilitySpeed = 5; // ~= 11.5mph\n          weight = TYPICAL_RIDER_WEIGHT + 12.5;\n          break;\n        case 500:\n          // exemplar: Razor EcoSmart Metro (https://www.amazon.com/Razor-EcoSmart-Metro-Electric-Scooter/dp/B002ZDAEIS?SubscriptionId=AKIAJMXJ2YFJTEDLQMUQ&tag=digitren08-20&linkCode=xm2&camp=2025&creative=165953&creativeASIN=B002ZDAEIS&ascsubtag=15599460143449ocb)\n          maximumMicromobilitySpeed = 8; // ~= 18mph\n          weight = TYPICAL_RIDER_WEIGHT + 30;\n          break;\n        case 1000:\n          // exemplar: Boosted Rev (https://boostedboards.com/vehicles/scooters/boosted-rev)\n          maximumMicromobilitySpeed = 11; // ~= 24mph\n          weight = TYPICAL_RIDER_WEIGHT + 21;\n          break;\n        default:\n          break;\n      }\n      return { maximumMicromobilitySpeed, watts, weight };\n    }\n  },\n\n  {\n    /* ignoreRealtimeUpdates -- if true, do not use realtime updates in routing */\n    name: \"ignoreRealtimeUpdates\",\n    routingTypes: [\"ITINERARY\"],\n    default: false\n  },\n\n  {\n    /* companies -- tnc companies to query */\n    name: \"companies\",\n    routingTypes: [\"ITINERARY\"]\n  },\n\n  {\n    /* wheelchair -- whether the user requires a wheelchair-accessible trip */\n    name: \"wheelchair\",\n    routingTypes: [\"ITINERARY\", \"PROFILE\"],\n    default: false,\n    selector: \"CHECKBOX\",\n    label: \"Prefer Wheelchair Accessible Routes\",\n    icon: <Wheelchair />,\n    applicable: (query, config) => {\n      if (!query.mode || !config.modes) return false;\n      const configModes = (config.modes.accessModes || []).concat(\n        config.modes.transitModes || []\n      );\n      return query.mode.split(\",\").some(mode => {\n        const configMode = configModes.find(m => m.mode === mode);\n        if (!configMode || !configMode.showWheelchairSetting) return false;\n        if (\n          configMode.company &&\n          (!query.companies ||\n            !query.companies.split(\",\").includes(configMode.company))\n        )\n          return false;\n        return true;\n      });\n    }\n  },\n\n  {\n    name: \"bannedRoutes\",\n    routingTypes: [\"ITINERARY\"]\n  },\n  {\n    name: \"numItineraries\",\n    routingTypes: [\"ITINERARY\"],\n    default: 3\n  },\n  {\n    name: \"intermediatePlaces\",\n    default: [],\n    routingTypes: [\"ITINERARY\"],\n    itineraryRewrite: places =>\n      Array.isArray(places) && places.length > 0\n        ? {\n            intermediatePlaces: places.map(place => formatPlace(place))\n          }\n        : undefined\n  },\n  {\n    // Time penalty in seconds the requester is willing to accept in order to\n    // complete journey on preferred route. I.e., number of seconds that we are\n    // willing to wait for the preferred route.\n    name: \"otherThanPreferredRoutesPenalty\",\n    default: 15 * 60, // 15 minutes\n    routingTypes: [\"ITINERARY\"]\n  },\n  // Below are less commonly used query params included so that in case they are\n  // passed in a query parameter they do not get filtered out from the ultimate\n  // API request.\n  {\n    name: \"preferredRoutes\",\n    routingTypes: [\"ITINERARY\"]\n  },\n  {\n    name: \"maxPreTransitTime\",\n    routingTypes: [\"ITINERARY\"]\n  },\n  {\n    name: \"waitReluctance\",\n    routingTypes: [\"ITINERARY\"]\n  },\n  {\n    name: \"driveDistanceReluctance\",\n    routingTypes: [\"ITINERARY\"]\n  },\n  {\n    name: \"driveTimeReluctance\",\n    routingTypes: [\"ITINERARY\"]\n  },\n  {\n    name: \"waitAtBeginningFactor\",\n    routingTypes: [\"ITINERARY\"]\n  },\n  {\n    name: \"bikeSwitchTime\",\n    routingTypes: [\"ITINERARY\"]\n  },\n  {\n    name: \"bikeSwitchCost\",\n    routingTypes: [\"ITINERARY\"]\n  },\n  {\n    name: \"minTransferTime\",\n    routingTypes: [\"ITINERARY\"]\n  },\n  {\n    name: \"preferredAgencies\",\n    routingTypes: [\"ITINERARY\"]\n  },\n  {\n    name: \"unpreferredRoutes\",\n    routingTypes: [\"ITINERARY\"]\n  },\n  {\n    name: \"unpreferredAgencies\",\n    routingTypes: [\"ITINERARY\"]\n  },\n  {\n    name: \"walkBoardCost\",\n    routingTypes: [\"ITINERARY\"]\n  },\n  {\n    name: \"bikeBoardCost\",\n    routingTypes: [\"ITINERARY\"]\n  },\n  {\n    name: \"whiteListedRoutes\",\n    routingTypes: [\"ITINERARY\"]\n  },\n  {\n    name: \"bannedAgencies\",\n    routingTypes: [\"ITINERARY\"]\n  },\n  {\n    name: \"whiteListedAgencies\",\n    routingTypes: [\"ITINERARY\"]\n  },\n  {\n    name: \"bannedTrips\",\n    routingTypes: [\"ITINERARY\"]\n  },\n  {\n    name: \"bannedStops\",\n    routingTypes: [\"ITINERARY\"]\n  },\n  {\n    name: \"bannedStopsHard\",\n    routingTypes: [\"ITINERARY\"]\n  },\n  {\n    name: \"transferPenalty\",\n    routingTypes: [\"ITINERARY\"]\n  },\n  {\n    name: \"nonpreferredTransferPenalty\",\n    routingTypes: [\"ITINERARY\"]\n  },\n  {\n    name: \"maxTransfers\",\n    routingTypes: [\"ITINERARY\"]\n  },\n  {\n    name: \"batch\",\n    routingTypes: [\"ITINERARY\"]\n  },\n  {\n    name: \"startTransitStopId\",\n    routingTypes: [\"ITINERARY\"]\n  },\n  {\n    name: \"startTransitTripId\",\n    routingTypes: [\"ITINERARY\"]\n  },\n  {\n    name: \"clampInitialWait\",\n    routingTypes: [\"ITINERARY\"]\n  },\n  {\n    name: \"reverseOptimizeOnTheFly\",\n    routingTypes: [\"ITINERARY\"]\n  },\n  {\n    name: \"boardSlack\",\n    routingTypes: [\"ITINERARY\"]\n  },\n  {\n    name: \"alightSlack\",\n    routingTypes: [\"ITINERARY\"]\n  },\n  {\n    name: \"locale\",\n    routingTypes: [\"ITINERARY\"]\n  },\n  {\n    name: \"disableRemainingWeightHeuristic\",\n    routingTypes: [\"ITINERARY\"]\n  },\n  {\n    name: \"flexFlagStopBufferSize\",\n    routingTypes: [\"ITINERARY\"]\n  },\n  {\n    name: \"flexUseReservationServices\",\n    routingTypes: [\"ITINERARY\"]\n  },\n  {\n    name: \"flexUseEligibilityServices\",\n    routingTypes: [\"ITINERARY\"]\n  },\n  {\n    name: \"flexIgnoreDrtAdvanceBookMin\",\n    routingTypes: [\"ITINERARY\"]\n  },\n  {\n    name: \"maxHours\",\n    routingTypes: [\"ITINERARY\"]\n  },\n  {\n    name: \"useRequestedDateTimeInMaxHours\",\n    routingTypes: [\"ITINERARY\"]\n  },\n  {\n    name: \"disableAlertFiltering\",\n    routingTypes: [\"ITINERARY\"]\n  },\n  {\n    name: \"geoidElevation\",\n    routingTypes: [\"ITINERARY\"]\n  },\n  {\n    name: \"invalidDateStrategy\",\n    routingTypes: [\"ITINERARY\"]\n  },\n  {\n    name: \"minTransitDistance\",\n    routingTypes: [\"ITINERARY\"]\n  },\n  {\n    name: \"searchTimeout\",\n    routingTypes: [\"ITINERARY\"]\n  },\n  {\n    name: \"pathComparator\",\n    routingTypes: [\"ITINERARY\"]\n  },\n  {\n    name: \"onlyTransitTrips\",\n    routingTypes: [\"ITINERARY\"]\n  },\n  {\n    name: \"minimumMicromobilitySpeed\",\n    routingTypes: [\"ITINERARY\"]\n  }\n];\n// Iterate over stored settings and update query param defaults.\n// FIXME: this does not get updated if the user defaults are cleared\nqueryParams.forEach(param => {\n  if (param.name in storedSettings) {\n    param.default = storedSettings[param.name];\n    param.userDefaultOverride = true;\n  }\n});\n\nexport default queryParams;\n\n/**\n * You can customize the queryParams labels and options, and labels and values for each option.\n * @param customizations The optional customizations to apply: an object whose fields\n *                       correspond to the items in queryParams with the corresponding name,\n *                       the value for those fields being an object which fields (label, options...)\n *                       will override the originals.\n *                       Example:\n *                         {\n *                           // Matches the name param\n *                           maxWalkDistance: {\n *                             // Any fields that should be overridden go here\n *                             options: [\n *                               // ...new options\n *                             ],\n *                             default: 500,\n *                             label: \"max walk dist\"\n *                           }\n *                         }\n * @returns A copy of the default queryParams that has the given customizations applied.\n *          If no customizations parameter is provided, returns the queryParams object itself.\n */\nexport function getCustomQueryParams(customizations) {\n  if (!customizations) return queryParams;\n\n  const clonedParams = cloneDeep(queryParams);\n  Object.keys(customizations).forEach(k => {\n    // Merge fields into the cloned object\n    const paramIndex = clonedParams.findIndex(param => param.name === k);\n    if (paramIndex !== -1) {\n      clonedParams[paramIndex] = {\n        ...clonedParams[paramIndex],\n        ...customizations[k]\n      };\n    }\n  });\n  return clonedParams;\n}\n"],"file":"query-params.js"}