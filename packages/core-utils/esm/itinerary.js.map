{"version":3,"sources":["../src/itinerary.ts"],"names":["polyline","turfAlong","transitModes","getTransitModes","config","modes","map","tm","mode","isTransit","includes","isReservationRequired","leg","boardRule","alightRule","isCoordinationRequired","isFlex","isAdvanceBookingRequired","info","latestBookingTime","daysPrior","legDropoffRequiresAdvanceBooking","dropOffBookingInfo","isRideshareLeg","rideHailingEstimate","provider","id","isWalk","isBicycle","isBicycleRent","isCar","startsWith","isMicromobility","isAccessMode","hasTransit","modesStr","split","some","hasCar","hasBike","hasMicromobility","hasHail","indexOf","hasRental","getMapColor","get","toSentenceCase","str","String","charAt","toUpperCase","substr","toLowerCase","getCompanyFromLeg","from","rentedBike","rentedCar","rentedVehicle","networks","rentalVehicle","network","getItineraryBounds","itinerary","coords","legs","forEach","legCoords","toGeoJSON","legGeometry","points","coordinates","c","getLegBounds","length","push","lat","lon","to","legLocationAtDistance","distance","line","pt","units","geometry","e","legElevationAtDistance","traversed","unshift","i","start","elevDistanceSpan","console","warn","pct","elevSpan","getElevationProfile","steps","unitConversion","minElev","maxElev","gain","loss","previous","step","elevation","elev","diff","second","first","convertedElevation","getTextWidth","text","font","canvas","document","createElement","context","getContext","metrics","measureText","width","getCompanyForNetwork","networkString","companies","company","find","co","getCompaniesLabelFromNetworks","filter","label","join","getTNCLocation","type","location","toFixed","calculatePhysicalActivity","walkDuration","bikeDuration","duration","caloriesBurned","calculateTncFares","reduce","maxTNCFare","minTNCFare","minPrice","maxPrice","currencyCode","currency","code","amount","CARBON_INTENSITY_DEFAULTS","walk","bicycle","car","tram","trolleybus","subway","rail","bus","ferry","cable_car","gondola","funicular","transit","leg_switch","airplane","micromobility","calculateEmissions","carbonIntensity","carbonIntensityWithDefaults","totalCarbon","total","getDisplayedStopId","placeOrStop","stopId","stopCode","getLegCost","mediumId","riderCategoryId","fareProducts","price","undefined","relevantFareProducts","product","riderCategory","medium","totalCostProduct","fp","name","transferFareProduct","transferAmount","productUseId","getItineraryCost","legCosts","cost","prev","cur","p","productUse","pickupDropoffTypeToOtp1","otp2Type","convertGraphQLResponseToLegacy","agencyBrandingUrl","agency","url","agencyId","agencyName","agencyUrl","dropoffType","pickupType","stop","gtfsId","route","shortName","routeColor","color","routeId","routeLongName","longName","routeShortName","routeTextColor","textColor","tripHeadsign","trip","tripId","getLegRouteShortName","getLegRouteLongName","getLegRouteName"],"mappings":"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","sourcesContent":["import polyline from \"@mapbox/polyline\";\nimport {\n  Company,\n  Config,\n  ElevationProfile,\n  FlexBookingInfo,\n  ItineraryOnlyLegsRequired,\n  LatLngArray,\n  Leg,\n  MassUnitOption,\n  Money,\n  Place,\n  Step,\n  Stop,\n  TncFare\n} from \"@opentripplanner/types\";\nimport turfAlong from \"@turf/along\";\n\n// All OTP transit modes\nexport const transitModes = [\n  \"TRAM\",\n  \"TROLLEYBUS\",\n  \"BUS\",\n  \"SUBWAY\",\n  \"FERRY\",\n  \"RAIL\",\n  \"GONDOLA\"\n];\n\n/**\n * @param  {config} config OTP-RR configuration object\n * @return {Array}  List of all transit modes defined in config; otherwise default mode list\n */\n\nexport function getTransitModes(config: Config): string[] {\n  if (!config || !config.modes || !config.modes.transitModes)\n    return transitModes;\n\n  return config.modes.transitModes.map(tm =>\n    typeof tm !== \"string\" ? tm.mode : tm\n  );\n}\n\nexport function isTransit(mode: string): boolean {\n  return transitModes.includes(mode) || mode === \"TRANSIT\";\n}\n\n/**\n * Returns true if the leg pickup rules enabled which require\n * calling ahead for the service to run. \"mustPhone\" is the only\n * property which encodes this info.\n */\nexport function isReservationRequired(leg: Leg): boolean {\n  return leg.boardRule === \"mustPhone\" || leg.alightRule === \"mustPhone\";\n}\n/**\n * Returns true if a user must ask the driver to let the user off\n * or if the user must flag the driver down for pickup.\n * \"coordinateWithDriver\" in board/alight rule encodes this info.\n */\nexport function isCoordinationRequired(leg: Leg): boolean {\n  return (\n    leg.boardRule === \"coordinateWithDriver\" ||\n    leg.alightRule === \"coordinateWithDriver\"\n  );\n}\n/**\n * The two rules checked by the above two functions are the only values\n * returned by OTP when a leg is a flex leg.\n */\nexport function isFlex(leg: Leg): boolean {\n  return isReservationRequired(leg) || isCoordinationRequired(leg);\n}\n\nexport function isAdvanceBookingRequired(info: FlexBookingInfo): boolean {\n  return info?.latestBookingTime?.daysPrior > 0;\n}\nexport function legDropoffRequiresAdvanceBooking(leg: Leg): boolean {\n  return isAdvanceBookingRequired(leg.dropOffBookingInfo);\n}\n\nexport function isRideshareLeg(leg: Leg): boolean {\n  return !!leg.rideHailingEstimate?.provider?.id;\n}\n\nexport function isWalk(mode: string): boolean {\n  if (!mode) return false;\n\n  return mode === \"WALK\";\n}\n\nexport function isBicycle(mode: string): boolean {\n  if (!mode) return false;\n\n  return mode === \"BICYCLE\";\n}\n\nexport function isBicycleRent(mode: string): boolean {\n  if (!mode) return false;\n\n  return mode === \"BICYCLE_RENT\";\n}\n\nexport function isCar(mode: string): boolean {\n  if (!mode) return false;\n  return mode.startsWith(\"CAR\");\n}\n\nexport function isMicromobility(mode: string): boolean {\n  if (!mode) return false;\n  return mode.startsWith(\"MICROMOBILITY\") || mode.startsWith(\"SCOOTER\");\n}\n\nexport function isAccessMode(mode: string): boolean {\n  return (\n    isWalk(mode) ||\n    isBicycle(mode) ||\n    isBicycleRent(mode) ||\n    isCar(mode) ||\n    isMicromobility(mode)\n  );\n}\n\n/**\n * @param  {string}  modesStr a comma-separated list of OTP modes\n * @return {boolean} whether any of the modes are transit modes\n */\nexport function hasTransit(modesStr: string): boolean {\n  return modesStr.split(\",\").some(mode => isTransit(mode));\n}\n\n/**\n * @param  {string}  modesStr a comma-separated list of OTP modes\n * @return {boolean} whether any of the modes are car-based modes\n */\nexport function hasCar(modesStr: string): boolean {\n  return modesStr.split(\",\").some(mode => isCar(mode));\n}\n\n/**\n * @param  {string}  modesStr a comma-separated list of OTP modes\n * @return {boolean} whether any of the modes are bicycle-based modes\n */\nexport function hasBike(modesStr: string): boolean {\n  return modesStr\n    .split(\",\")\n    .some(mode => isBicycle(mode) || isBicycleRent(mode));\n}\n\n/**\n * @param  {string}  modesStr a comma-separated list of OTP modes\n * @return {boolean} whether any of the modes are micromobility-based modes\n */\nexport function hasMicromobility(modesStr: string): boolean {\n  return modesStr.split(\",\").some(mode => isMicromobility(mode));\n}\n\n/**\n * @param  {string}  modesStr a comma-separated list of OTP modes\n * @return {boolean} whether any of the modes is a hailing mode\n */\nexport function hasHail(modesStr: string): boolean {\n  return modesStr.split(\",\").some(mode => mode.indexOf(\"_HAIL\") > -1);\n}\n\n/**\n * @param  {string}  modesStr a comma-separated list of OTP modes\n * @return {boolean} whether any of the modes is a rental mode\n */\nexport function hasRental(modesStr: string): boolean {\n  return modesStr.split(\",\").some(mode => mode.indexOf(\"_RENT\") > -1);\n}\n\nexport function getMapColor(mode: string): string {\n  mode = mode || this.get(\"mode\");\n  if (mode === \"WALK\") return \"#444\";\n  if (mode === \"BICYCLE\") return \"#0073e5\";\n  if (mode === \"SUBWAY\") return \"#e60000\";\n  if (mode === \"RAIL\") return \"#b00\";\n  if (mode === \"BUS\") return \"#080\";\n  if (mode === \"TROLLEYBUS\") return \"#080\";\n  if (mode === \"TRAM\") return \"#800\";\n  if (mode === \"FERRY\") return \"#008\";\n  if (mode === \"CAR\") return \"#444\";\n  if (mode === \"MICROMOBILITY\" || mode === \"SCOOTER\") return \"#f5a729\";\n  return \"#aaa\";\n}\n\nexport function toSentenceCase(str: string): string {\n  if (str == null) {\n    return \"\";\n  }\n  str = String(str);\n  return str.charAt(0).toUpperCase() + str.substr(1).toLowerCase();\n}\n\n/**\n * Derive the company string based on mode and network associated with leg.\n */\nexport function getCompanyFromLeg(leg: Leg): string {\n  if (!leg) return null;\n  const {\n    from,\n    mode,\n    rentedBike,\n    rentedCar,\n    rentedVehicle,\n    rideHailingEstimate\n  } = leg;\n  if (mode === \"CAR\" && rentedCar) {\n    return from.networks[0];\n  }\n  if (mode === \"CAR\" && rideHailingEstimate) {\n    return rideHailingEstimate.provider.id;\n  }\n  if (mode === \"BICYCLE\" && rentedBike && from.networks) {\n    return from.networks[0];\n  }\n  if (from.rentalVehicle) {\n    return from.rentalVehicle.network;\n  }\n  if (\n    (mode === \"MICROMOBILITY\" || mode === \"SCOOTER\") &&\n    rentedVehicle &&\n    from.networks\n  ) {\n    return from.networks[0];\n  }\n  return null;\n}\n\nexport function getItineraryBounds(\n  itinerary: ItineraryOnlyLegsRequired\n): LatLngArray[] {\n  let coords = [];\n  itinerary.legs.forEach(leg => {\n    const legCoords = polyline\n      .toGeoJSON(leg.legGeometry.points)\n      .coordinates.map((c: number[]) => [c[1], c[0]]);\n    coords = [...coords, ...legCoords];\n  });\n  return coords;\n}\n\n/**\n * Return a coords object that encloses the given leg's geometry.\n */\nexport function getLegBounds(leg: Leg): number[][] {\n  const coords = polyline\n    .toGeoJSON(leg.legGeometry.points)\n    .coordinates.map(c => [c[1], c[0]]);\n\n  // in certain cases, there might be zero-length coordinates in the leg\n  // geometry. In these cases, build us an array of coordinates using the from\n  // and to data of the leg.\n  if (coords.length === 0) {\n    coords.push([leg.from.lat, leg.from.lon], [leg.to.lat, leg.to.lon]);\n  }\n  return coords;\n}\n\n/* Returns an interpolated lat-lon at a specified distance along a leg */\n\nexport function legLocationAtDistance(leg: Leg, distance: number): number[] {\n  if (!leg.legGeometry) return null;\n\n  try {\n    const line = polyline.toGeoJSON(leg.legGeometry.points);\n    const pt = turfAlong(line, distance, { units: \"meters\" });\n    if (pt && pt.geometry && pt.geometry.coordinates) {\n      return [pt.geometry.coordinates[1], pt.geometry.coordinates[0]];\n    }\n  } catch (e) {\n    // FIXME handle error!\n  }\n\n  return null;\n}\n\n/* Returns an interpolated elevation at a specified distance along a leg */\n\nexport function legElevationAtDistance(\n  points: number[][],\n  distance: number\n): number {\n  // Iterate through the combined elevation profile\n  let traversed = 0;\n  // If first point distance is not zero, insert starting point at zero with\n  // null elevation. Encountering this value should trigger the warning below.\n  if (points[0][0] > 0) {\n    points.unshift([0, null]);\n  }\n  for (let i = 1; i < points.length; i++) {\n    const start = points[i - 1];\n    const elevDistanceSpan = points[i][0] - start[0];\n    if (distance >= traversed && distance <= traversed + elevDistanceSpan) {\n      // Distance falls within this point and the previous one;\n      // compute & return interpolated elevation value\n      if (start[1] === null) {\n        console.warn(\n          \"Elevation value does not exist for distance.\",\n          distance,\n          traversed\n        );\n        return null;\n      }\n      const pct = (distance - traversed) / elevDistanceSpan;\n      const elevSpan = points[i][1] - start[1];\n      return start[1] + elevSpan * pct;\n    }\n    traversed += elevDistanceSpan;\n  }\n  console.warn(\n    \"Elevation value does not exist for distance.\",\n    distance,\n    traversed\n  );\n  return null;\n}\n\n// Iterate through the steps, building the array of elevation points and\n// keeping track of the minimum and maximum elevations reached\nexport function getElevationProfile(\n  steps: Step[],\n  unitConversion = 1\n): ElevationProfile {\n  let minElev = 100000;\n  let maxElev = -100000;\n  let traversed = 0;\n  let gain = 0;\n  let loss = 0;\n  let previous = null;\n  const points = [];\n  steps.forEach(step => {\n    if (!step.elevation || step.elevation.length === 0) {\n      traversed += step.distance;\n      return;\n    }\n    for (let i = 0; i < step.elevation.length; i++) {\n      const elev = step.elevation[i];\n      if (previous) {\n        const diff = (elev.second - previous.second) * unitConversion;\n        if (diff > 0) gain += diff;\n        else loss += diff;\n      }\n      if (i === 0 && elev.first !== 0) {\n        // console.warn(`No elevation data available for step ${stepIndex}-${i} at beginning of segment`, elev)\n      }\n      const convertedElevation = elev.second * unitConversion;\n      if (convertedElevation < minElev) minElev = convertedElevation;\n      if (convertedElevation > maxElev) maxElev = convertedElevation;\n      points.push([traversed + elev.first, elev.second]);\n      // Insert \"filler\" point if the last point in elevation profile does not\n      // reach the full distance of the step.\n      if (i === step.elevation.length - 1 && elev.first !== step.distance) {\n        // points.push([traversed + step.distance, elev.second])\n      }\n      previous = elev;\n    }\n    traversed += step.distance;\n  });\n  return { maxElev, minElev, points, traversed, gain, loss };\n}\n\n/**\n * Uses canvas.measureText to compute and return the width of the given text of given font in pixels.\n *\n * @param {string} text The text to be rendered.\n * @param {string} font The css font descriptor that text is to be rendered with (e.g. \"bold 14px verdana\").\n *\n * @see https://stackoverflow.com/questions/118241/calculate-text-width-with-javascript/21015393#21015393\n */\nexport function getTextWidth(text: string, font = \"22px Arial\"): number {\n  // Create custom type for function including reused canvas object\n  type GetTextWidth = typeof getTextWidth & { canvas: HTMLCanvasElement };\n\n  // reuse canvas object for better performance\n  const canvas =\n    (getTextWidth as GetTextWidth).canvas ||\n    ((getTextWidth as GetTextWidth).canvas = document.createElement(\"canvas\"));\n  const context = canvas.getContext(\"2d\");\n  context.font = font;\n  const metrics = context.measureText(text);\n  return metrics.width;\n}\n\n/**\n * Get the configured company object for the given network string if the company\n * has been defined in the provided companies array config.\n */\nexport function getCompanyForNetwork(\n  networkString: string,\n  companies: Company[] = []\n): Company {\n  const company = companies.find(co => co.id === networkString);\n  if (!company) {\n    console.warn(\n      `No company found in config.yml that matches rented vehicle network: ${networkString}`,\n      companies\n    );\n  }\n  return company;\n}\n\n/**\n * Get a string label to display from a list of vehicle rental networks.\n *\n * @param  {Array<string>} networks  A list of network ids.\n * @param  {Array<object>}  [companies=[]] An optional list of the companies config.\n * @return {string}  A label for use in presentation on a website.\n */\nexport function getCompaniesLabelFromNetworks(\n  networks: string[],\n  companies: Company[] = []\n): string {\n  return networks\n    .map(network => getCompanyForNetwork(network, companies))\n    .filter(co => !!co)\n    .map(co => co.label)\n    .join(\"/\");\n}\n\nexport function getTNCLocation(leg: Leg, type: string): string {\n  const location = leg[type];\n  return `${location.lat.toFixed(5)},${location.lon.toFixed(5)}`;\n}\n\nexport function calculatePhysicalActivity(\n  itinerary: ItineraryOnlyLegsRequired\n): {\n  bikeDuration: number;\n  caloriesBurned: number;\n  walkDuration: number;\n} {\n  let walkDuration = 0;\n  let bikeDuration = 0;\n  itinerary.legs.forEach(leg => {\n    if (leg.mode.startsWith(\"WALK\")) walkDuration += leg.duration;\n    if (leg.mode.startsWith(\"BICYCLE\")) bikeDuration += leg.duration;\n  });\n  const caloriesBurned =\n    (walkDuration / 3600) * 280 + (bikeDuration / 3600) * 290;\n  return {\n    bikeDuration,\n    caloriesBurned,\n    walkDuration\n  };\n}\n\n/**\n * For an itinerary, calculates the TNC fares and returns an object with\n * these values and currency info.\n * It is assumed that the same currency is used for all TNC legs.\n */\nexport function calculateTncFares(\n  itinerary: ItineraryOnlyLegsRequired\n): TncFare {\n  return itinerary.legs\n    .filter(leg => leg.mode === \"CAR\" && leg.rideHailingEstimate)\n    .reduce(\n      ({ maxTNCFare, minTNCFare }, { rideHailingEstimate }) => {\n        const { minPrice, maxPrice } = rideHailingEstimate;\n        return {\n          // Assumes a single currency for entire itinerary.\n          currencyCode: minPrice.currency.code,\n          maxTNCFare: maxTNCFare + maxPrice.amount,\n          minTNCFare: minTNCFare + minPrice.amount\n        };\n      },\n      {\n        currencyCode: null,\n        maxTNCFare: 0,\n        minTNCFare: 0\n      }\n    );\n}\n\n/**\n * Sources:\n * - https://www.itf-oecd.org/sites/default/files/docs/environmental-performance-new-mobility.pdf\n * - https://www.thrustcarbon.com/insights/how-to-calculate-emissions-from-a-ferry-journey\n * - https://www.itf-oecd.org/sites/default/files/life-cycle-assessment-calculations-2020.xlsx\n * Other values extrapolated.\n */\nconst CARBON_INTENSITY_DEFAULTS = {\n  walk: 0.026,\n  bicycle: 0.017,\n  car: 0.162,\n  tram: 0.066,\n  trolleybus: 0.066,\n  subway: 0.066,\n  rail: 0.066,\n  bus: 0.09,\n  ferry: 0.082,\n  cable_car: 0.021,\n  gondola: 0.021,\n  funicular: 0.066,\n  transit: 0.066,\n  leg_switch: 0,\n  airplane: 0.382,\n  micromobility: 0.095\n};\n\n/**\n * @param {itinerary} itinerary OTP trip itinierary, only legs is required.\n * @param {carbonIntensity} carbonIntensity carbon intensity by mode in grams/meter\n * @param {units} units units to be used in return value\n * @return Amount of carbon in chosen unit\n */\nexport function calculateEmissions(\n  // This type makes all the properties from Itinerary optional except legs.\n  itinerary: ItineraryOnlyLegsRequired,\n  carbonIntensity: Record<string, number> = {},\n  units?: MassUnitOption\n): number {\n  // Apply defaults for any values that we don't have.\n  const carbonIntensityWithDefaults = {\n    ...CARBON_INTENSITY_DEFAULTS,\n    ...carbonIntensity\n  };\n\n  // Distance is in meters, totalCarbon is in grams\n  const totalCarbon =\n    itinerary?.legs?.reduce((total, leg) => {\n      return (\n        (leg.distance * carbonIntensityWithDefaults[leg.mode.toLowerCase()] ||\n          0) + total\n      );\n    }, 0) || 0;\n\n  switch (units) {\n    case \"ounce\":\n      return totalCarbon / 28.35;\n    case \"kilogram\":\n      return totalCarbon / 1000;\n    case \"pound\":\n      return totalCarbon / 454;\n    case \"gram\":\n    default:\n      return totalCarbon;\n  }\n}\n\n/**\n * Returns the user-facing stop id to display for a stop or place, using the following priority:\n * 1. stop code,\n * 2. stop id without the agency id portion, if stop id contains an agency portion,\n * 3. stop id, whether null or not (this is the fallback case).\n */\nexport function getDisplayedStopId(placeOrStop: Place | Stop): string {\n  let stopId;\n  let stopCode;\n  if (\"stopId\" in placeOrStop) {\n    ({ stopCode, stopId } = placeOrStop);\n  } else if (\"id\" in placeOrStop) {\n    ({ code: stopCode, id: stopId } = placeOrStop);\n  }\n  return stopCode || stopId?.split(\":\")[1] || stopId;\n}\n\n/**\n * Extracts useful data from the fare products on a leg, such as the leg cost and transfer info.\n * @param leg Leg with fare products (must have used getLegsWithFares)\n * @param category Rider category\n * @param container Fare container (cash, electronic)\n * @returns Object containing price as well as the transfer discount amount, if a transfer was used.\n */\nexport function getLegCost(\n  leg: Leg,\n  mediumId: string | null,\n  riderCategoryId: string | null\n): {\n  price?: Money;\n  transferAmount?: Money | undefined;\n  productUseId?: string;\n} {\n  if (!leg.fareProducts) return { price: undefined };\n  const relevantFareProducts = leg.fareProducts.filter(({ product }) => {\n    // riderCategory and medium can be specifically defined as null to handle\n    // generic GTFS based fares from OTP when there is no fare model\n    return (\n      (product.riderCategory === null ? null : product.riderCategory.id) ===\n        riderCategoryId &&\n      (product.medium === null ? null : product.medium.id) === mediumId\n    );\n  });\n\n  // Custom fare models return \"rideCost\", generic GTFS fares return \"regular\"\n  const totalCostProduct = relevantFareProducts.find(\n    fp => fp.product.name === \"rideCost\" || fp.product.name === \"regular\"\n  );\n  const transferFareProduct = relevantFareProducts.find(\n    fp => fp.product.name === \"transfer\"\n  );\n\n  return {\n    price: totalCostProduct?.product.price,\n    transferAmount: transferFareProduct?.product.price,\n    productUseId: totalCostProduct?.id\n  };\n}\n\n/**\n * Returns the total itinerary cost for a given set of legs.\n * @param legs Itinerary legs with fare products (must have used getLegsWithFares)\n * @param category Rider category (youth, regular, senior)\n * @param container Fare container (cash, electronic)\n * @returns Money object for the total itinerary cost.\n */\nexport function getItineraryCost(\n  legs: Leg[],\n  mediumId: string | null,\n  riderCategoryId: string | null\n): Money | undefined {\n  const legCosts = legs\n    // Only legs with fares (no walking legs)\n    .filter(leg => leg.fareProducts?.length > 0)\n    // Get the leg cost object of each leg\n    .map(leg => getLegCost(leg, mediumId, riderCategoryId))\n    .filter(cost => cost.price !== undefined)\n    // Filter out duplicate use IDs\n    // One fare product can be used on multiple legs,\n    // and we don't want to count it more than once.\n    .reduce<{ productUseId: string; price: Money }[]>((prev, cur) => {\n      if (!prev.some(p => p.productUseId === cur.productUseId)) {\n        prev.push({ productUseId: cur.productUseId, price: cur.price });\n      }\n      return prev;\n    }, [])\n    .map(productUse => productUse.price);\n\n  if (legCosts.length === 0) return undefined;\n  // Calculate the total\n  return legCosts.reduce<Money>(\n    (prev, cur) => ({\n      amount: prev.amount + cur?.amount || 0,\n      currency: prev.currency ?? cur?.currency\n    }),\n    { amount: 0, currency: null }\n  );\n}\n\nconst pickupDropoffTypeToOtp1 = otp2Type => {\n  switch (otp2Type) {\n    case \"COORDINATE_WITH_DRIVER\":\n      return \"coordinateWithDriver\";\n    case \"CALL_AGENCY\":\n      return \"mustPhone\";\n    case \"SCHEDULED\":\n      return \"scheduled\";\n    case \"NONE\":\n      return \"none\";\n    default:\n      return null;\n  }\n};\n\nexport const convertGraphQLResponseToLegacy = (leg: any): any => ({\n  ...leg,\n  agencyBrandingUrl: leg.agency?.url,\n  agencyId: leg.agency?.id,\n  agencyName: leg.agency?.name,\n  agencyUrl: leg.agency?.url,\n  alightRule: pickupDropoffTypeToOtp1(leg.dropoffType),\n  boardRule: pickupDropoffTypeToOtp1(leg.pickupType),\n  dropOffBookingInfo: {\n    latestBookingTime: leg.dropOffBookingInfo\n  },\n  from: {\n    ...leg.from,\n    stopCode: leg.from.stop?.code,\n    stopId: leg.from.stop?.gtfsId\n  },\n  route: leg.route?.shortName,\n  routeColor: leg.route?.color,\n  routeId: leg.route?.gtfsId,\n  routeLongName: leg.route?.longName,\n  routeShortName: leg.route?.shortName,\n  routeTextColor: leg.route?.textColor,\n  to: {\n    ...leg.to,\n    stopCode: leg.to.stop?.code,\n    stopId: leg.to.stop?.gtfsId\n  },\n  tripHeadsign: leg.trip?.tripHeadsign,\n  tripId: leg.trip?.gtfsId\n});\n\n/** Extracts the route number for a leg returned from OTP1 or OTP2. */\nexport const getLegRouteShortName = (\n  leg: Pick<Leg, \"route\" | \"routeShortName\">\n): string | null => {\n  const { route, routeShortName } = leg;\n  // typeof route === \"object\" denotes newer OTP2 responses. routeShortName and route as string is OTP1.\n  return typeof route === \"object\"\n    ? route?.shortName\n    : routeShortName || (route as string);\n};\n\n/** Extract the route long name for a leg returned from OTP1 or OTP2. */\nexport const getLegRouteLongName = (\n  leg: Pick<Leg, \"route\" | \"routeLongName\">\n): string | null => {\n  const { route, routeLongName } = leg;\n  // typeof route === \"object\" denotes newer OTP2 responses. routeLongName is OTP1.\n  return typeof route === \"object\" ? route?.longName : routeLongName;\n};\n\n/**\n * Returns the route short name, or the route long name if no short name is provided.\n * This is happens with Seattle area streetcars and ferries.\n */\nexport const getLegRouteName = (\n  leg: Pick<Leg, \"route\" | \"routeLongName\" | \"routeShortName\">\n): string => {\n  return getLegRouteShortName(leg) || getLegRouteLongName(leg);\n};\n"],"file":"itinerary.js"}