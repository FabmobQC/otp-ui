{"version":3,"sources":["../src/route-layers.ts"],"names":["polyline","drawArc","patternToRouteFeature","pattern","routes","route","find","r","route_id","concatenatedLines","stops","map","stop","geometry","filter","reduce","result","geom","index","coords","decode","shift","concat","routeName","route_short_name","route_long_name","routeNameUpper","length","toUpperCase","replace","properties","color","route_color","name","nameUpper","routeType","route_type","textColor","route_text_color","type","isFlex","stop_id","endsWith","straight","toGeoJSON","encode","getRouteLayerLayout","textField"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,kBAArB;AAIA,SAASC,OAAT,QAAwB,QAAxB;AAEA;AACA;AACA;;AACA,OAAO,SAASC,qBAAT,CACLC,OADK,EAELC,MAFK,EAGuD;AAAA;;AAC5D,MAAMC,KAAK,GAAGD,MAAM,CAACE,IAAP,CAAY,UAAAC,CAAC;AAAA,WAAIA,CAAC,CAACC,QAAF,KAAeL,OAAO,CAACK,QAA3B;AAAA,GAAb,CAAd,CAD4D,CAE5D;;AACA,MAAMC,iBAAiB,GAAGN,OAAO,CAACO,KAAR,CACvBC,GADuB,CACnB,UAAAC,IAAI;AAAA,WAAIA,IAAI,CAACC,QAAT;AAAA,GADe,EAEvBC,MAFuB,CAEhB,UAAAD,QAAQ;AAAA,WAAI,CAAC,CAACA,QAAN;AAAA,GAFQ,EAGvBE,MAHuB,CAGhB,UAACC,MAAD,EAASC,IAAT,EAAeC,KAAf,EAAyB;AAC/B,QAAMC,MAAM,GAAGnB,QAAQ,CAACoB,MAAT,CAAgBH,IAAhB,CAAf,CAD+B,CAE/B;AACA;;AACA,QAAIC,KAAK,KAAK,CAAd,EAAiBC,MAAM,CAACE,KAAP;AACjB,WAAOL,MAAM,CAACM,MAAP,CAAcH,MAAd,CAAP;AACD,GATuB,EASrB,EATqB,CAA1B;AAUA,MAAMI,SAAS,GAAGlB,KAAK,CAACmB,gBAAN,IAA0BnB,KAAK,CAACoB,eAAhC,IAAmD,EAArE,CAb4D,CAc5D;AACA;AACA;AACA;AACA;;AACA,MAAMC,cAAc,GAAG,CAACH,SAAS,CAACI,MAAV,GAAmB,CAAnB,GAAuB,KAAvB,GAA+BJ,SAAhC,EACpBK,WADoB,GAEpBC,OAFoB,CAEZ,KAFY,EAEL,GAFK,EAGpBA,OAHoB,CAGZ,wBAHY,EAGc,GAHd,CAAvB;AAKA,MAAMC,UAAU,GAAG;AACjBC,IAAAA,KAAK,aAAM1B,KAAK,CAAC2B,WAAN,IAAqB,QAA3B,CADY;AAEjBC,IAAAA,IAAI,EAAEV,SAFW;AAGjBW,IAAAA,SAAS,EAAER,cAHM;AAIjBS,IAAAA,SAAS,EAAE9B,KAAK,CAAC+B,UAJA;AAKjBC,IAAAA,SAAS,aAAMhC,KAAK,CAACiC,gBAAN,IAA0B,KAAhC,CALQ;AAMjBC,IAAAA,IAAI,EAAE;AANW,GAAnB;AASA,MAAMC,MAAM,4BAAGrC,OAAO,CAACO,KAAR,CAAcP,OAAO,CAACO,KAAR,CAAciB,MAAd,GAAuB,CAArC,EAAwCc,OAA3C,0DAAG,sBAAiDC,QAAjD,CACb,WADa,CAAf;AAGA,MAAMC,QAAQ,GAAG3C,QAAQ,CAAC4C,SAAT,CAAmB5C,QAAQ,CAAC6C,MAAT,CAAgBpC,iBAAhB,CAAnB,CAAjB;AAEA,SAAO;AACLI,IAAAA,QAAQ,EAAE2B,MAAM,GAAGvC,OAAO,CAAC0C,QAAD,CAAV,GAAuBA,QADlC;AAELb,IAAAA,UAAU,EAAVA,UAFK;AAGLS,IAAAA,IAAI,EAAE;AAHD,GAAP;AAKD;AAED;AACA;AACA;;AACA,OAAO,SAASO,mBAAT,CAA6BC,SAA7B,EAA8D;AACnE,SAAO;AACL,wBAAoB,aADf;AAEL,0BAAsB,IAFjB;AAGL,kBAAc,CAAC,KAAD,EAAQA,SAAR,CAHT;AAIL,6BAAyB,IAJpB;AAKL,+BAA2B,UALtB;AAML,iBAAa;AANR,GAAP;AAQD","sourcesContent":["import polyline from \"@mapbox/polyline\";\nimport { SymbolLayout } from \"mapbox-gl\";\nimport { TransitivePattern, TransitiveRoute } from \"@opentripplanner/types\";\n\nimport { drawArc } from \"./util\";\n\n/**\n * Create a labeled-line feature for the given transit route pattern.\n */\nexport function patternToRouteFeature(\n  pattern: TransitivePattern,\n  routes: TransitiveRoute[]\n): GeoJSON.Feature<GeoJSON.Geometry, Record<string, unknown>> {\n  const route = routes.find(r => r.route_id === pattern.route_id);\n  // Concatenate geometries (arrays of coordinates) to help maplibre spread out labels (not perfect).\n  const concatenatedLines = pattern.stops\n    .map(stop => stop.geometry)\n    .filter(geometry => !!geometry)\n    .reduce((result, geom, index) => {\n      const coords = polyline.decode(geom);\n      // Remove the first element (except for the first array) because it is a duplicate\n      // of the last element of the previous array.\n      if (index !== 0) coords.shift();\n      return result.concat(coords);\n    }, []);\n  const routeName = route.route_short_name || route.route_long_name || \"\";\n  // HACK: Create an uppercase version of the route name to paint the background, where\n  // - spaces are replaced with '!' (~same width as space)\n  // - \"+\", \"-\", certain letters and numbers are replaced with \"E\" to create a background with a uniform height and fill.\n  // Also, ensure there is a minimum background width (3 characters).\n  // Disclaimer: height of substitution characters can vary from font to font.\n  const routeNameUpper = (routeName.length < 3 ? \"EEE\" : routeName)\n    .toUpperCase()\n    .replace(/\\s/g, \"!\")\n    .replace(/[+-0124679FHJLPTVXYZ]/g, \"E\");\n\n  const properties = {\n    color: `#${route.route_color || \"000080\"}`,\n    name: routeName,\n    nameUpper: routeNameUpper,\n    routeType: route.route_type,\n    textColor: `#${route.route_text_color || \"eee\"}`,\n    type: \"route\"\n  };\n\n  const isFlex = pattern.stops[pattern.stops.length - 1].stop_id?.endsWith(\n    \"flexed_to\"\n  );\n  const straight = polyline.toGeoJSON(polyline.encode(concatenatedLines));\n\n  return {\n    geometry: isFlex ? drawArc(straight) : straight,\n    properties,\n    type: \"Feature\"\n  };\n}\n\n/**\n * Obtains common layout options for route label layers.\n */\nexport function getRouteLayerLayout(textField: string): SymbolLayout {\n  return {\n    \"symbol-placement\": \"line-center\",\n    \"text-allow-overlap\": true,\n    \"text-field\": [\"get\", textField],\n    \"text-ignore-placement\": true,\n    \"text-rotation-alignment\": \"viewport\",\n    \"text-size\": 16\n  };\n}\n"],"file":"route-layers.js"}