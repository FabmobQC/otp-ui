{"version":3,"sources":["../src/index.tsx"],"names":["util","React","useEffect","Layer","Source","useMap","polyline","bbox","getRouteLayerLayout","patternToRouteFeature","drawArc","getFromToAnchors","itineraryToTransitive","modeColorMap","CAR","BICYCLE","SCOOTER","MICROMOBILITY","MICROMOBILITY_RENT","WALK","defaultTextPaintParams","commonTextLayoutParams","defaultTextLayoutParams","defaultBoldTextLayoutParams","routeFilter","stopFilter","accessLegFilter","TransitiveCanvasOverlay","activeLeg","transitiveData","map","current","geojson","type","features","places","flatMap","place","properties","color","name","place_name","geometry","coordinates","place_lon","place_lat","journeys","journey","segments","filter","segment","streetEdges","length","geometries","edge","find","entry","edge_id","straight","toGeoJSON","points","mode","arc","patterns","p","pattern_id","pattern","stops","_","index","stopsArr","pStop","stop","stop_id","stop_name","stop_lon","stop_lat","routes","zoomToGeoJSON","geoJson","b","bounds","every","Number","isFinite","fitBounds","duration","padding","getFitBoundsPadding","legGeometry","fromAnchor","toAnchor"],"mappings":"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","sourcesContent":["import { SymbolLayout } from \"mapbox-gl\";\nimport { util } from \"@opentripplanner/base-map\";\nimport React, { useEffect } from \"react\";\nimport { Layer, Source, useMap } from \"react-map-gl\";\nimport polyline from \"@mapbox/polyline\";\nimport {\n  Leg,\n  TransitiveData,\n  TransitiveJourney,\n  TransitivePattern,\n  TransitivePlace\n} from \"@opentripplanner/types\";\nimport bbox from \"@turf/bbox\";\n\nimport { getRouteLayerLayout, patternToRouteFeature } from \"./route-layers\";\nimport { drawArc, getFromToAnchors, itineraryToTransitive } from \"./util\";\n\nexport { itineraryToTransitive };\n\n// TODO: BETTER COLORS\nconst modeColorMap = {\n  CAR: \"#888\",\n  BICYCLE: \"#f00\",\n  SCOOTER: \"#f5a729\",\n  MICROMOBILITY: \"#f5a729\",\n  MICROMOBILITY_RENT: \"#f5a729\",\n  WALK: \"#86cdf9\"\n};\n\n/**\n * Apply a thin, white halo around the (black) text.\n */\nconst defaultTextPaintParams = {\n  \"text-halo-blur\": 1,\n  \"text-halo-color\": \"#ffffff\",\n  \"text-halo-width\": 2\n};\n\n/**\n * Common text settings.\n */\nconst commonTextLayoutParams: SymbolLayout = {\n  \"symbol-placement\": \"point\",\n  \"text-allow-overlap\": false,\n  \"text-field\": [\"get\", \"name\"],\n  \"text-justify\": \"auto\",\n  \"text-radial-offset\": 1,\n  \"text-size\": 15\n};\n\n/**\n * Text size and layout that lets maplibre relocate text space permitting.\n */\nconst defaultTextLayoutParams: SymbolLayout = {\n  ...commonTextLayoutParams,\n  \"text-variable-anchor\": [\n    \"left\",\n    \"right\",\n    \"top\",\n    \"bottom\",\n    \"top-left\",\n    \"top-right\",\n    \"bottom-left\",\n    \"bottom-right\"\n  ]\n};\n\n/**\n * Default text + bold default fonts\n */\nconst defaultBoldTextLayoutParams = {\n  ...commonTextLayoutParams,\n  // FIXME: find a better way to set a bold font\n  \"text-font\": [\"Open Sans Bold\", \"Arial Unicode MS Bold\"],\n  \"text-overlap\": \"never\"\n};\n\nconst routeFilter = [\"==\", \"type\", \"route\"];\nconst stopFilter = [\"==\", \"type\", \"stop\"];\nconst accessLegFilter = [\n  \"match\",\n  [\"get\", \"type\"],\n  [\"BICYCLE\", \"SCOOTER\", \"MICROMOBILITY\", \"MICROMOBILITY_RENT\", \"CAR\"],\n  true,\n  false\n];\n\ntype Props = {\n  activeLeg?: Leg;\n  transitiveData?: TransitiveData;\n};\n\nconst TransitiveCanvasOverlay = ({\n  activeLeg,\n  transitiveData\n}: Props): JSX.Element => {\n  const { current: map } = useMap();\n\n  const geojson: GeoJSON.FeatureCollection<\n    GeoJSON.Geometry,\n    Record<string, unknown>\n  > = {\n    type: \"FeatureCollection\",\n    // @ts-expect-error TODO: fix the type above for geojson\n    features: transitiveData\n      ? [\n          ...(transitiveData.places || []).flatMap((place: TransitivePlace) => {\n            return {\n              type: \"Feature\",\n              properties: {\n                color: modeColorMap[place.type] || \"#008\",\n                name: place.place_name,\n                type: place.type || \"place\"\n              },\n              geometry: {\n                type: \"Point\",\n                coordinates: [place.place_lon, place.place_lat]\n              }\n            };\n          }),\n          ...(transitiveData.journeys || []).flatMap(\n            (journey: TransitiveJourney) =>\n              journey.segments\n                .filter(segment => segment.streetEdges?.length > 0)\n                .map(segment => ({\n                  ...segment,\n                  geometries: segment.streetEdges.map(edge => {\n                    return transitiveData.streetEdges.find(\n                      entry => entry.edge_id === edge\n                    );\n                  })\n                }))\n                .flatMap(segment => {\n                  return segment.geometries.map(geometry => {\n                    const straight = polyline.toGeoJSON(\n                      geometry.geometry.points\n                    );\n                    return {\n                      type: \"Feature\",\n                      properties: {\n                        type: \"street-edge\",\n                        color: modeColorMap[segment.type] || \"#008\",\n                        mode: segment.type\n                      },\n                      geometry: segment.arc ? drawArc(straight) : straight\n                    };\n                  });\n                })\n          ),\n          // Extract the first and last stops of each transit segment for display.\n          ...(transitiveData.journeys || [])\n            .flatMap(journey => journey.segments)\n            .filter(segment => segment.type === \"TRANSIT\")\n            .map(segment =>\n              transitiveData.patterns.find(\n                p => p.pattern_id === segment.patterns[0]?.pattern_id\n              )\n            )\n            .filter(pattern => !!pattern)\n            .flatMap(pattern =>\n              pattern.stops.filter(\n                (_, index, stopsArr) =>\n                  index === 0 || index === stopsArr.length - 1\n              )\n            )\n            .map(pStop =>\n              // pStop (from pattern.stops) only has an id (and sometimes line geometry)\n              transitiveData.stops.find(stop => stop.stop_id === pStop.stop_id)\n            )\n            .map(stop => ({\n              type: \"Feature\",\n              properties: { name: stop.stop_name, type: \"stop\" },\n              geometry: {\n                type: \"Point\",\n                coordinates: [stop.stop_lon, stop.stop_lat]\n              }\n            })),\n          ...(\n            transitiveData.patterns || []\n          ).flatMap((pattern: TransitivePattern) =>\n            patternToRouteFeature(pattern, transitiveData.routes)\n          )\n        ]\n      : []\n  };\n\n  const zoomToGeoJSON = geoJson => {\n    const b = bbox(geoJson);\n    const bounds: [number, number, number, number] = [b[0], b[1], b[2], b[3]];\n\n    if (map && bounds.length === 4 && bounds.every(Number.isFinite)) {\n      map.fitBounds(bounds, {\n        duration: 500,\n        padding: util.getFitBoundsPadding(map, 0.2)\n      });\n    }\n  };\n\n  useEffect(() => {\n    zoomToGeoJSON(geojson);\n  }, [transitiveData]);\n\n  useEffect(() => {\n    if (!activeLeg?.legGeometry) return;\n    zoomToGeoJSON(polyline.toGeoJSON(activeLeg.legGeometry.points));\n  }, [activeLeg]);\n\n  if (!transitiveData) return <></>;\n\n  const { fromAnchor, toAnchor } = getFromToAnchors(transitiveData);\n\n  // Generally speaking, text/symbol layers placed first will be rendered in a lower layer\n  // (or, if it is text, rendered with a lower priority or not at all if higher-priority text overlaps).\n  return (\n    <Source data={geojson} id=\"itinerary\" type=\"geojson\">\n      {/* First, render access legs then transit lines so that all lines appear under any text or circle\n          and transit lines appears above access legs. Walking legs are under a separate layer\n          because they use a different line dash that cannot be an expression. */}\n      <Layer\n        // This layer is for WALK modes - dotted path\n        filter={[\"all\", [\"==\", \"type\", \"street-edge\"], [\"==\", \"mode\", \"WALK\"]]}\n        id=\"street-edges-walk\"\n        layout={{\n          \"line-cap\": \"round\",\n          \"line-join\": \"round\"\n        }}\n        paint={{\n          // TODO: get from transitive properties\n          \"line-color\": [\"get\", \"color\"],\n          // First parameter of array is the length of the dash which is set to zero,\n          // so that maplibre simply adds the rounded ends to make things look like dots.\n          // Even so, note that maplibre still renders beans instead of dots\n          // (as if maplibre fuses dots together).\n          \"line-dasharray\": [0, 1.3],\n          \"line-opacity\": 0.9,\n          \"line-width\": 6\n        }}\n        type=\"line\"\n      />\n      <Layer\n        // This layer is for other modes - dashed path\n        filter={[\"all\", [\"==\", \"type\", \"street-edge\"], [\"!=\", \"mode\", \"WALK\"]]}\n        id=\"street-edges\"\n        layout={{\n          \"line-cap\": \"butt\"\n        }}\n        paint={{\n          // TODO: get from transitive properties\n          \"line-color\": [\"get\", \"color\"],\n          \"line-dasharray\": [2, 1],\n          // TODO: get from transitive properties\n          \"line-width\": 4,\n          \"line-opacity\": 0.9\n        }}\n        type=\"line\"\n      />\n      <Layer\n        filter={routeFilter}\n        id=\"routes\"\n        layout={{\n          \"line-join\": \"round\",\n          \"line-cap\": \"round\"\n        }}\n        paint={{\n          \"line-color\": [\"get\", \"color\"],\n          // Apply a thinner line (width = 6) for bus routes (route_type = 3), set width to 10 otherwise.\n          \"line-width\": [\"match\", [\"get\", \"routeType\"], 3, 6, 10],\n          \"line-opacity\": 1\n        }}\n        type=\"line\"\n      />\n\n      {/* Render access leg places then transit stops so that they appear sandwiched between text and lines,\n          with transit stops appearing above access leg places. */}\n      <Layer\n        filter={accessLegFilter}\n        id=\"access-leg-circles\"\n        paint={{\n          \"circle-color\": [\"get\", \"color\"],\n          \"circle-radius\": 8,\n          \"circle-stroke-color\": \"#fff\",\n          \"circle-stroke-width\": 3\n        }}\n        type=\"circle\"\n      />\n      <Layer\n        filter={stopFilter}\n        id=\"stops-circles\"\n        paint={{\n          \"circle-color\": \"#fff\",\n          \"circle-radius\": 7,\n          \"circle-stroke-width\": 3\n        }}\n        type=\"circle\"\n      />\n\n      {/* Render access leg places (lowest priority) then transit stop and route labels, then origin/destination (highest priority)\n          so the text appears above all graphics. */}\n      <Layer\n        filter={accessLegFilter}\n        id=\"access-leg-labels\"\n        layout={defaultTextLayoutParams}\n        paint={defaultTextPaintParams}\n        type=\"symbol\"\n      />\n      <Layer\n        filter={stopFilter}\n        id=\"stops-labels\"\n        layout={defaultTextLayoutParams}\n        paint={defaultTextPaintParams}\n        type=\"symbol\"\n      />\n      <Layer\n        // Render a solid background of fixed height using the uppercase route name.\n        filter={routeFilter}\n        id=\"routes-labels-background\"\n        layout={getRouteLayerLayout(\"nameUpper\")}\n        paint={{\n          \"text-color\": [\"get\", \"color\"],\n          \"text-halo-color\": [\"get\", \"color\"],\n          \"text-halo-width\": 4 // Max value is 1/4 of text size per maplibre docs.\n        }}\n        type=\"symbol\"\n      />\n      <Layer\n        // This layer renders transit route names (foreground).\n        filter={routeFilter}\n        id=\"routes-labels\"\n        layout={getRouteLayerLayout(\"name\")}\n        paint={{\n          \"text-color\": [\"get\", \"textColor\"]\n        }}\n        type=\"symbol\"\n      />\n      <Layer\n        filter={[\"==\", \"type\", \"from\"]}\n        id=\"from-label\"\n        layout={{\n          ...defaultBoldTextLayoutParams,\n          \"text-anchor\": fromAnchor\n        }}\n        paint={defaultTextPaintParams}\n        type=\"symbol\"\n      />\n      <Layer\n        filter={[\"==\", \"type\", \"to\"]}\n        id=\"to-label\"\n        layout={{\n          ...defaultBoldTextLayoutParams,\n          \"text-anchor\": toAnchor\n        }}\n        paint={{\n          ...defaultTextPaintParams,\n          \"text-color\": \"#910818\"\n        }}\n        type=\"symbol\"\n      />\n    </Source>\n  );\n};\n\nexport default TransitiveCanvasOverlay;\n"],"file":"index.js"}