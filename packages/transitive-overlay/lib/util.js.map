{"version":3,"sources":["../src/util.ts"],"names":["CAR_PARK_ITIN_PREFIX","stopToTransitive","stop","knownStopNames","normalizedStopName","name","trim","replace","normalizedStopNameKey","toLowerCase","stopNameExists","stop_id","stopId","stop_name","stop_lat","lat","stop_lon","lon","addStop","stops","makeFromToPlace","place","id","placeId","place_lat","place_lon","place_name","type","getFromToAnchors","transitiveData","fromPlace","places","find","pl","toPlace","direction","directionLat","directionLon","fromAnchor","toAnchor","getPlaceId","fromTo","streetEdgeId","leg","otherLeg","forcedVertexType","mode","bikeShareId","vertexType","legVertexType","makeStop","coordinate","itineraryToTransitive","itin","options","companies","getRouteLabel","disableFlexArc","intl","tdata","journeys","streetEdges","patterns","routes","patternId","journey","journey_id","journey_name","segments","newPlaces","newStops","push","legs","from","length","to","forEach","idx","toVertexType","fromVertexType","fromPlaceId","toPlaceId","addFromPlace","addToPlace","rentedBike","rentedVehicle","rentedCar","startsWith","segment","arc","place_id","edge_id","geometry","legGeometry","transitLeg","hasInterStopGeometry","interStopGeometry","hasLegGeometry","points","hasIntermediateStopGeometry","intermediateStops","legCoords","ptnId","pattern","pattern_id","pattern_name","route_id","routeId","fromStop","i","lastCoord","toStop","routeLabel","agency_id","agencyId","route_short_name","route_long_name","route_type","routeType","route_color","routeColor","route_text_color","routeTextColor","from_stop_index","to_stop_index","Object","values","drawArc","straight","coordinates","orig","dest","mp","center","steps"],"mappings":"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","sourcesContent":["import { Anchor } from \"mapbox-gl\";\n\nimport lineArc from \"@turf/line-arc\";\nimport lineDistance from \"@turf/line-distance\";\nimport midpoint from \"@turf/midpoint\";\nimport destination from \"@turf/destination\";\nimport bearing from \"@turf/bearing\";\nimport distance from \"@turf/distance\";\n\nimport {\n  getLegBounds,\n  getLegRouteLongName,\n  getLegRouteShortName,\n  isAccessMode,\n  isFlex,\n  isRideshareLeg,\n  isTransit\n} from \"@opentripplanner/core-utils/lib/itinerary\";\nimport { getPlaceName } from \"@opentripplanner/itinerary-body\";\nimport {\n  Company,\n  Itinerary,\n  Leg,\n  Place,\n  TransitiveData,\n  TransitivePlace,\n  TransitiveStop\n} from \"@opentripplanner/types\";\nimport { IntlShape } from \"react-intl\";\n\nconst CAR_PARK_ITIN_PREFIX = \"itin_car_\";\n\n/**\n * Helper function to convert a stop from an itinerary leg\n * to a TransitiveStop for rendering on the map.\n */\nfunction stopToTransitive(\n  stop: Place,\n  knownStopNames: Record<string, Place>\n): TransitiveStop {\n  // Collapse case and spaces for comparison.\n  // (\"Midtown Station\" and \"Midtown   STATION\" are considered the same name.)\n  const normalizedStopName = stop.name.trim().replace(/\\s+/g, \" \");\n  const normalizedStopNameKey = normalizedStopName.toLowerCase();\n  const stopNameExists = knownStopNames[normalizedStopNameKey];\n  if (!stopNameExists) knownStopNames[normalizedStopNameKey] = stop;\n  return {\n    stop_id: stop.stopId,\n    // Don't render this stop name if another one or similar exists.\n    stop_name: stopNameExists ? null : normalizedStopName,\n    stop_lat: stop.lat,\n    stop_lon: stop.lon\n  };\n}\n\n/**\n * Helper function to add a stop, checking whether a stop id and name has already been added.\n */\nfunction addStop(\n  stop: Place,\n  stops: Record<string, TransitiveStop>,\n  knownStopNames: Record<string, Place>\n) {\n  const { stopId } = stop;\n  if (!stops[stopId]) {\n    stops[stopId] = stopToTransitive(stop, knownStopNames);\n  }\n}\n\n/**\n * Helper function to add the origin and destination locations.\n */\nfunction makeFromToPlace(place: Place, id: \"from\" | \"to\"): TransitivePlace {\n  return {\n    placeId: id,\n    place_lat: place.lat,\n    place_lon: place.lon,\n    place_name: place.name,\n    type: id\n  };\n}\n\nexport function getFromToAnchors(\n  transitiveData: TransitiveData\n): {\n  fromAnchor?: Anchor;\n  toAnchor?: Anchor;\n} {\n  const fromPlace = transitiveData.places.find(pl => pl.placeId === \"from\");\n  const toPlace = transitiveData.places.find(pl => pl.placeId === \"to\");\n\n  // Compute general direction of travel to better position from/to markers.\n  let direction;\n  if (fromPlace && toPlace) {\n    const directionLat = fromPlace.place_lat < toPlace.place_lat ? \"N\" : \"S\";\n    const directionLon = fromPlace.place_lon < toPlace.place_lon ? \"E\" : \"W\";\n    direction = `${directionLat}${directionLon}`;\n  }\n  let fromAnchor;\n  let toAnchor;\n  switch (direction) {\n    case \"NE\":\n      fromAnchor = \"top-right\";\n      toAnchor = \"bottom-left\";\n      break;\n    case \"NW\":\n      fromAnchor = \"top-left\";\n      toAnchor = \"bottom-right\";\n      break;\n    case \"SE\":\n      fromAnchor = \"bottom-right\";\n      toAnchor = \"top-left\";\n      break;\n    case \"SW\":\n      fromAnchor = \"bottom-left\";\n      toAnchor = \"top-right\";\n      break;\n    default:\n  }\n  return {\n    fromAnchor,\n    toAnchor\n  };\n}\n\n/**\n * Builds a from/to place id string for the given leg.\n */\nfunction getPlaceId(\n  fromTo: \"from\" | \"to\",\n  streetEdgeId: string | number,\n  leg: Leg,\n  otherLeg?: Leg,\n  forcedVertexType?: string\n): string {\n  const { mode } = leg;\n  const { bikeShareId, name, vertexType: legVertexType } = leg[fromTo];\n  const vertexType = forcedVertexType || legVertexType;\n  let placeId: string;\n  if (bikeShareId) {\n    placeId = `bicycle_rent_station_${bikeShareId}`;\n    if (\n      // OTP2 Scooter case\n      mode === \"SCOOTER\"\n    ) {\n      placeId = `escooter_rent_station_${bikeShareId}`;\n    }\n  } else if (vertexType === \"VEHICLERENTAL\") {\n    // OTP1 Scooter case\n    placeId = `escooter_rent_station_${name}`;\n  } else if (mode === \"CAR\" && otherLeg?.mode === \"WALK\") {\n    // create a special place ID for car legs preceded/followed by walking legs\n    placeId = `${CAR_PARK_ITIN_PREFIX}${streetEdgeId}_${fromTo}`;\n  } else {\n    placeId = `itin_street_${streetEdgeId}_${fromTo}`;\n  }\n  return placeId;\n}\n\n/**\n * Helper function that overrides stop coordinates with those provided, if any.\n */\nfunction makeStop(stop: Place, coordinate?: number[]) {\n  return coordinate\n    ? {\n        ...stop,\n        lat: coordinate[0],\n        lon: coordinate[1]\n      }\n    : stop;\n}\n\n/**\n * Converts an OTP itinerary object to a transtive.js itinerary object.\n * @param {*} itin Required OTP itinerary (see @opentripplanner/core-utils/types#itineraryType) to convert.\n * @param {*} companies Optional list of companies, used for labeling vehicle rental locations.\n * @param {*} getRouteLabel Optional function that takes an itinerary leg (see @opentripplanner/core-utils/types#legType)\n *                          and returns a string representing the route label to display for that leg.\n * @returns An itinerary in the transitive.js format.\n */\nexport function itineraryToTransitive(\n  itin: Itinerary,\n  options: {\n    companies?: Company[];\n    getRouteLabel?: (leg: Leg) => string;\n    disableFlexArc?: boolean;\n    intl?: IntlShape;\n  }\n): TransitiveData {\n  const { companies, getRouteLabel, disableFlexArc, intl } = options;\n  const tdata = {\n    journeys: [],\n    streetEdges: [],\n    places: [],\n    patterns: [],\n    routes: [],\n    stops: []\n  };\n  const routes = {};\n  const knownStopNames = {};\n  let patternId = 0;\n\n  const journey = {\n    journey_id: \"itin\",\n    // This string is not shown in the UI\n    journey_name: \"Itinerary-derived Journey\",\n    segments: []\n  };\n\n  const newPlaces = [];\n  const newStops = {};\n\n  newPlaces.push(makeFromToPlace(itin.legs[0].from, \"from\"));\n  newPlaces.push(makeFromToPlace(itin.legs[itin.legs.length - 1].to, \"to\"));\n\n  itin.legs.forEach((leg, idx) => {\n    // OTP2 puts \"BIKESHARE\" as the vertexType for scooter share legs.\n    // Here we fix that by looking ahead at the next leg to find out if it is a scooter.\n    const toVertexType =\n      itin.legs[idx + 1]?.mode === \"SCOOTER\"\n        ? \"VEHICLERENTAL\"\n        : leg.to.vertexType;\n    const fromVertexType =\n      leg.mode === \"SCOOTER\" ? \"VEHICLERENTAL\" : leg.from.vertexType;\n    const streetEdgeId = idx;\n\n    // Show on the map the labels for:\n    // - all transit stops for legs with valid geometry (where to get on and get off, including transfer points)\n    // - locations of rental bike/scoooter pickup, including floating vehicles\n    // - location for dropping off rental vehicles that should be docked\n    // - park-and-ride facilities (with a lower display priority than transit stations)\n    // - origin/destination, but with a lower display priority than anything above\n    //   (i.e. the labels will not be drawn if other text is already rendered there).\n\n    if (isAccessMode(leg.mode)) {\n      const fromPlaceId = getPlaceId(\n        \"from\",\n        streetEdgeId,\n        leg,\n        idx > 0 ? itin.legs[idx - 1] : null\n      );\n      const toPlaceId = getPlaceId(\n        \"to\",\n        streetEdgeId,\n        leg,\n        idx < itin.legs.length - 1 ? itin.legs[idx + 1] : null,\n        toVertexType\n      );\n      let addFromPlace = false;\n      let addToPlace = false;\n      if (leg.rentedBike || leg.rentedVehicle || leg.rentedCar) {\n        addFromPlace = true;\n\n        // Only add the \"to\" portion of rental legs if they involve docking a vehicle on arrival\n        // (this is to avoid https://github.com/conveyal/trimet-mod-otp/issues/152).\n        if (leg.to.vertexType !== \"NORMAL\") {\n          addToPlace = true;\n        }\n      }\n\n      // Add a place and label for park-and-ride facilities in driving legs.\n      // Park-and-ride facilities are hinted by car (not TNC, so don't use isCar()) legs followed by walk legs.\n      if (leg.mode === \"CAR\") {\n        if (fromPlaceId.startsWith(CAR_PARK_ITIN_PREFIX)) {\n          addFromPlace = true;\n        }\n        if (toPlaceId.startsWith(CAR_PARK_ITIN_PREFIX)) {\n          addToPlace = true;\n        }\n      }\n\n      if (addFromPlace) {\n        newPlaces.push({\n          placeId: fromPlaceId,\n          place_name: getPlaceName(\n            { ...leg.from, vertexType: fromVertexType },\n            companies || [],\n            intl\n          ),\n          place_lat: leg.from.lat,\n          place_lon: leg.from.lon,\n          type: leg.mode\n        });\n      }\n      if (addToPlace) {\n        newPlaces.push({\n          placeId: toPlaceId,\n          place_name: getPlaceName(\n            // replace the vertex type since we tweaked it above\n            { ...leg.to, vertexType: toVertexType },\n            companies || [],\n            intl\n          ),\n          place_lat: leg.to.lat,\n          place_lon: leg.to.lon,\n          type: leg.mode\n        });\n      }\n\n      const segment = {\n        arc: leg.mode === \"CAR\" && isRideshareLeg(leg),\n        type: leg.mode,\n        streetEdges: [streetEdgeId],\n        from: { type: \"PLACE\", place_id: fromPlaceId },\n        to: { type: \"PLACE\", place_id: toPlaceId }\n      };\n      journey.segments.push(segment);\n\n      tdata.streetEdges.push({\n        edge_id: streetEdgeId,\n        geometry: leg.legGeometry\n      });\n    }\n\n    if (leg.transitLeg || isTransit(leg.mode)) {\n      // Flex routes sometimes have the same from and to IDs, but\n      // these stops still need to be rendered separately!\n      if (isFlex(leg)) {\n        leg.to.stopId = `${leg.to.stopId}_flexed_to`;\n      }\n\n      // determine if we have valid inter-stop geometry\n      const hasInterStopGeometry = !!leg.interStopGeometry;\n      const hasLegGeometry = !!leg.legGeometry?.points;\n      const hasIntermediateStopGeometry =\n        hasInterStopGeometry &&\n        leg.intermediateStops &&\n        leg.interStopGeometry.length === leg.intermediateStops.length + 1;\n\n      // Coordinates of the leg geometry, used to draw the stop marker on the line,\n      // otherwise the logical stop is often times off the line.\n      const legCoords = getLegBounds(leg);\n\n      // create leg-specific pattern\n      const ptnId = `ptn_${patternId}`;\n      const pattern = {\n        pattern_id: ptnId,\n        // This string is not shown in the UI\n        pattern_name: `Pattern ${patternId}`,\n        route_id: leg.routeId,\n        stops: []\n      };\n\n      // Add the \"from\" end of transit legs to the list of stops.\n      const fromStop = makeStop(leg.from, hasLegGeometry && legCoords[0]);\n      addStop(fromStop, newStops, knownStopNames);\n      pattern.stops.push({ stop_id: leg.from.stopId });\n\n      // add intermediate stops to stops dictionary and pattern object\n      // If there is no intermediateStopGeometry, do not add the intermediate stops\n      // as it will be straight lines instead of the nice legGeometry (but only if\n      // the legGeometry exists).\n      if (\n        leg.intermediateStops &&\n        (hasIntermediateStopGeometry || !hasLegGeometry)\n      ) {\n        leg.intermediateStops.forEach((stop, i) => {\n          // FIXME: line up the coordinates of the stops so they appear on the line.\n          addStop(stop, newStops, knownStopNames);\n          pattern.stops.push({\n            stop_id: stop.stopId,\n            geometry:\n              hasIntermediateStopGeometry && leg.interStopGeometry[i].points\n          });\n        });\n      }\n\n      // Add the \"to\" end of transit legs to the list of stops.\n      // (Do not label stop names if they repeat.)\n      const lastCoord = hasLegGeometry && legCoords[legCoords.length - 1];\n      const toStop = makeStop(leg.to, lastCoord);\n      addStop(toStop, newStops, knownStopNames);\n      pattern.stops.push({\n        stop_id: leg.to.stopId,\n        geometry:\n          // Some legs don't have intermediateStopGeometry, but do have valid legGeometry\n          (hasInterStopGeometry || hasLegGeometry) &&\n          (hasIntermediateStopGeometry\n            ? leg.interStopGeometry[leg.interStopGeometry.length - 1].points\n            : leg.legGeometry.points)\n      });\n\n      // add route to the route dictionary\n      // with a custom route label if specified.\n      const routeLabel =\n        typeof getRouteLabel === \"function\"\n          ? getRouteLabel(leg)\n          : getLegRouteShortName(leg);\n      routes[leg.routeId] = {\n        agency_id: leg.agencyId,\n        route_id: leg.routeId,\n        route_short_name: routeLabel || \"\",\n        route_long_name: getLegRouteLongName(leg) || \"\",\n        route_type: leg.routeType,\n        route_color: leg.routeColor,\n        route_text_color: leg.routeTextColor\n      };\n\n      // add the pattern to the tdata patterns array\n      tdata.patterns.push(pattern);\n\n      // add the pattern reference to the journey object\n      journey.segments.push({\n        arc:\n          typeof disableFlexArc === \"undefined\" ? isFlex(leg) : !disableFlexArc,\n        type: \"TRANSIT\",\n        patterns: [\n          {\n            pattern_id: ptnId,\n            from_stop_index: 0,\n            to_stop_index: hasIntermediateStopGeometry\n              ? leg.intermediateStops.length + 2 - 1\n              : 1\n          }\n        ]\n      });\n\n      patternId++;\n    }\n  });\n\n  // add the routes and stops to the tdata arrays\n  tdata.routes = Object.values(routes);\n  tdata.stops = Object.values(newStops);\n\n  // add the journey to the tdata journeys array\n  tdata.journeys.push(journey);\n  tdata.places = newPlaces;\n\n  // console.log(\"derived tdata\", tdata);\n  return tdata;\n}\n\n// typescript TODO: TYPE\nconst drawArc = (straight: any) => {\n  // Create clone of plain route that only includes first and last point\n  straight.coordinates = [\n    straight.coordinates[0],\n    straight.coordinates[straight.coordinates.length - 1]\n  ];\n\n  const orig = straight.coordinates[0];\n  const dest = straight.coordinates[1];\n  // Adapted from https://github.com/Turfjs/turf/issues/1218#issuecomment-592421977\n  const length = lineDistance(straight, \"kilometers\");\n  const mp = midpoint(orig, dest);\n  const center = destination(mp, length, bearing(orig, dest) - 90);\n\n  return lineArc(\n    center,\n    distance(center, orig),\n    bearing(center, dest),\n    bearing(center, orig),\n    { steps: 500 }\n  ).geometry;\n};\n\nexport { drawArc };\nexport default { itineraryToTransitive };\n"],"file":"util.js"}