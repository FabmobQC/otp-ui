{"version":3,"sources":["../src/index.tsx"],"names":["modeColorMap","CAR","BICYCLE","SCOOTER","MICROMOBILITY","MICROMOBILITY_RENT","WALK","defaultTextPaintParams","commonTextLayoutParams","defaultTextLayoutParams","defaultBoldTextLayoutParams","routeFilter","stopFilter","accessLegFilter","TransitiveCanvasOverlay","activeLeg","transitiveData","current","map","geojson","type","features","places","flatMap","place","properties","color","name","place_name","geometry","coordinates","place_lon","place_lat","journeys","journey","segments","filter","segment","streetEdges","length","geometries","edge","find","entry","edge_id","straight","polyline","toGeoJSON","points","mode","arc","patterns","p","pattern_id","pattern","stops","_","index","stopsArr","pStop","stop","stop_id","stop_name","stop_lon","stop_lat","routes","zoomToGeoJSON","geoJson","b","bounds","every","Number","isFinite","fitBounds","duration","padding","util","getFitBoundsPadding","legGeometry","fromAnchor","toAnchor"],"mappings":"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","sourcesContent":["import { SymbolLayout } from \"mapbox-gl\";\nimport { util } from \"@opentripplanner/base-map\";\nimport React, { useEffect } from \"react\";\nimport { Layer, Source, useMap } from \"react-map-gl\";\nimport polyline from \"@mapbox/polyline\";\nimport {\n  Leg,\n  TransitiveData,\n  TransitiveJourney,\n  TransitivePattern,\n  TransitivePlace\n} from \"@opentripplanner/types\";\nimport bbox from \"@turf/bbox\";\n\nimport { getRouteLayerLayout, patternToRouteFeature } from \"./route-layers\";\nimport { drawArc, getFromToAnchors, itineraryToTransitive } from \"./util\";\n\nexport { itineraryToTransitive };\n\n// TODO: BETTER COLORS\nconst modeColorMap = {\n  CAR: \"#888\",\n  BICYCLE: \"#f00\",\n  SCOOTER: \"#f5a729\",\n  MICROMOBILITY: \"#f5a729\",\n  MICROMOBILITY_RENT: \"#f5a729\",\n  WALK: \"#86cdf9\"\n};\n\n/**\n * Apply a thin, white halo around the (black) text.\n */\nconst defaultTextPaintParams = {\n  \"text-halo-blur\": 1,\n  \"text-halo-color\": \"#ffffff\",\n  \"text-halo-width\": 2\n};\n\n/**\n * Common text settings.\n */\nconst commonTextLayoutParams: SymbolLayout = {\n  \"symbol-placement\": \"point\",\n  \"text-allow-overlap\": false,\n  \"text-field\": [\"get\", \"name\"],\n  \"text-justify\": \"auto\",\n  \"text-radial-offset\": 1,\n  \"text-size\": 15\n};\n\n/**\n * Text size and layout that lets maplibre relocate text space permitting.\n */\nconst defaultTextLayoutParams: SymbolLayout = {\n  ...commonTextLayoutParams,\n  \"text-variable-anchor\": [\n    \"left\",\n    \"right\",\n    \"top\",\n    \"bottom\",\n    \"top-left\",\n    \"top-right\",\n    \"bottom-left\",\n    \"bottom-right\"\n  ]\n};\n\n/**\n * Default text + bold default fonts\n */\nconst defaultBoldTextLayoutParams = {\n  ...commonTextLayoutParams,\n  // FIXME: find a better way to set a bold font\n  \"text-font\": [\"Open Sans Bold\", \"Arial Unicode MS Bold\"],\n  \"text-overlap\": \"never\"\n};\n\nconst routeFilter = [\"==\", \"type\", \"route\"];\nconst stopFilter = [\"==\", \"type\", \"stop\"];\nconst accessLegFilter = [\n  \"match\",\n  [\"get\", \"type\"],\n  [\"BICYCLE\", \"SCOOTER\", \"MICROMOBILITY\", \"MICROMOBILITY_RENT\", \"CAR\"],\n  true,\n  false\n];\n\ntype Props = {\n  activeLeg?: Leg;\n  transitiveData?: TransitiveData;\n};\n\nconst TransitiveCanvasOverlay = ({\n  activeLeg,\n  transitiveData\n}: Props): JSX.Element => {\n  const { current: map } = useMap();\n\n  const geojson: GeoJSON.FeatureCollection<\n    GeoJSON.Geometry,\n    Record<string, unknown>\n  > = {\n    type: \"FeatureCollection\",\n    // @ts-expect-error TODO: fix the type above for geojson\n    features: transitiveData\n      ? [\n          ...(transitiveData.places || []).flatMap((place: TransitivePlace) => {\n            return {\n              type: \"Feature\",\n              properties: {\n                color: modeColorMap[place.type] || \"#008\",\n                name: place.place_name,\n                type: place.type || \"place\"\n              },\n              geometry: {\n                type: \"Point\",\n                coordinates: [place.place_lon, place.place_lat]\n              }\n            };\n          }),\n          ...(transitiveData.journeys || []).flatMap(\n            (journey: TransitiveJourney) =>\n              journey.segments\n                .filter(segment => segment.streetEdges?.length > 0)\n                .map(segment => ({\n                  ...segment,\n                  geometries: segment.streetEdges.map(edge => {\n                    return transitiveData.streetEdges.find(\n                      entry => entry.edge_id === edge\n                    );\n                  })\n                }))\n                .flatMap(segment => {\n                  return segment.geometries.map(geometry => {\n                    const straight = polyline.toGeoJSON(\n                      geometry.geometry.points\n                    );\n                    return {\n                      type: \"Feature\",\n                      properties: {\n                        type: \"street-edge\",\n                        color: modeColorMap[segment.type] || \"#008\",\n                        mode: segment.type\n                      },\n                      geometry: segment.arc ? drawArc(straight) : straight\n                    };\n                  });\n                })\n          ),\n          // Extract the first and last stops of each transit segment for display.\n          ...(transitiveData.journeys || [])\n            .flatMap(journey => journey.segments)\n            .filter(segment => segment.type === \"TRANSIT\")\n            .map(segment =>\n              transitiveData.patterns.find(\n                p => p.pattern_id === segment.patterns[0]?.pattern_id\n              )\n            )\n            .filter(pattern => !!pattern)\n            .flatMap(pattern =>\n              pattern.stops.filter(\n                (_, index, stopsArr) =>\n                  index === 0 || index === stopsArr.length - 1\n              )\n            )\n            .map(pStop =>\n              // pStop (from pattern.stops) only has an id (and sometimes line geometry)\n              transitiveData.stops.find(stop => stop.stop_id === pStop.stop_id)\n            )\n            .map(stop => ({\n              type: \"Feature\",\n              properties: { name: stop.stop_name, type: \"stop\" },\n              geometry: {\n                type: \"Point\",\n                coordinates: [stop.stop_lon, stop.stop_lat]\n              }\n            })),\n          ...(\n            transitiveData.patterns || []\n          ).flatMap((pattern: TransitivePattern) =>\n            patternToRouteFeature(pattern, transitiveData.routes)\n          )\n        ]\n      : []\n  };\n\n  const zoomToGeoJSON = geoJson => {\n    const b = bbox(geoJson);\n    const bounds: [number, number, number, number] = [b[0], b[1], b[2], b[3]];\n\n    if (map && bounds.length === 4 && bounds.every(Number.isFinite)) {\n      map.fitBounds(bounds, {\n        duration: 500,\n        padding: util.getFitBoundsPadding(map, 0.2)\n      });\n    }\n  };\n\n  useEffect(() => {\n    zoomToGeoJSON(geojson);\n  }, [transitiveData]);\n\n  useEffect(() => {\n    if (!activeLeg?.legGeometry) return;\n    zoomToGeoJSON(polyline.toGeoJSON(activeLeg.legGeometry.points));\n  }, [activeLeg]);\n\n  if (!transitiveData) return <></>;\n\n  const { fromAnchor, toAnchor } = getFromToAnchors(transitiveData);\n\n  // Generally speaking, text/symbol layers placed first will be rendered in a lower layer\n  // (or, if it is text, rendered with a lower priority or not at all if higher-priority text overlaps).\n  return (\n    <Source data={geojson} id=\"itinerary\" type=\"geojson\">\n      {/* First, render access legs then transit lines so that all lines appear under any text or circle\n          and transit lines appears above access legs. Walking legs are under a separate layer\n          because they use a different line dash that cannot be an expression. */}\n      <Layer\n        // This layer is for WALK modes - dotted path\n        filter={[\"all\", [\"==\", \"type\", \"street-edge\"], [\"==\", \"mode\", \"WALK\"]]}\n        id=\"street-edges-walk\"\n        layout={{\n          \"line-cap\": \"round\",\n          \"line-join\": \"round\"\n        }}\n        paint={{\n          // TODO: get from transitive properties\n          \"line-color\": [\"get\", \"color\"],\n          // First parameter of array is the length of the dash which is set to zero,\n          // so that maplibre simply adds the rounded ends to make things look like dots.\n          // Even so, note that maplibre still renders beans instead of dots\n          // (as if maplibre fuses dots together).\n          \"line-dasharray\": [0, 1.3],\n          \"line-opacity\": 0.9,\n          \"line-width\": 6\n        }}\n        type=\"line\"\n      />\n      <Layer\n        // This layer is for other modes - dashed path\n        filter={[\"all\", [\"==\", \"type\", \"street-edge\"], [\"!=\", \"mode\", \"WALK\"]]}\n        id=\"street-edges\"\n        layout={{\n          \"line-cap\": \"butt\"\n        }}\n        paint={{\n          // TODO: get from transitive properties\n          \"line-color\": [\"get\", \"color\"],\n          \"line-dasharray\": [2, 1],\n          // TODO: get from transitive properties\n          \"line-width\": 4,\n          \"line-opacity\": 0.9\n        }}\n        type=\"line\"\n      />\n      <Layer\n        filter={routeFilter}\n        id=\"routes\"\n        layout={{\n          \"line-join\": \"round\",\n          \"line-cap\": \"round\"\n        }}\n        paint={{\n          \"line-color\": [\"get\", \"color\"],\n          // Apply a thinner line (width = 6) for bus routes (route_type = 3), set width to 10 otherwise.\n          \"line-width\": [\"match\", [\"get\", \"routeType\"], 3, 6, 10],\n          \"line-opacity\": 1\n        }}\n        type=\"line\"\n      />\n\n      {/* Render access leg places then transit stops so that they appear sandwiched between text and lines,\n          with transit stops appearing above access leg places. */}\n      <Layer\n        filter={accessLegFilter}\n        id=\"access-leg-circles\"\n        paint={{\n          \"circle-color\": [\"get\", \"color\"],\n          \"circle-radius\": 8,\n          \"circle-stroke-color\": \"#fff\",\n          \"circle-stroke-width\": 3\n        }}\n        type=\"circle\"\n      />\n      <Layer\n        filter={stopFilter}\n        id=\"stops-circles\"\n        paint={{\n          \"circle-color\": \"#fff\",\n          \"circle-radius\": 7,\n          \"circle-stroke-width\": 3\n        }}\n        type=\"circle\"\n      />\n\n      {/* Render access leg places (lowest priority) then transit stop and route labels, then origin/destination (highest priority)\n          so the text appears above all graphics. */}\n      <Layer\n        filter={accessLegFilter}\n        id=\"access-leg-labels\"\n        layout={defaultTextLayoutParams}\n        paint={defaultTextPaintParams}\n        type=\"symbol\"\n      />\n      <Layer\n        filter={stopFilter}\n        id=\"stops-labels\"\n        layout={defaultTextLayoutParams}\n        paint={defaultTextPaintParams}\n        type=\"symbol\"\n      />\n      <Layer\n        // Render a solid background of fixed height using the uppercase route name.\n        filter={routeFilter}\n        id=\"routes-labels-background\"\n        layout={getRouteLayerLayout(\"nameUpper\")}\n        paint={{\n          \"text-color\": [\"get\", \"color\"],\n          \"text-halo-color\": [\"get\", \"color\"],\n          \"text-halo-width\": 4 // Max value is 1/4 of text size per maplibre docs.\n        }}\n        type=\"symbol\"\n      />\n      <Layer\n        // This layer renders transit route names (foreground).\n        filter={routeFilter}\n        id=\"routes-labels\"\n        layout={getRouteLayerLayout(\"name\")}\n        paint={{\n          \"text-color\": [\"get\", \"textColor\"]\n        }}\n        type=\"symbol\"\n      />\n      <Layer\n        filter={[\"==\", \"type\", \"from\"]}\n        id=\"from-label\"\n        layout={{\n          ...defaultBoldTextLayoutParams,\n          \"text-anchor\": fromAnchor\n        }}\n        paint={defaultTextPaintParams}\n        type=\"symbol\"\n      />\n      <Layer\n        filter={[\"==\", \"type\", \"to\"]}\n        id=\"to-label\"\n        layout={{\n          ...defaultBoldTextLayoutParams,\n          \"text-anchor\": toAnchor\n        }}\n        paint={{\n          ...defaultTextPaintParams,\n          \"text-color\": \"#910818\"\n        }}\n        type=\"symbol\"\n      />\n    </Source>\n  );\n};\n\nexport default TransitiveCanvasOverlay;\n"],"file":"index.js"}