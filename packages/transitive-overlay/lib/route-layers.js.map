{"version":3,"sources":["../src/route-layers.ts"],"names":["patternToRouteFeature","pattern","routes","route","find","r","route_id","concatenatedLines","stops","map","stop","geometry","filter","reduce","result","geom","index","coords","polyline","decode","shift","concat","routeName","route_short_name","route_long_name","routeNameUpper","length","toUpperCase","replace","properties","color","route_color","name","nameUpper","routeType","route_type","textColor","route_text_color","type","isFlex","stop_id","endsWith","straight","toGeoJSON","encode","getRouteLayerLayout","textField"],"mappings":";;;;;;;;;;AAAA;;AAIA;;AAEA;AACA;AACA;AACO,SAASA,qBAAT,CACLC,OADK,EAELC,MAFK,EAGuD;AAAA;;AAC5D,QAAMC,KAAK,GAAGD,MAAM,CAACE,IAAP,CAAYC,CAAC,IAAIA,CAAC,CAACC,QAAF,KAAeL,OAAO,CAACK,QAAxC,CAAd,CAD4D,CAE5D;;AACA,QAAMC,iBAAiB,GAAGN,OAAO,CAACO,KAAR,CACvBC,GADuB,CACnBC,IAAI,IAAIA,IAAI,CAACC,QADM,EAEvBC,MAFuB,CAEhBD,QAAQ,IAAI,CAAC,CAACA,QAFE,EAGvBE,MAHuB,CAGhB,CAACC,MAAD,EAASC,IAAT,EAAeC,KAAf,KAAyB;AAC/B,UAAMC,MAAM,GAAGC,kBAASC,MAAT,CAAgBJ,IAAhB,CAAf,CAD+B,CAE/B;AACA;;;AACA,QAAIC,KAAK,KAAK,CAAd,EAAiBC,MAAM,CAACG,KAAP;AACjB,WAAON,MAAM,CAACO,MAAP,CAAcJ,MAAd,CAAP;AACD,GATuB,EASrB,EATqB,CAA1B;AAUA,QAAMK,SAAS,GAAGnB,KAAK,CAACoB,gBAAN,IAA0BpB,KAAK,CAACqB,eAAhC,IAAmD,EAArE,CAb4D,CAc5D;AACA;AACA;AACA;AACA;;AACA,QAAMC,cAAc,GAAG,CAACH,SAAS,CAACI,MAAV,GAAmB,CAAnB,GAAuB,KAAvB,GAA+BJ,SAAhC,EACpBK,WADoB,GAEpBC,OAFoB,CAEZ,KAFY,EAEL,GAFK,EAGpBA,OAHoB,CAGZ,wBAHY,EAGc,GAHd,CAAvB;AAKA,QAAMC,UAAU,GAAG;AACjBC,IAAAA,KAAK,EAAG,IAAG3B,KAAK,CAAC4B,WAAN,IAAqB,QAAS,EADxB;AAEjBC,IAAAA,IAAI,EAAEV,SAFW;AAGjBW,IAAAA,SAAS,EAAER,cAHM;AAIjBS,IAAAA,SAAS,EAAE/B,KAAK,CAACgC,UAJA;AAKjBC,IAAAA,SAAS,EAAG,IAAGjC,KAAK,CAACkC,gBAAN,IAA0B,KAAM,EAL9B;AAMjBC,IAAAA,IAAI,EAAE;AANW,GAAnB;AASA,QAAMC,MAAM,4BAAGtC,OAAO,CAACO,KAAR,CAAcP,OAAO,CAACO,KAAR,CAAckB,MAAd,GAAuB,CAArC,EAAwCc,OAA3C,0DAAG,sBAAiDC,QAAjD,CACb,WADa,CAAf;;AAGA,QAAMC,QAAQ,GAAGxB,kBAASyB,SAAT,CAAmBzB,kBAAS0B,MAAT,CAAgBrC,iBAAhB,CAAnB,CAAjB;;AAEA,SAAO;AACLI,IAAAA,QAAQ,EAAE4B,MAAM,GAAG,mBAAQG,QAAR,CAAH,GAAuBA,QADlC;AAELb,IAAAA,UAFK;AAGLS,IAAAA,IAAI,EAAE;AAHD,GAAP;AAKD;AAED;AACA;AACA;;;AACO,SAASO,mBAAT,CAA6BC,SAA7B,EAA8D;AACnE,SAAO;AACL,wBAAoB,aADf;AAEL,0BAAsB,IAFjB;AAGL,kBAAc,CAAC,KAAD,EAAQA,SAAR,CAHT;AAIL,6BAAyB,IAJpB;AAKL,+BAA2B,UALtB;AAML,iBAAa;AANR,GAAP;AAQD","sourcesContent":["import polyline from \"@mapbox/polyline\";\nimport { SymbolLayout } from \"mapbox-gl\";\nimport { TransitivePattern, TransitiveRoute } from \"@opentripplanner/types\";\n\nimport { drawArc } from \"./util\";\n\n/**\n * Create a labeled-line feature for the given transit route pattern.\n */\nexport function patternToRouteFeature(\n  pattern: TransitivePattern,\n  routes: TransitiveRoute[]\n): GeoJSON.Feature<GeoJSON.Geometry, Record<string, unknown>> {\n  const route = routes.find(r => r.route_id === pattern.route_id);\n  // Concatenate geometries (arrays of coordinates) to help maplibre spread out labels (not perfect).\n  const concatenatedLines = pattern.stops\n    .map(stop => stop.geometry)\n    .filter(geometry => !!geometry)\n    .reduce((result, geom, index) => {\n      const coords = polyline.decode(geom);\n      // Remove the first element (except for the first array) because it is a duplicate\n      // of the last element of the previous array.\n      if (index !== 0) coords.shift();\n      return result.concat(coords);\n    }, []);\n  const routeName = route.route_short_name || route.route_long_name || \"\";\n  // HACK: Create an uppercase version of the route name to paint the background, where\n  // - spaces are replaced with '!' (~same width as space)\n  // - \"+\", \"-\", certain letters and numbers are replaced with \"E\" to create a background with a uniform height and fill.\n  // Also, ensure there is a minimum background width (3 characters).\n  // Disclaimer: height of substitution characters can vary from font to font.\n  const routeNameUpper = (routeName.length < 3 ? \"EEE\" : routeName)\n    .toUpperCase()\n    .replace(/\\s/g, \"!\")\n    .replace(/[+-0124679FHJLPTVXYZ]/g, \"E\");\n\n  const properties = {\n    color: `#${route.route_color || \"000080\"}`,\n    name: routeName,\n    nameUpper: routeNameUpper,\n    routeType: route.route_type,\n    textColor: `#${route.route_text_color || \"eee\"}`,\n    type: \"route\"\n  };\n\n  const isFlex = pattern.stops[pattern.stops.length - 1].stop_id?.endsWith(\n    \"flexed_to\"\n  );\n  const straight = polyline.toGeoJSON(polyline.encode(concatenatedLines));\n\n  return {\n    geometry: isFlex ? drawArc(straight) : straight,\n    properties,\n    type: \"Feature\"\n  };\n}\n\n/**\n * Obtains common layout options for route label layers.\n */\nexport function getRouteLayerLayout(textField: string): SymbolLayout {\n  return {\n    \"symbol-placement\": \"line-center\",\n    \"text-allow-overlap\": true,\n    \"text-field\": [\"get\", textField],\n    \"text-ignore-placement\": true,\n    \"text-rotation-alignment\": \"viewport\",\n    \"text-size\": 16\n  };\n}\n"],"file":"route-layers.js"}