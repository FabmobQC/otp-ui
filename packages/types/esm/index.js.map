{"version":3,"sources":["../src/index.ts"],"names":["ModeSettingTypes","CHECKBOX","DROPDOWN","SLIDER"],"mappings":"AAAA;AACA;AACA;AACA;;AAQA;AACA;AACA;;AAaA;AACA;AACA;AACA;;AAYA;AACA;AACA;;AAYA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AA8BA;AACA;AACA;;AAuCA;AACA;AACA;AACA;AACA;;AAoEA;AACA;AACA;AACA;AACA;;AAeA;AACA;AACA;;AAgCA;AACA;AACA;AACA;AACA;;AAWA;;AAKA;;AAKA;;AAWA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;AAgFA;AACA;AACA;;AASA;AACA;AACA;AACA;AACA;;AAmBA;AACA;AACA;AACA;;AAaA;AACA;AACA;;AAuBA;AACA;AACA;;AAGA;AACA;AACA;;AAOA;AACA;AACA;AACA;;AAmHA;AACA;AACA;AACA;AACA;;AA4BA;AACA;AACA;;AAMA;AACA;AACA;;AAMA;AACA;AACA;;AAKA;AACA;AACA;;AAOA;AACA;AACA;;AAuBA;AACA;AACA;AACA;AAMA,OAAO,IAAMA,gBAAgB,GAAG;AAC9BC,EAAAA,QAAQ,EAAE,UADoB;AAE9BC,EAAAA,QAAQ,EAAE,UAFoB;AAG9BC,EAAAA,MAAM,EAAE;AAHsB,CAAzB","sourcesContent":["/**\n * This file contains type definitions for types\n * used across more than one package in this repo.\n */\n\nimport React, { FunctionComponent, ReactElement } from \"react\";\nimport { StyledIcon } from \"@styled-icons/styled-icon\";\nimport { ConfiguredModes } from \"./deprecated\";\n\ntype ZeroOrOne = 0 | 1;\n\n/**\n * Shape for a transportation company.\n */\nexport type Company = {\n  id: string;\n  label: string;\n  /** a comma-separated string listing the modes that this company has */\n  modes: string;\n  /**\n   * tells OTP UI to ignore the API provided station names\n   * and instead use generic ones.\n   */\n  overridePlaceNames?: boolean;\n};\n\n/**\n * Describes some options to help display data about a transit agency that is\n * configured in an opentripplanner instance.\n */\nexport type TransitOperator = {\n  agencyId: string;\n  defaultRouteColor?: string;\n  defaultRouteTextColor?: string;\n  feedId: string;\n  logo?: string;\n  longNameSplitter?: string;\n  name?: string;\n  order?: number;\n};\n\n/**\n * Describes a map entity to be rendered.\n */\nexport type LayerEntity = {\n  id: string;\n  lat: number;\n  lon: number;\n};\n\nexport type SymbolComponentBaseProps = {\n  entity: LayerEntity;\n  zoom: number;\n};\n\n/**\n * The symbol-representing component to draw; with the signature\n * ({ entity: object; zoom: number }) => Element\n * where entity must have an id attribute and contain coordinates information for placement on the map.\n */\nexport type SymbolComponent = React.ComponentType<SymbolComponentBaseProps>;\n\n/**\n * Defines which symbol to render based on a zoom level; and optionally by entity type.\n * (Only one symbol is rendered for any zoom level.)\n */\nexport type ZoomBasedSymbol = {\n  /**\n   * A function with the signature (entity: object) => string\n   * that determines the type of an entity.\n   * symbolByType and getType must be either be both specified or both omitted.\n   */\n  getType?: (entity: LayerEntity) => string;\n  /**\n   * The zoom level beginning at which the marker is drawn;\n   * unless another marker with a higher minZoom is met.\n   */\n  minZoom: number;\n  /**\n   * The symbol-representing component to draw; with the signature\n   * ({ entity: object; zoom: number }) => Element\n   * where entity must have an id attribute and contain coordinates information for placement on the map.\n   */\n  symbol: SymbolComponent;\n  /**\n   * The symbol-representing component to draw for each entity type;\n   * with the same signature as symbol. If a type returned by getType() is not listed;\n   * then the component defined in the 'symbol' attribute will be rendered by default.\n   * symbolByType and getType must be either be both specified or both omitted.\n   */\n  symbolByType?: {\n    [name: string]: SymbolComponent;\n  };\n};\n\n/**\n * Describes the objects from the real-time vehicle service.\n */\nexport type TransitVehicle = {\n  routeShortName?: string;\n  routeLongName?: string;\n  routeType?: string;\n  routeColor?: string;\n\n  status?: string;\n  reportDate?: string;\n  seconds?: number;\n\n  stopSequence?: number;\n  stopId?: string;\n  vehicleId?: string;\n  tripId?: string;\n  blockId?: string;\n\n  lat?: number;\n  lon?: number;\n  heading?: number;\n};\n\nexport type OTPTransitVehicle = TransitVehicle & {\n  label?: string;\n  nextStopName?: string;\n  speed?: number;\n  stopStatus?: string; // TODO: Make enum\n};\n\nexport type VehicleRentalMapOverlaySymbol =\n  | {\n      dockStrokeColor?: string;\n      fillColor?: string;\n      minZoom: number;\n      pixels?: number;\n      type: string;\n    }\n  | ZoomBasedSymbol;\n\n/**\n * Represents the expected configuration of the webapp.\n *\n * Note: this is an incomplete type mapping.\n */\nexport type Config = {\n  companies?: Company[];\n  dateTime: {\n    timeFormat?: string;\n    dateFormat?: string;\n    /** @deprecated */\n    longDateFormat?: string;\n  };\n  homeTimezone: string;\n  /** @deprecated */\n  modes?: ConfiguredModes;\n  // TODO: add full typing\n  map?: {\n    overlays?: {\n      /**\n       * The applicable companies this overlay covers. Only applicable in\n       * certain vehicle rental overlays.\n       */\n      companies?: string[];\n      name: string;\n      /**\n       * The applicable map symbols. Only applicable in vehicle rental\n       * overlays.\n       */\n      mapSymbols?: VehicleRentalMapOverlaySymbol[];\n      /**\n       * Only used during park and ride queries. This will filter out P&Rs\n       * that are further than the specified number of meters from a transit\n       * stop.\n       */\n      maxTransitDistance?: number;\n      /**\n       * The applicable modes this overlay covers. Only applicable in certain\n       * vehicle rental overlays.\n       */\n      modes?: string[];\n      /**\n       * The type of overlay. Currently valid values include:\n       *\n       * \"bike-rental\"; \"car-rental\"; \"micromobility-rental\"; \"park-and-ride\";\n       * \"stops\"; \"tile\"\n       */\n      type: string;\n    }[];\n  };\n  transitOperators?: TransitOperator[];\n};\n\nexport type EncodedPolyline = {\n  length: number;\n  points: string;\n};\n\nexport type ElevationData = {\n  first: number;\n  second: number;\n}[];\n\nexport type Alert = {\n  alertHeaderText?: string;\n  alertDescriptionText?: string;\n  alertUrl?: string;\n  effectiveStartDate?: number;\n  /** Returned by OTP2 graphql queries, but not by OTP1 */\n  id?: string;\n};\n\n/**\n * Represents steps in a leg in an itinerary of an OTP plan response. These are\n * only for non-transit modes.\n * See documentation here: http://otp-docs.ibi-transit.com/api/json_WalkStep.html\n */\nexport type Step = {\n  absoluteDirection?: string;\n  alerts?: Alert[];\n  area: boolean;\n  bogusName: boolean;\n  distance: number;\n  elevation: ElevationData;\n  lat: number;\n  lon: number;\n  relativeDirection: string;\n  stayOn: boolean;\n  streetName: string;\n};\n\n/**\n * Describe an origin, destination, or intermediate location in an itinerary.\n */\nexport type Place = {\n  address?: string;\n  arrival?: number;\n  bikeShareId?: string;\n  departure?: number;\n  lat: number;\n  lon: number;\n  name: string;\n  networks?: string[];\n  rentalVehicle?: { network: string };\n  stop?: Stop;\n  /**\n   * @deprecated Only for OTP1 support, removal is immenent\n   */\n  stopCode?: string;\n  /**\n   * @deprecated Only for OTP1 support, removal is immenent\n   */\n  stopId?: string;\n  /**\n   * @deprecated Only for OTP1 support, removal is immenent\n   */\n  stopIndex?: number;\n  /**\n   * @deprecated Only for OTP1 support, removal is immenent\n   */\n  stopSequence?: number;\n  vertexType: string;\n  zoneId?: string;\n};\n\n/**\n * Holds contact info and lead time for flex transit bookings.\n * The information is optional and is for reminding the end-user\n * of any advance reservations required prior to travel.\n */\nexport type FlexBookingInfo = {\n  contactInfo?: {\n    phoneNumber: string;\n  };\n  latestBookingTime?: {\n    daysPrior: number;\n  };\n  message?: string;\n};\n\n/** Dropoff-specific flex booking information */\ntype FlexDropOffBookingInfo = {\n  dropOffMessage?: string;\n} & FlexBookingInfo;\n\n/** Pickup-specific flex booking information */\ntype FlexPickupBookingInfo = {\n  pickupMessage?: string;\n} & FlexBookingInfo;\n\n/** Basic transit route attributes */\ninterface BasicRouteInfo {\n  color?: string;\n  id: string;\n  longName?: string;\n  shortName: string;\n  textColor?: string;\n  // TS TODO: route type enum\n  type?: number;\n}\n\n/** Transit route attributes from itinerary legs */\nexport type LegRoute = BasicRouteInfo & {\n  alerts?: Alert[];\n};\n\n/**\n * Represents a leg in an itinerary of an OTP plan response. Each leg represents\n * a portion of the overall itinerary that is done until either reaching the\n * destination or transitioning to another mode of travel. See OTP webservice\n * documentation here:\n * http://otp-docs.ibi-transit.com/api/json_Leg.html\n */\nexport type Leg = {\n  accessibilityScore?: number;\n  agencyBrandingUrl?: string;\n  agencyId?: string;\n  agencyName?: string;\n  agencyTimeZoneOffset: number;\n  agencyUrl?: string;\n  alerts?: Alert[];\n  boardRule?: string;\n  alightRule?: string;\n  arrivalDelay: number;\n  averageWait?: number;\n  departureDelay: number;\n  distance: number;\n  dropOffBookingInfo?: FlexDropOffBookingInfo;\n  duration: number;\n  endTime: number;\n  fareProducts?: { id: string; product: FareProduct }[];\n  from: Place;\n  headsign?: string;\n  interlineWithPreviousLeg: boolean;\n  intermediateStops: Place[];\n  interStopGeometry?: EncodedPolyline[];\n  legGeometry: EncodedPolyline;\n  mode: string;\n  pathway: boolean;\n  pickupBookingInfo?: FlexPickupBookingInfo;\n  rideHailingEstimate?: {\n    provider: {\n      id: string;\n    };\n    arrival: string;\n    minPrice: TemporaryTNCPriceType;\n    maxPrice: TemporaryTNCPriceType;\n    productName?: string;\n  };\n  realTime: boolean;\n  rentedBike: boolean;\n  rentedCar: boolean;\n  rentedVehicle: boolean;\n  route?: string | LegRoute;\n  routeColor?: string;\n  routeId?: string;\n  routeLongName?: string;\n  routeShortName?: string;\n  routeTextColor?: string;\n  routeType?: number;\n  serviceDate?: string;\n  startTime: number | string;\n  steps: Step[];\n  to: Place;\n  transitLeg: boolean;\n  trip?: {\n    arrivalStoptime?: TripStopTime;\n    departureStoptime?: TripStopTime;\n    gtfsId?: string;\n    id: string;\n    tripHeadsign?: string;\n  };\n  tripBlockId?: string;\n  tripId?: string;\n  walkingBike?: boolean;\n};\n\ntype TripStopTime = {\n  stopPosition: number;\n  stop: {\n    gtfsId: string;\n    id: string;\n  };\n};\n\ntype TemporaryTNCPriceType = {\n  currency: {\n    code: string;\n  };\n  amount: number;\n};\n\n/**\n * Describes the cost of an itinerary leg.\n */\nexport type Money = {\n  amount: number;\n  currency: {\n    code: string;\n    digits: number;\n  };\n};\n\n/**\n * Represents an itinerary of an OTP plan response. See detailed documentation\n * in OTP webservice documentation here:\n * http://otp-docs.ibi-transit.com/api/json_Itinerary.html\n */\nexport type Itinerary = {\n  co2?: number;\n  co2VsBaseline?: number;\n  duration: number;\n  elevationGained: number;\n  elevationLost: number;\n  endTime: number;\n  legs: Leg[];\n  startTime: number;\n  tooSloped?: boolean;\n  transfers: number;\n  transitTime: number;\n  waitingTime: number;\n  walkDistance: number;\n  walkLimitExceeded: boolean;\n  walkTime: number;\n};\n\n/**\n * In many places all we need from the Itinerary is the legs,\n * this type makes all the other types optional except legs.\n */\nexport type ItineraryOnlyLegsRequired = Partial<Itinerary> &\n  Pick<Itinerary, \"legs\">;\n\nexport type ElevationProfile = {\n  maxElev: number;\n  minElev: number;\n  points: number[];\n  traversed: number;\n  gain: number;\n  loss: number;\n};\n\n/**\n * Used to model a location that is used in planning a trip.\n */\nexport type Location = {\n  lat: number;\n  lon: number;\n  name?: string;\n  /**\n   * This is only used location that a user has saved. Can be either:\n   * One of: 'home', 'work', 'stop' or 'recent'\n   */\n  type?: \"home\" | \"work\" | \"stop\" | \"recent\" | string;\n  category?: string;\n\n  /**\n   * This represents the last time that this location was selected in a\n   * search\n   */\n  timestamp?: number;\n\n  /* Sometimes used for displaying subinfo */\n  main?: string;\n  secondary?: string;\n};\n\n/**\n * Alias for a commonly used basic type\n */\nexport type LatLngArray = [number, number];\n\n/**\n * Describes a transit stop entity to be rendered on the map.\n */\nexport type StopLayerStop = LayerEntity & {\n  name: string;\n};\n\nexport type StopEventHandler = (stop: Stop | { stopId: string }) => void;\n\n/**\n * This models data about a stop and it's associated routes that is obtained\n * from a transit index API.\n */\nexport type Stop = {\n  /**\n   * The stop code if the stop has one\n   */\n  code?: string;\n  color?: string;\n  dist?: number;\n  geometries?: { geoJson?: GeoJSON.Polygon };\n  gtfsId: string;\n  id: string;\n  lat?: number;\n  lon?: number;\n  name: string;\n  routes?: Route[];\n};\n\nexport type Agency = {\n  id: string;\n  name?: string;\n  url?: string;\n  timezone?: string;\n  lang?: string;\n  phone?: string;\n  fareUrl?: string;\n};\nexport type Route = BasicRouteInfo & {\n  agency: Agency;\n  agencyId?: string | number;\n  agencyName?: string | number;\n  // TODO: Add support for enum values, see /packages/core-utils/src/otpSchema.json#L1289.\n  bikesAllowed?: ZeroOrOne;\n  eligibilityRestricted?: ZeroOrOne;\n  mode?: string;\n  routeBikesAllowed?: ZeroOrOne;\n  sortOrder: number;\n  sortOrderSet: boolean;\n};\n\nexport type TransitivePlace = {\n  place_lat?: number;\n  place_lon?: number;\n  place_name?: string;\n  placeId?: string;\n  type: string;\n};\nexport type TransitiveJourney = {\n  journey_id: string;\n  journey_name: string;\n  segments: {\n    arc?: boolean;\n    from: TransitivePlace;\n    patterns?: {\n      pattern_id: string;\n      from_stop_index: number;\n      to_stop_index: number;\n    }[];\n    streetEdges: number[];\n    to: TransitivePlace;\n    type: string;\n  }[];\n};\nexport type TransitivePattern = {\n  pattern_id: string;\n  pattern_name: string;\n  route_id: string;\n  stops: {\n    geometry?: string;\n    stop_id: string;\n  }[];\n};\nexport type TransitiveRoute = {\n  agency_id: string;\n  route_color?: string;\n  route_id: string;\n  route_long_name: string;\n  route_short_name: string;\n  route_text_color?: string;\n  route_type: number;\n};\nexport type TransitiveStop = {\n  stop_id: string;\n  stop_name: string;\n  stop_lat: number;\n  stop_lon: number;\n};\n\nexport type TransitiveStreetEdge = {\n  edge_id: number;\n  geometry: EncodedPolyline;\n};\n\nexport type TransitiveData = {\n  journeys: TransitiveJourney[];\n  patterns: TransitivePattern[];\n  places: TransitivePlace[];\n  routes: TransitiveRoute[];\n  stops: TransitiveStop[];\n  streetEdges: TransitiveStreetEdge[];\n};\n\nexport type Station = {\n  bikesAvailable?: number;\n  id: string;\n  isFloatingBike?: boolean;\n  isFloatingCar?: boolean;\n  isFloatingVehicle?: boolean;\n  name?: string;\n  networks: string[];\n  spacesAvailable?: number;\n  // TS TODO coordinate type\n  x: number;\n  y: number;\n};\n\n/**\n * Depending on the geocoder that is used, more properties than just the `label`\n * property might be provided by the geocoder. For example, with the Pelias\n * geocoder, properties such as `id`, `layer`, `source` are also included.\n */\nexport type GeocodedFeature = {\n  geometry: {\n    coordinates: LatLngArray;\n    type: string;\n  };\n  properties: {\n    label: string;\n    layer?: string;\n    source?: string;\n  };\n};\n\nexport type TncFare = {\n  currencyCode: string;\n  maxTNCFare: number;\n  minTNCFare: number;\n};\n\nexport type UserPosition = {\n  coords?: {\n    latitude: number;\n    longitude: number;\n  };\n  error?: { message: string } | string;\n  fetching?: boolean;\n};\n\n/**\n * Describes a user location such as \"home\", \"work\" etc.\n */\nexport interface UserLocation extends Location {\n  icon?: string;\n  id?: string;\n}\n\n/**\n * Associates a location with a type string.\n */\nexport interface UserLocationAndType {\n  location: UserLocation;\n  type: string;\n}\n\n/**\n * Parameters for \"clear location\" event handlers.\n */\nexport interface ClearLocationArg {\n  locationType: string;\n}\n\n/**\n * Parameters for location actions/event handlers.\n */\nexport interface MapLocationActionArg {\n  location: UserLocation;\n  locationType: string;\n  reverseGeocode?: boolean;\n}\n\n/**\n * Supports leg icons for itinerary body and printable itinerary.\n */\nexport type LegIconComponent = FunctionComponent<{\n  leg: Leg;\n  title?: string;\n  width?: string;\n}>;\n\nexport type ConfiguredCompany = {\n  /**\n   * The id of the company. This is typically in all-caps.\n   */\n  id: string;\n  /**\n   * A human readable text value that can be displayed to users.\n   */\n  label: string;\n  /**\n   * A comma-separated list of applicable modes of travel that the company\n   * offers.\n   */\n  modes: string;\n};\n\n/**\n * Supports displaying accessibility ratings as a set of thresholds\n * associated with an icon or text.\n */\nexport type GradationMap = Record<\n  number,\n  { color: string; icon?: ReactElement; text?: string }\n>;\n\nexport const ModeSettingTypes = {\n  CHECKBOX: \"CHECKBOX\",\n  DROPDOWN: \"DROPDOWN\",\n  SLIDER: \"SLIDER\"\n};\n\nexport type DropdownOptions = {\n  default?: string;\n  label: string;\n  options: {\n    text: string;\n    value: string;\n    addTransportMode?: TransportMode;\n  }[];\n  type: \"DROPDOWN\";\n  value?: string;\n};\n\nexport type SliderOptions = {\n  default?: number;\n  high: number;\n  inverseKey?: string;\n  label: string;\n  labelHigh: string;\n  labelLow: string;\n  low: number;\n  step: number;\n  type: \"SLIDER\";\n  value?: number;\n};\n\nexport type CheckboxOptions = {\n  addTransportMode?: TransportMode | TransportMode[];\n  default?: boolean;\n  label: string;\n  type: \"CHECKBOX\";\n  truthValue?: boolean | string | number;\n  falseValue?: boolean | string | number;\n  value?: boolean;\n};\n\nexport type TransitSubmodeCheckboxOption = {\n  addTransportMode: TransportMode;\n  default?: boolean;\n  label: string;\n  type: \"SUBMODE\";\n  value?: boolean;\n};\n\nexport type ModeSettingBase = {\n  applicableMode: string;\n  iconName?: string;\n  icon?: JSX.Element;\n  key: string;\n};\n\nexport type ModeSetting = (\n  | CheckboxOptions\n  | SliderOptions\n  | DropdownOptions\n  | TransitSubmodeCheckboxOption\n) &\n  ModeSettingBase;\nexport type ModeSettingValues = Record<string, number | string | boolean>;\n\n/**\n * TransportModes correspond with the OTP GraphQL TransportMode.\n * Could be anything from walk, bike (qualifier: rent) to transit, tram, or bus.\n */\nexport type TransportMode = {\n  mode: string;\n  qualifier?: string;\n};\n\n/**\n * This is a combination of transportation modes,\n * with a label to describe them. These are designed\n * to appear in the mode selector as discrete options.\n */\nexport type ModeButtonDefinition = {\n  enabled?: boolean; // User has enabled this mode\n  Icon: StyledIcon | React.ComponentType; // From iconName (below)\n  iconName: string; // From config\n  key: string; // From config\n  label: string; // From config\n  modes?: TransportMode[]; // This comes from config\n  modeSettings?: ModeSetting[]; // From OTP definitions + config\n};\n\n/**\n * Definition for a fare product used to pay the fare for a leg in a transit journey\n */\nexport type FareProduct = {\n  id: string;\n  medium?: {\n    id: string;\n    name: string;\n  };\n  name: string;\n  price: Money;\n  riderCategory?: {\n    id: string;\n    name: string;\n  };\n};\n\nexport type FareProductSelector = {\n  mediumId: string;\n  riderCategoryId: string;\n};\n\n/**\n * Options for units of mass (used in CO₂ calculation config)\n */\nexport type MassUnitOption = \"ounce\" | \"kilogram\" | \"pound\" | \"gram\";\n"],"file":"index.js"}